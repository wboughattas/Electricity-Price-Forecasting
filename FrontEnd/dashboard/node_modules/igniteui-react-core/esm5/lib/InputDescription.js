/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { InputGroupItemDescription } from "./InputGroupItemDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var InputDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(InputDescription, _super);
    function InputDescription() {
        var _this = _super.call(this) || this;
        _this.ac = null;
        _this.w = null;
        _this.an = null;
        _this.ap = null;
        _this.j = false;
        _this.y = null;
        _this.x = null;
        _this.aq = null;
        _this.ad = null;
        _this.o = 0;
        _this.ae = null;
        _this.af = null;
        _this.aj = null;
        _this.ao = null;
        _this.ah = null;
        _this.ai = null;
        _this.s = 0;
        _this.ag = null;
        _this.z = null;
        _this.k = false;
        _this.ar = null;
        _this.i = false;
        _this.r = 0;
        _this.q = 0;
        _this.ak = null;
        _this.am = null;
        _this.al = null;
        _this.aa = null;
        _this.ab = null;
        return _this;
    }
    InputDescription.prototype.get_type = function () {
        return "Input";
    };
    Object.defineProperty(InputDescription.prototype, "density", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.e("Density");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "actualDensity", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.e("ActualDensity");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "mask", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.e("Mask");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "promptChar", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.e("PromptChar");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "includeLiterals", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("IncludeLiterals");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "actualTextColor", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
            this.e("ActualTextColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "actualHoverTextColor", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.e("ActualHoverTextColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "textColor", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
            this.e("TextColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "fontFamily", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.e("FontFamily");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "fontSize", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("FontSize");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "fontStyle", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.e("FontStyle");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "fontWeight", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
            this.e("FontWeight");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "inputType", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.e("InputType");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "placeholder", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.e("Placeholder");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "hoverTextColor", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.e("HoverTextColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "id", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.e("Id");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "tabIndex", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("TabIndex");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "$for", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
            this.e("For");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "ariaLabel", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.e("AriaLabel");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "isHover", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("IsHover");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "value", {
        get: function () {
            return this.ar;
        },
        set: function (a) {
            this.ar = a;
            this.e("Value");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "disabled", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.e("Disabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "selectionStart", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("SelectionStart");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "selectionEnd", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("SelectionEnd");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "keyDownRef", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.e("KeyDownRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "keyUpRef", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.e("KeyUpRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "keyPressRef", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.e("KeyPressRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "changeRef", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.e("ChangeRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDescription.prototype, "changingRef", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.e("ChangingRef");
        },
        enumerable: true,
        configurable: true
    });
    InputDescription.$t = markType(InputDescription, 'InputDescription', InputGroupItemDescription.$);
    return InputDescription;
}(InputGroupItemDescription));
export { InputDescription };
//# sourceMappingURL=InputDescription.js.map
