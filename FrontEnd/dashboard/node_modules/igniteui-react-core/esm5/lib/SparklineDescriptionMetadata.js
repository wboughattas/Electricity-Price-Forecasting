/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { SparklineDescription } from "./SparklineDescription";
/**
 * @hidden
 */
var SparklineDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(SparklineDescriptionMetadata, _super);
    function SparklineDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SparklineDescriptionMetadata.b = function (a) {
        if (SparklineDescriptionMetadata.a == null) {
            SparklineDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            SparklineDescriptionMetadata.c(a, SparklineDescriptionMetadata.a);
        }
    };
    SparklineDescriptionMetadata.c = function (a, b) {
        b.item("Brush", "Brush");
        b.item("NegativeBrush", "Brush");
        b.item("MarkerBrush", "Brush");
        b.item("NegativeMarkerBrush", "Brush");
        b.item("FirstMarkerBrush", "Brush");
        b.item("LastMarkerBrush", "Brush");
        b.item("HighMarkerBrush", "Brush");
        b.item("LowMarkerBrush", "Brush");
        b.item("TrendLineBrush", "Brush");
        b.item("HorizontalAxisBrush", "Brush");
        b.item("VerticalAxisBrush", "Brush");
        b.item("NormalRangeFill", "Brush");
        b.item("HorizontalAxisVisibility", "ExportedType:string:Visibility");
        b.item("VerticalAxisVisibility", "ExportedType:string:Visibility");
        b.item("MarkerVisibility", "ExportedType:string:Visibility");
        b.item("NegativeMarkerVisibility", "ExportedType:string:Visibility");
        b.item("FirstMarkerVisibility", "ExportedType:string:Visibility");
        b.item("LastMarkerVisibility", "ExportedType:string:Visibility");
        b.item("LowMarkerVisibility", "ExportedType:string:Visibility");
        b.item("HighMarkerVisibility", "ExportedType:string:Visibility");
        b.item("NormalRangeVisibility", "ExportedType:string:Visibility");
        b.item("DisplayNormalRangeInFront", "Boolean");
        b.item("MarkerSize", "Number:double");
        b.item("FirstMarkerSize", "Number:double");
        b.item("LastMarkerSize", "Number:double");
        b.item("HighMarkerSize", "Number:double");
        b.item("LowMarkerSize", "Number:double");
        b.item("NegativeMarkerSize", "Number:double");
        b.item("LineThickness", "Number:double");
        b.item("Minimum", "Number:double");
        b.item("Maximum", "Number:double");
        b.item("DataSourceRef", "(w:ItemsSource,wf:DataSource)DataRef::object");
        b.item("ValueMemberPath", "String");
        b.item("LabelMemberPath", "String");
        b.item("TrendLineType", "ExportedType:string:TrendLineType");
        b.item("TrendLinePeriod", "Number:int");
        b.item("TrendLineThickness", "Number:double");
        b.item("NormalRangeMinimum", "Number:double");
        b.item("NormalRangeMaximum", "Number:double");
        b.item("DisplayType", "ExportedType:string:SparklineDisplayType");
        b.item("UnknownValuePlotting", "ExportedType:string:UnknownValuePlotting");
        b.item("VerticalAxisLabelRef", "(w:VerticalAxisLabel,wf:VerticalAxisLabel)DataRef");
        b.item("HorizontalAxisLabelRef", "(w:HorizontalAxisLabel,wf:HorizontalAxisLabel)DataRef");
        b.item("FormatLabelRef", "(w:FormatLabel,wf:FormatLabel)MethodRef");
        b.item("HorizontalLabelFormat", "String");
        b.item("HorizontalLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        b.item("VerticalLabelFormat", "String");
        b.item("VerticalLabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
        b.item("PixelScalingRatio", "Number:double");
        b.item("ActualPixelScalingRatio", "Number:double");
        SparklineDescriptionMetadata.e(a, b);
    };
    SparklineDescriptionMetadata.d = function (a) {
        SparklineDescriptionMetadata.b(a);
        a.n("Sparkline", function () { return new SparklineDescription(); });
        a.m("Sparkline", SparklineDescriptionMetadata.a);
    };
    SparklineDescriptionMetadata.e = function (a, b) {
        b.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamSparkline");
        b.item("Width", "(w:Width/DimensionTransform)String");
        b.item("Height", "(w:Height/DimensionTransform)String");
        b.item("Background", "(wf:BackColor/ColorTransform)Brush");
    };
    SparklineDescriptionMetadata.$t = markType(SparklineDescriptionMetadata, 'SparklineDescriptionMetadata');
    SparklineDescriptionMetadata.a = null;
    return SparklineDescriptionMetadata;
}(Base));
export { SparklineDescriptionMetadata };
//# sourceMappingURL=SparklineDescriptionMetadata.js.map
