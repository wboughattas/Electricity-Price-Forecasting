/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { ColumnDescription } from "./ColumnDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var NumericColumnDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(NumericColumnDescription, _super);
    function NumericColumnDescription() {
        var _this = _super.call(this) || this;
        _this.e2 = null;
        _this.e4 = null;
        _this.e3 = null;
        _this.e5 = null;
        _this.er = 0;
        _this.es = 0;
        _this.et = 0;
        _this.ep = false;
        _this.e1 = null;
        _this.ej = null;
        _this.e0 = null;
        _this.ez = null;
        _this.ex = null;
        _this.em = null;
        _this.ey = null;
        _this.ei = null;
        return _this;
    }
    NumericColumnDescription.prototype.get_type = function () {
        return "NumericColumn";
    };
    Object.defineProperty(NumericColumnDescription.prototype, "negativePrefix", {
        get: function () {
            return this.e2;
        },
        set: function (a) {
            this.e2 = a;
            this.e("NegativePrefix");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "positivePrefix", {
        get: function () {
            return this.e4;
        },
        set: function (a) {
            this.e4 = a;
            this.e("PositivePrefix");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "negativeSuffix", {
        get: function () {
            return this.e3;
        },
        set: function (a) {
            this.e3 = a;
            this.e("NegativeSuffix");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "positiveSuffix", {
        get: function () {
            return this.e5;
        },
        set: function (a) {
            this.e5 = a;
            this.e("PositiveSuffix");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "maxFractionDigits", {
        get: function () {
            return this.er;
        },
        set: function (a) {
            this.er = a;
            this.e("MaxFractionDigits");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "minFractionDigits", {
        get: function () {
            return this.es;
        },
        set: function (a) {
            this.es = a;
            this.e("MinFractionDigits");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "minIntegerDigits", {
        get: function () {
            return this.et;
        },
        set: function (a) {
            this.et = a;
            this.e("MinIntegerDigits");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "showGroupingSeparator", {
        get: function () {
            return this.ep;
        },
        set: function (a) {
            this.ep = a;
            this.e("ShowGroupingSeparator");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatString", {
        get: function () {
            return this.e1;
        },
        set: function (a) {
            this.e1 = a;
            this.e("FormatString");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatSpecifiers", {
        get: function () {
            return this.ej;
        },
        set: function (a) {
            this.ej = a;
            this.e("FormatSpecifiers");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "formatOverrideRef", {
        get: function () {
            return this.e0;
        },
        set: function (a) {
            this.e0 = a;
            this.e("FormatOverrideRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorType", {
        get: function () {
            return this.ez;
        },
        set: function (a) {
            this.ez = a;
            this.e("EditorType");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorDataSourceRef", {
        get: function () {
            return this.ex;
        },
        set: function (a) {
            this.ex = a;
            this.e("EditorDataSourceRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorDataSource", {
        get: function () {
            return this.em;
        },
        set: function (a) {
            this.em = a;
            this.e("EditorDataSource");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorTextField", {
        get: function () {
            return this.ey;
        },
        set: function (a) {
            this.ey = a;
            this.e("EditorTextField");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericColumnDescription.prototype, "editorValueField", {
        get: function () {
            return this.ei;
        },
        set: function (a) {
            this.ei = a;
            this.e("EditorValueField");
        },
        enumerable: true,
        configurable: true
    });
    NumericColumnDescription.$t = markType(NumericColumnDescription, 'NumericColumnDescription', ColumnDescription.$);
    NumericColumnDescription.__canMarshalByValue1 = true;
    return NumericColumnDescription;
}(ColumnDescription));
export { NumericColumnDescription };
//# sourceMappingURL=NumericColumnDescription.js.map
