/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var TreemapNodePointerEventArgsDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(TreemapNodePointerEventArgsDescription, _super);
    function TreemapNodePointerEventArgsDescription() {
        var _this = _super.call(this) || this;
        _this.q = 0;
        _this.p = 0;
        _this.v = null;
        _this.w = null;
        _this.y = null;
        _this.f = null;
        _this.j = false;
        _this.h = false;
        _this.i = false;
        _this.x = null;
        _this.o = 0;
        _this.z = null;
        _this.n = 0;
        return _this;
    }
    TreemapNodePointerEventArgsDescription.prototype.get_type = function () {
        return "TreemapNodePointerEventArgs";
    };
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "value", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("Value");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "sum", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("Sum");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "customValueRef", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.e("CustomValueRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "itemRef", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.e("ItemRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "parentItemRef", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
            this.e("ParentItemRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "position", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("Position");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "isRightButton", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("IsRightButton");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "isHandled", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("IsHandled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "isOverHeader", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.e("IsOverHeader");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "label", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.e("Label");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "parentValue", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("ParentValue");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "parentLabel", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.e("ParentLabel");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreemapNodePointerEventArgsDescription.prototype, "parentSum", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("ParentSum");
        },
        enumerable: true,
        configurable: true
    });
    TreemapNodePointerEventArgsDescription.$t = markType(TreemapNodePointerEventArgsDescription, 'TreemapNodePointerEventArgsDescription', Description.$);
    return TreemapNodePointerEventArgsDescription;
}(Description));
export { TreemapNodePointerEventArgsDescription };
//# sourceMappingURL=TreemapNodePointerEventArgsDescription.js.map
