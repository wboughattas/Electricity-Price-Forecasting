/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { BaseDOMEventProxy } from "./BaseDOMEventProxy";
import { TypeRegistrar, runOn, delegateCombine, Point_$type, String_$type, Delegate_$type, Number_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { List$1 } from "./List$1";
import { TouchPointInfo } from "./TouchPointInfo";
import { DOMExecutionContext } from "./DOMExecutionContext";
import { TouchGestureRecognizer } from "./TouchGestureRecognizer";
import { Rect } from "./Rect";
/**
 * @hidden
 */
var CanvasGestureDOMEventProxy = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CanvasGestureDOMEventProxy, _super);
    function CanvasGestureDOMEventProxy(a, b, c) {
        var _this = _super.call(this) || this;
        _this.dc = 0;
        _this.dd = "";
        _this.cz = null;
        _this.da = null;
        _this.c5 = new Dictionary$2(String_$type, List$1.$.specialize(Delegate_$type), 0);
        _this.d1 = null;
        _this.c0 = false;
        _this.c6 = new List$1(Number_$type, 0);
        _this.c7 = new List$1(Point_$type, 0);
        _this.c2 = false;
        _this.c8 = new List$1(TouchPointInfo.$, 0);
        _this.br = c;
        _this.bx = b;
        _this.cz = new TouchGestureRecognizer(new DOMExecutionContext(b));
        var d = _this.cz;
        d.holdEnding = delegateCombine(d.holdEnding, runOn(_this, _this.df));
        var e = _this.cz;
        e.holdStarting = delegateCombine(e.holdStarting, runOn(_this, _this.dg));
        var f = _this.cz;
        f.zoomStarting = delegateCombine(f.zoomStarting, runOn(_this, _this.dn));
        var g = _this.cz;
        g.zoomEnding = delegateCombine(g.zoomEnding, runOn(_this, _this.dm));
        var h = _this.cz;
        h.panStarting = delegateCombine(h.panStarting, runOn(_this, _this.dl));
        var i = _this.cz;
        i.panEnding = delegateCombine(i.panEnding, runOn(_this, _this.dk));
        var j = _this.cz;
        j.manipulationStarting = delegateCombine(j.manipulationStarting, runOn(_this, _this.dj));
        var k = _this.cz;
        k.manipulationChanging = delegateCombine(k.manipulationChanging, runOn(_this, _this.dh));
        var l = _this.cz;
        l.manipulationEnding = delegateCombine(l.manipulationEnding, runOn(_this, _this.di));
        var m = _this.cz;
        m.doubleTapped = delegateCombine(m.doubleTapped, runOn(_this, _this.de));
        var n = _this.cz;
        n.flingStarting = delegateCombine(n.flingStarting, runOn(_this, _this.c1));
        _this.al = function (o) { return true; };
        _this.aa = true;
        CanvasGestureDOMEventProxy.db++;
        _this.dc = CanvasGestureDOMEventProxy.db;
        _this.dd = ".DOMProxy" + _this.dc.toString();
        _this.bc = 0;
        _this.by = a;
        BaseDOMEventProxy.bn = false;
        try {
            BaseDOMEventProxy.bn = (window.navigator.msPointerEnabled && MSGesture !== undefined);
        }
        catch (o) {
        }
        BaseDOMEventProxy.bo = false;
        try {
            BaseDOMEventProxy.bo = (window.PointerEvent || window.navigator.pointerEnabled);
        }
        catch (p) {
        }
        if (BaseDOMEventProxy.bs) {
            _this.aa = false;
        }
        BaseDOMEventProxy.b6 = _this.b5();
        BaseDOMEventProxy.b3 = _this.b4();
        _this.ap(_this.by, "");
        _this.ak = function (q) { return true; };
        return _this;
    }
    CanvasGestureDOMEventProxy.prototype.d = function () {
        var a = new CanvasGestureDOMEventProxy(this.by, this.bx, this.br);
        a.aa = this.aa;
        a.al = this.al;
        return a;
    };
    CanvasGestureDOMEventProxy.prototype.c1 = function (a, b) {
        return this.ad({ $type: Point_$type, x: b.a, y: b.b }, b.h, b.i);
    };
    CanvasGestureDOMEventProxy.prototype.de = function (a, b) {
        this.av({ $type: Point_$type, x: b.a, y: b.b });
    };
    CanvasGestureDOMEventProxy.prototype.get_aj = function () {
        return true;
    };
    CanvasGestureDOMEventProxy.prototype.di = function (a, b) {
        if (this.cz.n == 0) {
            this.az({ $type: Point_$type, x: b.a, y: b.b }, b.d);
            this.cl();
        }
    };
    CanvasGestureDOMEventProxy.prototype.dh = function (a, b) {
        if (this.cz.n == 2) {
            this.a6({ $type: Point_$type, x: b.a, y: b.b }, b.d);
            this.a9({ $type: Point_$type, x: b.a, y: b.b }, b.d, b.e, b.c);
        }
        if (this.cz.n == 1 || this.cz.n == 5) {
            this.at({ $type: Point_$type, x: b.a, y: b.b }, true);
            this.ax({ $type: Point_$type, x: b.a, y: b.b });
        }
    };
    CanvasGestureDOMEventProxy.prototype.dj = function (a, b) {
    };
    CanvasGestureDOMEventProxy.prototype.dk = function (a, b) {
        this.c0 = false;
        if (this.cz.n == 0) {
            this.as({ $type: Point_$type, x: b.a, y: b.b }, true);
            this.aw({ $type: Point_$type, x: b.a, y: b.b });
        }
    };
    CanvasGestureDOMEventProxy.prototype.dl = function (a, b) {
        this.ay({ $type: Point_$type, x: b.a, y: b.b });
    };
    CanvasGestureDOMEventProxy.prototype.dm = function (a, b) {
        this.a8({ $type: Point_$type, x: b.a, y: b.b }, b.d, b.e, b.c);
    };
    CanvasGestureDOMEventProxy.prototype.dn = function (a, b) {
        this.a7({ $type: Point_$type, x: b.a, y: b.b }, 1);
        this.ba({ $type: Point_$type, x: b.a, y: b.b }, 1, 1, 1);
    };
    CanvasGestureDOMEventProxy.prototype.dg = function (a, b) {
        this.c0 = true;
        this.a0({ $type: Point_$type, x: b.a, y: b.b });
    };
    CanvasGestureDOMEventProxy.prototype.df = function (a, b) {
        if (this.cz.n == 0) {
            this.as({ $type: Point_$type, x: b.a, y: b.b }, true);
        }
    };
    CanvasGestureDOMEventProxy.c3 = function () {
        BaseDOMEventProxy.bn = false;
        try {
            BaseDOMEventProxy.bn = (window.navigator.msPointerEnabled && MSGesture !== undefined);
        }
        catch (a) {
        }
        BaseDOMEventProxy.bo = false;
        try {
            BaseDOMEventProxy.bo = (window.PointerEvent || window.navigator.pointerEnabled);
        }
        catch (b) {
        }
        return BaseDOMEventProxy.bs;
    };
    CanvasGestureDOMEventProxy.prototype.dp = function (a, b, c) {
    };
    CanvasGestureDOMEventProxy.prototype.ap = function (a, b) {
        var c = a;
        if (!this.bx.supportsDOMEvents()) {
            return;
        }
        var d = this.dd + b;
        var e = new List$1(Delegate_$type, 0);
        this.c5.addItem(d, e);
        this.dp(a, b, e);
        if (!BaseDOMEventProxy.bs) {
            e.add(c.listen("mousemove", runOn(this, this.cd)));
            e.add(c.listen("mouseleave", runOn(this, this.cc)));
            e.add(c.listen("mousedown", runOn(this, this.cb)));
            e.add(c.listen("mouseup", runOn(this, this.cf)));
            e.add(this.bx.globalListen("window", "mouseup", runOn(this, this.ct)));
        }
        e.add(c.listen("keydown", runOn(this, this.b8)));
        e.add(c.listen("keyup", runOn(this, this.ca)));
        if (BaseDOMEventProxy.bs) {
            var source_ = this.by.getNativeElement();
            BaseDOMEventProxy.cn(source_);
            var f = this.by.getNativeElement();
            if (BaseDOMEventProxy.bo) {
                e.add(c.listen("pointerdown", runOn(this, this.ds)));
                e.add(c.listen("pointerup", runOn(this, this.dv)));
                e.add(c.listen("pointercancel", runOn(this, this.dr)));
                e.add(c.listen("pointermove", runOn(this, this.dt)));
                e.add(c.listen("pointerleave", runOn(this, this.du)));
                e.add(c.listen("lostpointercapture", runOn(this, this.dq)));
            }
            else {
                e.add(c.listen("MSPointerDown", runOn(this, this.ds)));
                e.add(c.listen("MSPointerUp", runOn(this, this.dv)));
                e.add(c.listen("MSPointerCancel", runOn(this, this.dr)));
                e.add(c.listen("MSPointerMove", runOn(this, this.dt)));
                e.add(c.listen("MSPointerLeave", runOn(this, this.du)));
                e.add(c.listen("MSLostPointerCapture", runOn(this, this.dq)));
            }
        }
        else {
            e.add(c.listen("touchstart", runOn(this, this.dy)));
            e.add(c.listen("touchmove", runOn(this, this.dx)));
            e.add(c.listen("touchend", runOn(this, this.dw)));
        }
        if (this.br) {
            e.add(c.listen("wheel", runOn(this, this.cg)));
        }
        else {
            e.add(c.listen("DOMMouseScroll", runOn(this, this.ce)));
            e.add(c.listen("mousewheel", runOn(this, this.ce)));
        }
    };
    CanvasGestureDOMEventProxy.prototype.dv = function (e_) {
        var a = this.bl(e_);
        var b = this.c6.indexOf((e_.originalEvent.pointerId));
        if (b >= 0) {
            this.c6.removeAt(b);
            this.c7.removeAt(b);
            this.b2 = this.c6.count;
        }
        if (a) {
            this.dw(e_);
        }
        else {
            this.cf(e_);
        }
    };
    CanvasGestureDOMEventProxy.prototype.dq = function (e_) {
        var a = this.bl(e_);
    };
    CanvasGestureDOMEventProxy.prototype.dr = function (e_) {
        var a = this.bl(e_);
        var b = this.c6.indexOf((e_.originalEvent.pointerId));
        if (b >= 0) {
            this.c6.removeAt(b);
            this.c7.removeAt(b);
            this.b2 = this.c6.count;
        }
    };
    CanvasGestureDOMEventProxy.prototype.ds = function (e_) {
        var a = this.bl(e_);
        BaseDOMEventProxy.cm(e_);
        this.c6.add((e_.originalEvent.pointerId));
        this.c7.add({ $type: Point_$type, x: e_.pageX, y: e_.pageY });
        this.b2 = this.c6.count;
        if (a) {
            this.cs(e_);
        }
        else {
            this.cr(e_);
        }
        this.cq(e_);
        if (!this.c2 && this.ab(this.cx, a, false)) {
            var eventSource_ = this.by.getNativeElement();
            if (BaseDOMEventProxy.bo) {
                eventSource_.setPointerCapture(e_.originalEvent.pointerId);
            }
            else {
                eventSource_.msSetPointerCapture(e_.originalEvent.pointerId);
            }
        }
        if (a) {
            this.dy(e_);
        }
        else {
            this.cb(e_);
        }
    };
    CanvasGestureDOMEventProxy.prototype.dt = function (e_) {
        var a = this.bl(e_);
        BaseDOMEventProxy.cm(e_);
        this.cq(e_);
        this.cs(e_);
        var b = this.c6.indexOf((e_.originalEvent.pointerId));
        if (b >= 0) {
            this.c7._inner[b] = { $type: Point_$type, x: e_.pageX, y: e_.pageY };
        }
        if (this.c2 && this.ab(this.cx, a, false)) {
            var eventSource_ = this.by.getNativeElement();
            if (BaseDOMEventProxy.bo) {
                eventSource_.setPointerCapture(e_.originalEvent.pointerId);
            }
            else {
                eventSource_.msSetPointerCapture(e_.originalEvent.pointerId);
            }
        }
        if (a) {
            this.dx(e_);
        }
        else {
            this.cd(e_);
        }
    };
    CanvasGestureDOMEventProxy.prototype.du = function (e_) {
        var a = this.bl(e_);
        if (a) {
        }
        else {
            this.cc(e_);
        }
    };
    CanvasGestureDOMEventProxy.prototype.dy = function (e_) {
        this.bm = true;
        this.cq(e_);
        this.cs(e_);
        this.d1 = this.cw;
        if (this.ab(this.cx, true, false)) {
            if (!this.aa || this.b2 > 1) {
                if (this.bq) {
                    this.bq = false;
                    this.b7();
                }
                this.co(e_);
            }
            else {
                this.bq = true;
                this.c0 = false;
            }
            this.a4(this.cx, false, true);
            this.a1(this.cx);
            this.au(this.cw, true);
            this.cz.a6(this.c9(e_));
        }
    };
    CanvasGestureDOMEventProxy.prototype.c9 = function (e_) {
        var a = BaseDOMEventProxy.cy(this.by);
        var b = this.bf;
        var c = 0;
        var d = 0;
        if (Rect.l_op_Inequality(b, null)) {
            c = b.left;
            d = b.top;
        }
        this.c8.clear();
        if (BaseDOMEventProxy.bs) {
            var e = this.c6.count;
            for (var j_ = 0; j_ < e; j_++) {
                var f = this.c6._inner[j_];
                var g = this.c7._inner[j_];
                var h = g.x;
                var i = g.y;
                var j = new TouchPointInfo(1);
                j.a = (h - a.left) - b.left;
                j.b = (i - a.top) - b.top;
                this.c8.add(j);
            }
        }
        else {
            var k = (e_.originalEvent.targetTouches.length);
            for (var j_ = 0; j_ < k; j_++) {
                var l = (e_.originalEvent.targetTouches[j_].pageX);
                var m = (e_.originalEvent.targetTouches[j_].pageY);
                var n = new TouchPointInfo(1);
                n.a = (l - a.left) - c;
                n.b = (m - a.top) - d;
                this.c8.add(n);
            }
        }
        return this.c8;
    };
    CanvasGestureDOMEventProxy.prototype.dx = function (a) {
        this.bm = true;
        this.cq(a);
        this.cs(a);
        if (this.bq) {
            if ((this.ab(this.cx, true, false) && this.c4()) || this.c0 == true || this.cz.n == 2) {
                this.bq = false;
                this.b7();
            }
        }
        if ((this.c0 || this.cz.n == 2 || this.ab(this.cx, true, false)) && !this.bq) {
            this.c0 = true;
            this.co(a);
            this.cz.a6(this.c9(a));
        }
    };
    CanvasGestureDOMEventProxy.prototype.c4 = function () {
        var a = { $type: Point_$type, x: this.d1.x - this.cw.x, y: this.d1.y - this.cw.y };
        if (Math.abs(a.x) > Math.abs(a.y)) {
            a.y = 0;
        }
        if (Math.abs(a.y) > Math.abs(a.x)) {
            a.x = 0;
        }
        return this.al(a);
    };
    CanvasGestureDOMEventProxy.prototype.dw = function (a) {
        this.bm = false;
        this.cq(a);
        this.cs(a);
        if (this.bq) {
            this.bq = false;
            this.b7();
        }
        var b = this.cz.n;
        var c = this.ab(this.cx, true, false) || b != 0;
        if (this.cz.n != 2 && this.cz.n != 5) {
            this.a4(this.cx, false, true);
            this.a5(this.cx);
        }
        var d = this.cz.n == 2;
        if (d) {
            c = true;
            this.as({ $type: Point_$type, x: this.cz.as, y: this.cz.at }, true);
        }
        this.cz.a6(this.c9(a));
        if (this.cz.n == 0) {
            this.cl();
        }
        if (!d && this.cz.n == 0) {
            this.as({ $type: Point_$type, x: this.cz.as, y: this.cz.at }, true);
        }
        if (this.cz.n != 0) {
            c = true;
        }
        if (c) {
            this.co(a);
        }
    };
    CanvasGestureDOMEventProxy.prototype.dz = function (a) {
        if (this.c5.containsKey(a)) {
            var b = this.c5.item(a);
            this.c5.removeItem(a);
            for (var c = 0; c < b.count; c++) {
                b._inner[c]();
            }
            b.clear();
        }
    };
    CanvasGestureDOMEventProxy.prototype.bb = function (a, b) {
        var c = a;
        var d = this.dd + b;
        this.dz(d);
    };
    CanvasGestureDOMEventProxy.prototype.aq = function () {
        if (this.by == null) {
            return;
        }
        this.dz(this.dd);
        this.by = null;
    };
    CanvasGestureDOMEventProxy.register = function () {
        TypeRegistrar.register("CanvasGestureDOMEventProxy", CanvasGestureDOMEventProxy.$);
    };
    CanvasGestureDOMEventProxy.$t = markType(CanvasGestureDOMEventProxy, 'CanvasGestureDOMEventProxy', BaseDOMEventProxy.$);
    CanvasGestureDOMEventProxy.db = 0;
    return CanvasGestureDOMEventProxy;
}(BaseDOMEventProxy));
export { CanvasGestureDOMEventProxy };
//# sourceMappingURL=CanvasGestureDOMEventProxy.js.map
