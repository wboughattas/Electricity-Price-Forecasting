/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var CheckboxDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CheckboxDescription, _super);
    function CheckboxDescription() {
        var _this = _super.call(this) || this;
        _this.ao = null;
        _this.ay = null;
        _this.ak = null;
        _this.aq = null;
        _this.ax = null;
        _this.aj = null;
        _this.az = null;
        _this.ar = null;
        _this.al = null;
        _this.ai = null;
        _this.u = 0;
        _this.r = 0;
        _this.v = 0;
        _this.w = 0;
        _this.t = 0;
        _this.s = 0;
        _this.ah = null;
        _this.at = null;
        _this.as = null;
        _this.au = null;
        _this.a0 = null;
        _this.aw = null;
        _this.ae = 0;
        _this.ad = 0;
        _this.j = false;
        _this.an = null;
        _this.am = null;
        _this.av = null;
        _this.h = false;
        _this.f = false;
        _this.k = false;
        _this.g = false;
        _this.i = false;
        _this.ap = null;
        return _this;
    }
    CheckboxDescription.prototype.get_type = function () {
        return "Checkbox";
    };
    Object.defineProperty(CheckboxDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "baseTheme", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.e("BaseTheme");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "uncheckedBackgroundColor", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
            this.e("UncheckedBackgroundColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualUncheckedBackgroundColor", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.e("ActualUncheckedBackgroundColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "checkedBackgroundColor", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
            this.e("CheckedBackgroundColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "tickColor", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            this.ax = a;
            this.e("TickColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualTickColor", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.e("ActualTickColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "uncheckedBorderColor", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            this.az = a;
            this.e("UncheckedBorderColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "checkedBorderColor", {
        get: function () {
            return this.ar;
        },
        set: function (a) {
            this.ar = a;
            this.e("CheckedBorderColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualUncheckedBorderColor", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.e("ActualUncheckedBorderColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualCheckedBorderColor", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.e("ActualCheckedBorderColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "borderWidth", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.e("BorderWidth");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualBorderWidth", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("ActualBorderWidth");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "cornerRadius", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.e("CornerRadius");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "tickStrokeWidth", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.e("TickStrokeWidth");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualTickStrokeWidth", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("ActualTickStrokeWidth");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualCornerRadius", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("ActualCornerRadius");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "actualCheckedBackgroundColor", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.e("ActualCheckedBackgroundColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "inputId", {
        get: function () {
            return this.at;
        },
        set: function (a) {
            this.at = a;
            this.e("InputId");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "id", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            this.as = a;
            this.e("Id");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "labelId", {
        get: function () {
            return this.au;
        },
        set: function (a) {
            this.au = a;
            this.e("LabelId");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "valueRef", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
            this.e("ValueRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "name", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
            this.e("Name");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "tabIndex", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.e("TabIndex");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "required", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.e("Required");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "focused", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("Focused");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "ariaLabelledBy", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.e("AriaLabelledBy");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "ariaLabel", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.e("AriaLabel");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "labelPosition", {
        get: function () {
            return this.av;
        },
        set: function (a) {
            this.av = a;
            this.e("LabelPosition");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "disableRipple", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("DisableRipple");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "checked", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("Checked");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "indeterminate", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("Indeterminate");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "disabled", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("Disabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "disableTransitions", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.e("DisableTransitions");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxDescription.prototype, "changeRef", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.e("ChangeRef");
        },
        enumerable: true,
        configurable: true
    });
    CheckboxDescription.$t = markType(CheckboxDescription, 'CheckboxDescription', Description.$);
    return CheckboxDescription;
}(Description));
export { CheckboxDescription };
//# sourceMappingURL=CheckboxDescription.js.map
