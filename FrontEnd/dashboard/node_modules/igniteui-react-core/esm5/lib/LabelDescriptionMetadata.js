/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { InputGroupItemDescriptionMetadata } from "./InputGroupItemDescriptionMetadata";
import { LabelDescription } from "./LabelDescription";
/**
 * @hidden
 */
var LabelDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(LabelDescriptionMetadata, _super);
    function LabelDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LabelDescriptionMetadata.b = function (a) {
        if (LabelDescriptionMetadata.a == null) {
            LabelDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            LabelDescriptionMetadata.c(a, LabelDescriptionMetadata.a);
        }
    };
    LabelDescriptionMetadata.c = function (a, b) {
        InputGroupItemDescriptionMetadata.c(a, b);
        b.item("BaseTheme", "ExportedType:string:BaseControlTheme");
        b.item("Density", "ExportedType:string:ControlDisplayDensity");
        b.item("ActualDensity", "ExportedType:string:ControlDisplayDensity");
        b.item("ActualTextColor", "Brush");
        b.item("ActualHighlightTextColor", "Brush");
        b.item("ActualHoverHighlightTextColor", "Brush");
        b.item("ActualHoverTextColor", "Brush");
        b.item("TextColor", "Brush");
        b.item("HighlightTextColor", "Brush");
        b.item("HoverHighlightTextColor", "Brush");
        b.item("FontFamily", "(w:FontFamily/FontFamilyTransform,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
        b.item("FontSize", "(w:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
        b.item("FontStyle", "(w:FontStyle/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
        b.item("FontWeight", "(w:FontWeight/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
        b.item("HoverTextColor", "Brush");
        b.item("Id", "String");
        b.item("Display", "String");
        b.item("FlexDirection", "String");
        b.item("FlexGrow", "String");
        b.item("AlignItems", "String");
        b.item("TabIndex", "Number:int");
        b.item("For", "(w:ForAttribute,wf:ForAttribute)String");
        b.item("AriaLabel", "String");
        b.item("Text", "String");
        b.item("IsHover", "Boolean");
        b.item("Value", "Boolean");
        b.item("Disabled", "(w:IsDisabled,wf:IsDisabled)Boolean");
    };
    LabelDescriptionMetadata.d = function (a) {
        LabelDescriptionMetadata.b(a);
        a.n("Label", function () { return new LabelDescription(); });
        a.m("Label", LabelDescriptionMetadata.a);
    };
    LabelDescriptionMetadata.$t = markType(LabelDescriptionMetadata, 'LabelDescriptionMetadata');
    LabelDescriptionMetadata.a = null;
    return LabelDescriptionMetadata;
}(Base));
export { LabelDescriptionMetadata };
//# sourceMappingURL=LabelDescriptionMetadata.js.map
