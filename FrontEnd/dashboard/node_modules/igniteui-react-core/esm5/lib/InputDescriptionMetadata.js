/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { KeyEventArgsDescriptionMetadata } from "./KeyEventArgsDescriptionMetadata";
import { InputChangeEventArgsDescriptionMetadata } from "./InputChangeEventArgsDescriptionMetadata";
import { InputGroupItemDescriptionMetadata } from "./InputGroupItemDescriptionMetadata";
import { InputDescription } from "./InputDescription";
/**
 * @hidden
 */
var InputDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(InputDescriptionMetadata, _super);
    function InputDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputDescriptionMetadata.b = function (a) {
        if (InputDescriptionMetadata.a == null) {
            InputDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            InputDescriptionMetadata.c(a, InputDescriptionMetadata.a);
            KeyEventArgsDescriptionMetadata.d(a);
            InputChangeEventArgsDescriptionMetadata.d(a);
        }
    };
    InputDescriptionMetadata.c = function (a, b) {
        InputGroupItemDescriptionMetadata.c(a, b);
        b.item("Density", "ExportedType:string:ControlDisplayDensity");
        b.item("ActualDensity", "ExportedType:string:ControlDisplayDensity");
        b.item("Mask", "String");
        b.item("PromptChar", "String");
        b.item("IncludeLiterals", "Boolean");
        b.item("ActualTextColor", "Brush");
        b.item("ActualHoverTextColor", "Brush");
        b.item("TextColor", "Brush");
        b.item("FontFamily", "(w:FontFamily/FontFamilyTransform,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
        b.item("FontSize", "(w:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
        b.item("FontStyle", "(w:FontStyle/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
        b.item("FontWeight", "(w:FontWeight/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
        b.item("InputType", "String");
        b.item("Placeholder", "String");
        b.item("HoverTextColor", "Brush");
        b.item("Id", "String");
        b.item("TabIndex", "Number:int");
        b.item("For", "(w:ForAttribute,wf:ForAttribute)String");
        b.item("AriaLabel", "String");
        b.item("IsHover", "Boolean");
        b.item("Value", "String");
        b.item("Disabled", "(w:IsDisabled,wf:IsDisabled)Boolean");
        b.item("SelectionStart", "Number:int");
        b.item("SelectionEnd", "Number:int");
        b.item("KeyDownRef", "EventRef::keyDown");
        b.item("KeyUpRef", "EventRef::keyUp");
        b.item("KeyPressRef", "EventRef::keyPress");
        b.item("ChangeRef", "EventRef::change");
        b.item("ChangingRef", "EventRef::changing");
    };
    InputDescriptionMetadata.d = function (a) {
        InputDescriptionMetadata.b(a);
        a.n("Input", function () { return new InputDescription(); });
        a.m("Input", InputDescriptionMetadata.a);
    };
    InputDescriptionMetadata.$t = markType(InputDescriptionMetadata, 'InputDescriptionMetadata');
    InputDescriptionMetadata.a = null;
    return InputDescriptionMetadata;
}(Base));
export { InputDescriptionMetadata };
//# sourceMappingURL=InputDescriptionMetadata.js.map
