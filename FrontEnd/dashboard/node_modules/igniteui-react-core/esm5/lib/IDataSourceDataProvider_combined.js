/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { ISupportsDataChangeNotifications_$type } from "./ISupportsDataChangeNotifications";
import { IDataSourceSupportsCount_$type } from "./IDataSourceSupportsCount";
import { Base, Type, markType, typeGetValue } from "./type";
import { SyncableObservableCollection$1 } from "./SyncableObservableCollection$1";
import { IDataSourceSupportsIndexedAccess_$type } from "./IDataSourceSupportsIndexedAccess";
import { Convert } from "./Convert";
import { truncate, isNaN_ } from "./number";
import { toOADate, fromOADate } from "./dateExtended";
import { DefaultSummaryResult } from "./DefaultSummaryResult";
import { stringCompare } from "./string";
import { ArgumentNullException } from "./ArgumentNullException";
/**
 * @hidden
 */
export var IDataSourceDataProvider_$type = /*@__PURE__*/ new Type(null, 'IDataSourceDataProvider', null, [ISupportsDataChangeNotifications_$type, IDataSourceSupportsCount_$type]);
/**
 * @hidden
 */
export var IFilterExpression_$type = /*@__PURE__*/ new Type(null, 'IFilterExpression');
/**
 * @hidden
 */
var FilterExpressionCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(FilterExpressionCollection, _super);
    function FilterExpressionCollection() {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.f = null;
        _this.f = new SyncableObservableCollection$1(IFilterExpression_$type);
        return _this;
    }
    Object.defineProperty(FilterExpressionCollection.prototype, "syncTarget", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.a = null;
                return;
            }
            this.a = a;
            this.f.syncTarget = this.a.f;
        },
        enumerable: true,
        configurable: true
    });
    FilterExpressionCollection.prototype.add = function (a) {
        return this.f.add(a);
    };
    FilterExpressionCollection.prototype.insert = function (a, b) {
        this.f.add1(a, b);
    };
    FilterExpressionCollection.prototype.clear = function () {
        this.f.clear();
    };
    FilterExpressionCollection.prototype.get = function (a) {
        return this.f.get(a);
    };
    FilterExpressionCollection.prototype.indexOf = function (a) {
        return this.f.indexOf(a);
    };
    FilterExpressionCollection.prototype.remove = function (a) {
        return this.f.remove1(a);
    };
    FilterExpressionCollection.prototype.removeAt = function (a) {
        return this.f.remove(a);
    };
    FilterExpressionCollection.prototype.set = function (a, b) {
        return this.f.set(a, b);
    };
    FilterExpressionCollection.prototype.size = function () {
        return this.f.size();
    };
    Object.defineProperty(FilterExpressionCollection.prototype, "onChanged", {
        get: function () {
            return this.f.f;
        },
        set: function (a) {
            this.f.f = a;
        },
        enumerable: true,
        configurable: true
    });
    FilterExpressionCollection.prototype.m = function (a) {
        this.f.addListener(a);
    };
    FilterExpressionCollection.prototype.p = function (a) {
        this.f.removeListener(a);
    };
    Object.defineProperty(FilterExpressionCollection.prototype, "j", {
        get: function () {
            return this.f.all;
        },
        enumerable: true,
        configurable: true
    });
    FilterExpressionCollection.$t = markType(FilterExpressionCollection, 'FilterExpressionCollection');
    return FilterExpressionCollection;
}(Base));
export { FilterExpressionCollection };
/**
 * @hidden
 */
export var IDataSource_$type = /*@__PURE__*/ new Type(null, 'IDataSource', null, [ISupportsDataChangeNotifications_$type, IDataSourceSupportsIndexedAccess_$type]);
/**
 * @hidden
 */
var SummaryCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(SummaryCalculator, _super);
    function SummaryCalculator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._propertyName = null;
        _this._propertyType = 0;
        _this._dataSource = null;
        _this._isSummaryDirty = false;
        _this.f = 5;
        return _this;
    }
    Object.defineProperty(SummaryCalculator.prototype, "propertyName", {
        get: function () {
            return this._propertyName;
        },
        set: function (a) {
            this._propertyName = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SummaryCalculator.prototype, "propertyType", {
        get: function () {
            return this._propertyType;
        },
        set: function (a) {
            this._propertyType = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SummaryCalculator.prototype, "dataSource", {
        get: function () {
            return this._dataSource;
        },
        set: function (a) {
            this._dataSource = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SummaryCalculator.prototype, "isSummaryDirty", {
        get: function () {
            return this._isSummaryDirty;
        },
        set: function (a) {
            this._isSummaryDirty = a;
        },
        enumerable: true,
        configurable: true
    });
    SummaryCalculator.prototype.get_operand = function () {
        return this.f;
    };
    Object.defineProperty(SummaryCalculator.prototype, "operand", {
        get: function () {
            return this.get_operand();
        },
        enumerable: true,
        configurable: true
    });
    SummaryCalculator.prototype.beginCalculation = function (a, b) {
        this.dataSource = a;
        this.propertyName = b;
        if (this.propertyName != null) {
            this.propertyType = a.resolveSchemaPropertyType(this.propertyName);
        }
        this.isSummaryDirty = false;
    };
    SummaryCalculator.prototype.endCalculation = function () {
        return null;
    };
    SummaryCalculator.prototype.aggregate = function (a) {
    };
    SummaryCalculator.prototype.itemAdded = function (a, b, c) {
        return b;
    };
    SummaryCalculator.prototype.itemRemoved = function (a, b, c) {
        return b;
    };
    SummaryCalculator.prototype.i = function (a) {
        if (this.dataSource == null) {
            return NaN;
        }
        var b = this.dataSource.getItemProperty(a, this.propertyName);
        if (b == null) {
            return NaN;
        }
        return this.j(b);
    };
    SummaryCalculator.prototype.j = function (a) {
        if (a == null) {
            return NaN;
        }
        switch (this.propertyType) {
            case 6: return a;
            case 5: return a;
            case 1: return typeGetValue(a);
            case 3: return typeGetValue(a);
            case 4: return typeGetValue(a);
            case 7: return a;
            case 8: return toOADate(a);
            case 11: try {
                return Convert.toDouble3(a);
            }
            catch (b) {
                return NaN;
            }
        }
        return 0;
    };
    SummaryCalculator.prototype.k = function (a) {
        switch (this.propertyType) {
            case 6: return a;
            case 5: return a;
            case 1: return truncate(a);
            case 3: return truncate(a);
            case 4: return truncate(a);
            case 7: return a;
            case 8: return fromOADate(a);
            default: return a;
        }
    };
    SummaryCalculator.$t = markType(SummaryCalculator, 'SummaryCalculator');
    return SummaryCalculator;
}(Base));
export { SummaryCalculator };
/**
 * @hidden
 */
var SumSummaryCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(SumSummaryCalculator, _super);
    function SumSummaryCalculator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.p = 0;
        return _this;
    }
    SumSummaryCalculator.prototype.get_displayName = function () {
        return "Sum";
    };
    Object.defineProperty(SumSummaryCalculator.prototype, "displayName", {
        get: function () {
            return this.get_displayName();
        },
        enumerable: true,
        configurable: true
    });
    SumSummaryCalculator.prototype.get_operand = function () {
        return 2;
    };
    SumSummaryCalculator.prototype.beginCalculation = function (a, b) {
        _super.prototype.beginCalculation.call(this, a, b);
        this.p = 0;
    };
    SumSummaryCalculator.prototype.endCalculation = function () {
        return new DefaultSummaryResult(this.propertyName, 2, this.k(this.p));
    };
    SumSummaryCalculator.prototype.aggregate = function (a) {
        var b = this.i(a);
        if (!isNaN_(b)) {
            this.p += b;
        }
    };
    SumSummaryCalculator.prototype.itemAdded = function (a, b, c) {
        var d = this.i(a);
        if (isNaN_(d)) {
            d = 0;
        }
        if (b == null) {
            return new DefaultSummaryResult(this.propertyName, 2, this.k(d));
        }
        var e = this.j(b.value) + d;
        return new DefaultSummaryResult(this.propertyName, 2, this.k(e));
    };
    SumSummaryCalculator.prototype.itemRemoved = function (a, b, c) {
        var d = this.i(a);
        if (isNaN_(d)) {
            d = 0;
        }
        var e = this.j(b.value) - d;
        return new DefaultSummaryResult(this.propertyName, 2, this.k(e));
    };
    SumSummaryCalculator.$t = markType(SumSummaryCalculator, 'SumSummaryCalculator', SummaryCalculator.$);
    return SumSummaryCalculator;
}(SummaryCalculator));
export { SumSummaryCalculator };
/**
 * @hidden
 */
var CountSummaryCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CountSummaryCalculator, _super);
    function CountSummaryCalculator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.p = 0;
        return _this;
    }
    CountSummaryCalculator.prototype.get_displayName = function () {
        return "Count";
    };
    Object.defineProperty(CountSummaryCalculator.prototype, "displayName", {
        get: function () {
            return this.get_displayName();
        },
        enumerable: true,
        configurable: true
    });
    CountSummaryCalculator.prototype.get_operand = function () {
        return 4;
    };
    CountSummaryCalculator.prototype.beginCalculation = function (a, b) {
        _super.prototype.beginCalculation.call(this, a, b);
        this.propertyType = 1;
        this.p = 0;
    };
    CountSummaryCalculator.prototype.endCalculation = function () {
        return new DefaultSummaryResult(this.propertyName, 4, this.p);
    };
    CountSummaryCalculator.prototype.aggregate = function (a) {
        this.p++;
    };
    CountSummaryCalculator.prototype.itemAdded = function (a, b, c) {
        if (b == null) {
            return new DefaultSummaryResult(this.propertyName, 4, 1);
        }
        return new DefaultSummaryResult(this.propertyName, 4, typeGetValue(b.value) + 1);
    };
    CountSummaryCalculator.prototype.itemRemoved = function (a, b, c) {
        return new DefaultSummaryResult(this.propertyName, 4, typeGetValue(b.value) - 1);
    };
    CountSummaryCalculator.$t = markType(CountSummaryCalculator, 'CountSummaryCalculator', SummaryCalculator.$);
    return CountSummaryCalculator;
}(SummaryCalculator));
export { CountSummaryCalculator };
/**
 * @hidden
 */
var AverageSummaryCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(AverageSummaryCalculator, _super);
    function AverageSummaryCalculator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.p = 0;
        _this.q = 0;
        return _this;
    }
    AverageSummaryCalculator.prototype.get_displayName = function () {
        return "Avg";
    };
    Object.defineProperty(AverageSummaryCalculator.prototype, "displayName", {
        get: function () {
            return this.get_displayName();
        },
        enumerable: true,
        configurable: true
    });
    AverageSummaryCalculator.prototype.get_operand = function () {
        return 3;
    };
    AverageSummaryCalculator.prototype.beginCalculation = function (a, b) {
        _super.prototype.beginCalculation.call(this, a, b);
        this.p = 0;
        this.q = 0;
    };
    AverageSummaryCalculator.prototype.endCalculation = function () {
        var a = this.q > 0 ? this.p / this.q : 0;
        return new DefaultSummaryResult(this.propertyName, 3, this.k(a));
    };
    AverageSummaryCalculator.prototype.aggregate = function (a) {
        var b = this.i(a);
        if (!isNaN_(b)) {
            this.p += b;
            this.q++;
        }
    };
    AverageSummaryCalculator.prototype.itemAdded = function (a, b, c) {
        var d = this.i(a);
        if (isNaN_(d)) {
            d = 0;
        }
        if (b == null) {
            return new DefaultSummaryResult(this.propertyName, 3, this.k(d));
        }
        var e = this.j(b.value) * (c - 1);
        var f = (e + d) / c;
        return new DefaultSummaryResult(this.propertyName, 3, this.k(f));
    };
    AverageSummaryCalculator.prototype.itemRemoved = function (a, b, c) {
        var d = this.i(a);
        if (isNaN_(d)) {
            d = 0;
        }
        var e = this.j(b.value) * (c + 1);
        var f = (e - d) / c;
        return new DefaultSummaryResult(this.propertyName, 3, this.k(f));
    };
    AverageSummaryCalculator.$t = markType(AverageSummaryCalculator, 'AverageSummaryCalculator', SummaryCalculator.$);
    return AverageSummaryCalculator;
}(SummaryCalculator));
export { AverageSummaryCalculator };
/**
 * @hidden
 */
var MaxSummaryCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(MaxSummaryCalculator, _super);
    function MaxSummaryCalculator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.p = null;
        return _this;
    }
    MaxSummaryCalculator.prototype.get_displayName = function () {
        return "Max";
    };
    Object.defineProperty(MaxSummaryCalculator.prototype, "displayName", {
        get: function () {
            return this.get_displayName();
        },
        enumerable: true,
        configurable: true
    });
    MaxSummaryCalculator.prototype.get_operand = function () {
        return 1;
    };
    MaxSummaryCalculator.prototype.beginCalculation = function (a, b) {
        _super.prototype.beginCalculation.call(this, a, b);
        this.p = null;
    };
    MaxSummaryCalculator.prototype.endCalculation = function () {
        return new DefaultSummaryResult(this.propertyName, 1, this.p);
    };
    MaxSummaryCalculator.prototype.aggregate = function (a) {
        this.p = this.q(a, this.p);
    };
    MaxSummaryCalculator.prototype.itemAdded = function (a, b, c) {
        if (b == null) {
            return new DefaultSummaryResult(this.propertyName, 1, this.q(a, null));
        }
        var d = this.q(a, b.value);
        return new DefaultSummaryResult(this.propertyName, 1, d);
    };
    MaxSummaryCalculator.prototype.itemRemoved = function (a, b, c) {
        var d = this.dataSource.getItemProperty(a, this.propertyName);
        if (Base.equalsStatic(d, b.value)) {
            this.isSummaryDirty = true;
        }
        return b;
    };
    MaxSummaryCalculator.prototype.q = function (a, b) {
        var c = this.dataSource.getItemProperty(a, this.propertyName);
        if (b == null) {
            return c;
        }
        if (c == null) {
            return b;
        }
        switch (this.propertyType) {
            case 0:
                b = stringCompare(c, b) > 0 ? c : b;
                break;
            case 6:
                b = c > b ? c : b;
                break;
            case 5:
                b = c > b ? c : b;
                break;
            case 1:
                b = typeGetValue(c) > typeGetValue(b) ? c : b;
                break;
            case 3:
                b = typeGetValue(c) > typeGetValue(b) ? c : b;
                break;
            case 4:
                b = typeGetValue(c) > typeGetValue(b) ? c : b;
                break;
            case 7:
                b = c > b ? c : b;
                break;
            case 2:
                b = c ? c : b;
                break;
            case 10:
                b = typeGetValue(c) > typeGetValue(b) ? c : b;
                break;
            case 8:
                var xVal_ = c;
                var yVal_ = b;
                xVal_ = +xVal_;
                yVal_ = +yVal_;
                var d = typeGetValue(xVal_);
                var e = typeGetValue(yVal_);
                b = Base.compareSimple(d, e) > 0 ? c : b;
                break;
        }
        return b;
    };
    MaxSummaryCalculator.$t = markType(MaxSummaryCalculator, 'MaxSummaryCalculator', SummaryCalculator.$);
    return MaxSummaryCalculator;
}(SummaryCalculator));
export { MaxSummaryCalculator };
/**
 * @hidden
 */
var MinSummaryCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(MinSummaryCalculator, _super);
    function MinSummaryCalculator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.p = null;
        return _this;
    }
    MinSummaryCalculator.prototype.get_displayName = function () {
        return "Min";
    };
    Object.defineProperty(MinSummaryCalculator.prototype, "displayName", {
        get: function () {
            return this.get_displayName();
        },
        enumerable: true,
        configurable: true
    });
    MinSummaryCalculator.prototype.get_operand = function () {
        return 0;
    };
    MinSummaryCalculator.prototype.beginCalculation = function (a, b) {
        _super.prototype.beginCalculation.call(this, a, b);
        this.p = null;
    };
    MinSummaryCalculator.prototype.endCalculation = function () {
        return new DefaultSummaryResult(this.propertyName, 0, this.p);
    };
    MinSummaryCalculator.prototype.aggregate = function (a) {
        this.p = this.q(a, this.p);
    };
    MinSummaryCalculator.prototype.itemAdded = function (a, b, c) {
        if (b == null) {
            return new DefaultSummaryResult(this.propertyName, 0, this.q(a, null));
        }
        var d = this.q(a, b.value);
        return new DefaultSummaryResult(this.propertyName, 0, d);
    };
    MinSummaryCalculator.prototype.itemRemoved = function (a, b, c) {
        var d = this.dataSource.getItemProperty(a, this.propertyName);
        if (Base.equalsStatic(d, b.value)) {
            this.isSummaryDirty = true;
        }
        return b;
    };
    MinSummaryCalculator.prototype.q = function (a, b) {
        var c = this.dataSource.getItemProperty(a, this.propertyName);
        if (b == null) {
            return c;
        }
        if (c == null) {
            return b;
        }
        switch (this.propertyType) {
            case 0:
                b = stringCompare(c, b) < 0 ? c : b;
                break;
            case 6:
                b = c < b ? c : b;
                break;
            case 5:
                b = c < b ? c : b;
                break;
            case 1:
                b = typeGetValue(c) < typeGetValue(b) ? c : b;
                break;
            case 3:
                b = typeGetValue(c) < typeGetValue(b) ? c : b;
                break;
            case 4:
                b = typeGetValue(c) < typeGetValue(b) ? c : b;
                break;
            case 7:
                b = c < b ? c : b;
                break;
            case 2:
                b = !c ? c : b;
                break;
            case 10:
                b = typeGetValue(c) < typeGetValue(b) ? c : b;
                break;
            case 8:
                var xVal_ = c;
                var yVal_ = b;
                xVal_ = +xVal_;
                yVal_ = +yVal_;
                var d = typeGetValue(xVal_);
                var e = typeGetValue(yVal_);
                b = Base.compareSimple(d, e) < 0 ? c : b;
                break;
        }
        return b;
    };
    MinSummaryCalculator.$t = markType(MinSummaryCalculator, 'MinSummaryCalculator', SummaryCalculator.$);
    return MinSummaryCalculator;
}(SummaryCalculator));
export { MinSummaryCalculator };
/**
 * @hidden
 */
var SummaryDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(SummaryDescription, _super);
    function SummaryDescription(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.h = false;
        _this.k = null;
        _this.f = 0;
        _this.b = null;
        _this.provideCalculator = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.propertyName = c;
                    _this.operand = 4;
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.propertyName = c;
                    _this.operand = d;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(SummaryDescription.prototype, "propertyName", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SummaryDescription.prototype, "operand", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            switch (this.f) {
                case 0:
                    this.calculator = new MinSummaryCalculator();
                    break;
                case 1:
                    this.calculator = new MaxSummaryCalculator();
                    break;
                case 2:
                    this.calculator = new SumSummaryCalculator();
                    break;
                case 3:
                    this.calculator = new AverageSummaryCalculator();
                    break;
                case 4:
                    this.calculator = new CountSummaryCalculator();
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SummaryDescription.prototype, "calculator", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: true,
        configurable: true
    });
    SummaryDescription.prototype.equals = function (a) {
        var b = a;
        if (b == null) {
            return _super.prototype.equals.call(this, a);
        }
        return b.propertyName == this.propertyName && b.operand == this.operand;
    };
    SummaryDescription.prototype.getHashCode = function () {
        return Base.getHashCodeStatic(this.propertyName) * 17 + this.operand;
    };
    SummaryDescription.prototype.m = function () {
        this.h = true;
    };
    SummaryDescription.prototype.e = function () {
        if (this.provideCalculator != null) {
            var a = new ProvideCalculatorEventArgs();
            this.provideCalculator(this, a);
            return a.a;
        }
        return null;
    };
    SummaryDescription.prototype.d = function () {
        switch (this.f) {
            case 0: return new MinSummaryCalculator();
            case 1: return new MaxSummaryCalculator();
            case 2: return new SumSummaryCalculator();
            case 3: return new AverageSummaryCalculator();
            case 4: return new CountSummaryCalculator();
            case 5:
                var a = this.e();
                if (a == null) {
                    throw new ArgumentNullException(2, "Calculator", "No custom calculator was provided.");
                }
                return a;
        }
        return null;
    };
    SummaryDescription.$t = markType(SummaryDescription, 'SummaryDescription');
    return SummaryDescription;
}(Base));
export { SummaryDescription };
/**
 * @hidden
 */
var SummaryDescriptionCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(SummaryDescriptionCollection, _super);
    function SummaryDescriptionCollection() {
        var _this = _super.call(this) || this;
        _this.d = null;
        _this.f = null;
        _this.f = new SyncableObservableCollection$1(SummaryDescription.$);
        return _this;
    }
    SummaryDescriptionCollection.prototype.g = function () {
        return this.f;
    };
    Object.defineProperty(SummaryDescriptionCollection.prototype, "syncTarget", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.d = null;
                return;
            }
            this.d = a;
            this.f.syncTarget = this.d.f;
        },
        enumerable: true,
        configurable: true
    });
    SummaryDescriptionCollection.prototype.add = function (a) {
        return this.f.add(a);
    };
    SummaryDescriptionCollection.prototype.insert = function (a, b) {
        this.f.add1(a, b);
    };
    SummaryDescriptionCollection.prototype.clear = function () {
        this.f.clear();
    };
    SummaryDescriptionCollection.prototype.get = function (a) {
        return this.f.get(a);
    };
    SummaryDescriptionCollection.prototype.indexOf = function (a) {
        return this.f.indexOf(a);
    };
    SummaryDescriptionCollection.prototype.remove = function (a) {
        return this.f.remove1(a);
    };
    SummaryDescriptionCollection.prototype.removeAt = function (a) {
        return this.f.remove(a);
    };
    SummaryDescriptionCollection.prototype.set = function (a, b) {
        return this.f.set(a, b);
    };
    SummaryDescriptionCollection.prototype.size = function () {
        return this.f.size();
    };
    SummaryDescriptionCollection.prototype.n = function (a) {
        this.f.addListener(a);
    };
    SummaryDescriptionCollection.prototype.q = function (a) {
        this.f.removeListener(a);
    };
    Object.defineProperty(SummaryDescriptionCollection.prototype, "onChanged", {
        get: function () {
            return this.f.f;
        },
        set: function (a) {
            this.f.f = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SummaryDescriptionCollection.prototype, "k", {
        get: function () {
            return this.f.all;
        },
        enumerable: true,
        configurable: true
    });
    SummaryDescriptionCollection.$t = markType(SummaryDescriptionCollection, 'SummaryDescriptionCollection');
    return SummaryDescriptionCollection;
}(Base));
export { SummaryDescriptionCollection };
/**
 * @hidden
 */
var ProvideCalculatorEventArgs = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ProvideCalculatorEventArgs, _super);
    function ProvideCalculatorEventArgs() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = null;
        return _this;
    }
    ProvideCalculatorEventArgs.$t = markType(ProvideCalculatorEventArgs, 'ProvideCalculatorEventArgs');
    return ProvideCalculatorEventArgs;
}(Base));
export { ProvideCalculatorEventArgs };
//# sourceMappingURL=IDataSourceDataProvider_combined.js.map
