/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ImageTilesReadyEventArgsDescriptionMetadata } from "./ImageTilesReadyEventArgsDescriptionMetadata";
import { SeriesViewerDescriptionMetadata } from "./SeriesViewerDescriptionMetadata";
import { GeographicMapDescription } from "./GeographicMapDescription";
import { ImagesChangedEventArgsDescriptionMetadata } from "./ImagesChangedEventArgsDescriptionMetadata";
import { CancellingMultiScaleImageEventArgsDescriptionMetadata } from "./CancellingMultiScaleImageEventArgsDescriptionMetadata";
import { DownloadingMultiScaleImageEventArgsDescriptionMetadata } from "./DownloadingMultiScaleImageEventArgsDescriptionMetadata";
/**
 * @hidden
 */
var GeographicMapDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicMapDescriptionMetadata, _super);
    function GeographicMapDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicMapDescriptionMetadata.b = function (a) {
        if (GeographicMapDescriptionMetadata.a == null) {
            GeographicMapDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            GeographicMapDescriptionMetadata.c(a, GeographicMapDescriptionMetadata.a);
            GeographicMapImageryDescriptionMetadata.d(a);
            ImageTilesReadyEventArgsDescriptionMetadata.d(a);
        }
    };
    GeographicMapDescriptionMetadata.c = function (a, b) {
        SeriesViewerDescriptionMetadata.c(a, b);
        b.item("Zoomable", "Boolean");
        b.item("ResizeBehavior", "ExportedType:string:MapResizeBehavior");
        b.item("UseWorldRectForZoomBounds", "Boolean");
        b.item("SuppressZoomResetOnWorldRectChange", "Boolean");
        b.item("WorldRect", "Rect");
        b.item("ActualWorldRect", "Rect");
        b.item("BackgroundContent", "ExportedType:GeographicMapImagery");
        b.item("WindowScale", "Number:double");
        b.item("ActualWindowScale", "Number:double");
        b.item("ImageTilesReadyRef", "EventRef::imageTilesReady");
        GeographicMapDescriptionMetadata.e(a, b);
    };
    GeographicMapDescriptionMetadata.d = function (a) {
        GeographicMapDescriptionMetadata.b(a);
        a.n("GeographicMap", function () { return new GeographicMapDescription(); });
        a.m("GeographicMap", GeographicMapDescriptionMetadata.a);
    };
    GeographicMapDescriptionMetadata.e = function (a, b) {
        b.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamGeogrpahicMap");
        b.item("Width", "(w:Width/DimensionTransform)String");
        b.item("Height", "(w:Height/DimensionTransform)String");
    };
    GeographicMapDescriptionMetadata.$t = markType(GeographicMapDescriptionMetadata, 'GeographicMapDescriptionMetadata');
    GeographicMapDescriptionMetadata.a = null;
    return GeographicMapDescriptionMetadata;
}(Base));
export { GeographicMapDescriptionMetadata };
/**
 * @hidden
 */
var GeographicMapImageryDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicMapImageryDescriptionMetadata, _super);
    function GeographicMapImageryDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicMapImageryDescriptionMetadata.b = function (a) {
        if (GeographicMapImageryDescriptionMetadata.a == null) {
            GeographicMapImageryDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            GeographicMapImageryDescriptionMetadata.c(a, GeographicMapImageryDescriptionMetadata.a);
            GeographicMapDescriptionMetadata.d(a);
            ImageTilesReadyEventArgsDescriptionMetadata.d(a);
            ImagesChangedEventArgsDescriptionMetadata.d(a);
            CancellingMultiScaleImageEventArgsDescriptionMetadata.d(a);
            DownloadingMultiScaleImageEventArgsDescriptionMetadata.d(a);
        }
    };
    GeographicMapImageryDescriptionMetadata.c = function (a, b) {
        b.item("WindowRect", "Rect");
        b.item("GeographicMap", "ExportedType:XamGeographicMap");
        b.item("Referer", "String");
        b.item("UserAgent", "String");
        b.item("Opacity", "Number:double");
        b.item("ImageTilesReadyRef", "EventRef::imageTilesReady");
        b.item("ImagesChangedRef", "EventRef::imagesChanged");
        b.item("CancellingImageRef", "EventRef::cancellingImage");
        b.item("DownloadingImageRef", "EventRef::downloadingImage");
    };
    GeographicMapImageryDescriptionMetadata.d = function (a) {
        GeographicMapImageryDescriptionMetadata.b(a);
        a.m("GeographicMapImagery", GeographicMapImageryDescriptionMetadata.a);
    };
    GeographicMapImageryDescriptionMetadata.$t = markType(GeographicMapImageryDescriptionMetadata, 'GeographicMapImageryDescriptionMetadata');
    GeographicMapImageryDescriptionMetadata.a = null;
    return GeographicMapImageryDescriptionMetadata;
}(Base));
export { GeographicMapImageryDescriptionMetadata };
//# sourceMappingURL=GeographicMapDescriptionMetadata_combined.js.map
