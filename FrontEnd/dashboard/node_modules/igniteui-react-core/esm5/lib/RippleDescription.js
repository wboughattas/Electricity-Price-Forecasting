/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var RippleDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(RippleDescription, _super);
    function RippleDescription() {
        var _this = _super.call(this) || this;
        _this.p = null;
        _this.r = null;
        _this.q = null;
        _this.n = null;
        _this.o = null;
        _this.l = 0;
        _this.g = false;
        _this.f = false;
        _this.h = false;
        return _this;
    }
    RippleDescription.prototype.get_type = function () {
        return "Ripple";
    };
    Object.defineProperty(RippleDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "eventSourceRef", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("EventSourceRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "rippleColor", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("RippleColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "hoverColor", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("HoverColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "actualHoverColor", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("ActualHoverColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "actualRippleColor", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("ActualRippleColor");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "rippleDuration", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("RippleDuration");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "isDisabled", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("IsDisabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "isCentered", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("IsCentered");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RippleDescription.prototype, "isHoverEnabled", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("IsHoverEnabled");
        },
        enumerable: true,
        configurable: true
    });
    RippleDescription.$t = markType(RippleDescription, 'RippleDescription', Description.$);
    return RippleDescription;
}(Description));
export { RippleDescription };
//# sourceMappingURL=RippleDescription.js.map
