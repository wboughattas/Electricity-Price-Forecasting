/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GeographicMapSeriesHostDescription } from "./GeographicMapSeriesHostDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var GeographicShapeSeriesBaseDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicShapeSeriesBaseDescription, _super);
    function GeographicShapeSeriesBaseDescription() {
        var _this = _super.call(this) || this;
        _this.b6 = null;
        _this.b2 = null;
        _this.b4 = 0;
        return _this;
    }
    GeographicShapeSeriesBaseDescription.prototype.get_type = function () {
        return "GeographicShapeSeriesBase";
    };
    Object.defineProperty(GeographicShapeSeriesBaseDescription.prototype, "shapeMemberPath", {
        get: function () {
            return this.b6;
        },
        set: function (a) {
            this.b6 = a;
            this.e("ShapeMemberPath");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicShapeSeriesBaseDescription.prototype, "shapefileDataSource", {
        get: function () {
            return this.b2;
        },
        set: function (a) {
            this.b2 = a;
            this.e("ShapefileDataSource");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeographicShapeSeriesBaseDescription.prototype, "shapeFilterResolution", {
        get: function () {
            return this.b4;
        },
        set: function (a) {
            this.b4 = a;
            this.e("ShapeFilterResolution");
        },
        enumerable: true,
        configurable: true
    });
    GeographicShapeSeriesBaseDescription.$t = markType(GeographicShapeSeriesBaseDescription, 'GeographicShapeSeriesBaseDescription', GeographicMapSeriesHostDescription.$);
    return GeographicShapeSeriesBaseDescription;
}(GeographicMapSeriesHostDescription));
export { GeographicShapeSeriesBaseDescription };
//# sourceMappingURL=GeographicShapeSeriesBaseDescription.js.map
