/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var BaseDataSourceDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(BaseDataSourceDescription, _super);
    function BaseDataSourceDescription() {
        var _this = _super.call(this) || this;
        _this.m = false;
        _this.l = false;
        _this.ah = 0;
        _this.ai = 0;
        _this.aj = 0;
        _this.j = false;
        _this.f = null;
        _this.g = null;
        _this.ap = null;
        _this.n = false;
        _this.p = false;
        _this.k = false;
        _this.r = false;
        _this.q = false;
        _this.o = false;
        _this.t = false;
        _this.s = false;
        _this.u = false;
        _this.ao = null;
        _this.an = null;
        return _this;
    }
    BaseDataSourceDescription.prototype.get_type = function () {
        return "BaseDataSource";
    };
    Object.defineProperty(BaseDataSourceDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "isReadOnly", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.e("IsReadOnly");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "isBatchingEnabled", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("IsBatchingEnabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "actualCount", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.e("ActualCount");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "firstVisibleIndexRequested", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.e("FirstVisibleIndexRequested");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "lastVisibleIndexRequested", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.e("LastVisibleIndexRequested");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "deferAutoRefresh", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("DeferAutoRefresh");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "primaryKey", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("PrimaryKey");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "propertiesRequested", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("PropertiesRequested");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "sectionHeaderDisplayMode", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.e("SectionHeaderDisplayMode");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "isSectionCollapsable", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("IsSectionCollapsable");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "isSectionExpandedDefault", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("IsSectionExpandedDefault");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "includeSummaryRowsInSection", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("IncludeSummaryRowsInSection");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "isSectionSummaryRowsAtBottom", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("IsSectionSummaryRowsAtBottom");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "isSectionHeaderNormalRow", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("IsSectionHeaderNormalRow");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "isSectionContentVisible", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("IsSectionContentVisible");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "shouldEmitSectionHeaders", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("ShouldEmitSectionHeaders");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "shouldEmitSectionFooters", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("ShouldEmitSectionFooters");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "shouldEmitShiftedRows", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.e("ShouldEmitShiftedRows");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "schemaChangedRef", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.e("SchemaChangedRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDataSourceDescription.prototype, "rowExpansionChangedRef", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.e("RowExpansionChangedRef");
        },
        enumerable: true,
        configurable: true
    });
    BaseDataSourceDescription.$t = markType(BaseDataSourceDescription, 'BaseDataSourceDescription', Description.$);
    return BaseDataSourceDescription;
}(Description));
export { BaseDataSourceDescription };
//# sourceMappingURL=BaseDataSourceDescription.js.map
