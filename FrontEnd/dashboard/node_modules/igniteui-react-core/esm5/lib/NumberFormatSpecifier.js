/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { FormatSpecifier } from "./FormatSpecifier";
import { markType } from "./type";
/**
 * @hidden
 */
var NumberFormatSpecifier = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(NumberFormatSpecifier, _super);
    function NumberFormatSpecifier() {
        var _this = _super.call(this) || this;
        _this.l = null;
        _this.h = null;
        _this.i = null;
        _this.j = null;
        _this.k = null;
        _this.m = null;
        _this.n = null;
        _this.o = null;
        _this.p = null;
        _this.q = null;
        _this.r = null;
        _this.s = null;
        _this.b = false;
        _this.f = 0;
        _this.e = 0;
        _this.c = 0;
        _this.g = 0;
        _this.d = 0;
        _this.b = true;
        _this.f = -1;
        _this.e = -1;
        _this.g = -1;
        _this.c = -1;
        _this.d = -1;
        return _this;
    }
    NumberFormatSpecifier.prototype.a = function () {
        var a = {};
        if (this.h != null) {
            this.t(a, "compactDisplay", this.h);
        }
        if (this.i != null) {
            this.t(a, "currency", this.i);
        }
        if (this.j != null) {
            this.t(a, "currencyDisplay", this.j);
        }
        if (this.k != null) {
            this.t(a, "currencySign", this.k);
        }
        if (this.m != null) {
            this.t(a, "localeMatcher", this.m);
        }
        if (this.n != null) {
            this.t(a, "notation", this.n);
        }
        if (this.o != null) {
            this.t(a, "numberingSystem", this.o);
        }
        if (this.p != null) {
            this.t(a, "signDisplay", this.p);
        }
        if (this.q != null) {
            this.t(a, "style", this.q);
        }
        if (this.r != null) {
            this.t(a, "unit", this.r);
        }
        if (this.s != null) {
            this.t(a, "unitDisplay", this.s);
        }
        if (this.b != true) {
            this.t(a, "useGrouping", this.b);
        }
        if (this.f != -1) {
            this.t(a, "minimumIntegerDigits", this.f);
        }
        if (this.e != -1) {
            this.t(a, "minimumFractionDigits", this.e);
        }
        if (this.c != -1) {
            this.t(a, "maximumFractionDigits", this.c);
        }
        if (this.g != -1) {
            this.t(a, "minimumSignificantDigits", this.g);
        }
        if (this.d != -1) {
            this.t(a, "maximumSignificantDigits", this.d);
        }
        var locale_ = this.l;
        var options_ = a;
        return new Intl.NumberFormat(locale_, options_);
    };
    NumberFormatSpecifier.prototype.t = function (options_, propertyName_, value_) {
        options_[propertyName_] = value_;
    };
    NumberFormatSpecifier.$t = markType(NumberFormatSpecifier, 'NumberFormatSpecifier', FormatSpecifier.$);
    return NumberFormatSpecifier;
}(FormatSpecifier));
export { NumberFormatSpecifier };
//# sourceMappingURL=NumberFormatSpecifier.js.map
