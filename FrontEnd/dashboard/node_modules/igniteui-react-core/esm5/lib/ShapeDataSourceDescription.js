/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var ShapeDataSourceDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ShapeDataSourceDescription, _super);
    function ShapeDataSourceDescription() {
        var _this = _super.call(this) || this;
        _this.g = null;
        _this.f = null;
        _this.j = false;
        _this.p = null;
        _this.l = null;
        _this.o = null;
        _this.n = null;
        _this.m = null;
        return _this;
    }
    ShapeDataSourceDescription.prototype.get_type = function () {
        return "ShapeDataSource";
    };
    Object.defineProperty(ShapeDataSourceDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "worldRect", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("WorldRect");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "computedWorldRect", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("ComputedWorldRect");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "deferImportCompleted", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("DeferImportCompleted");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "shapefileSource", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("ShapefileSource");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "databaseSource", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("DatabaseSource");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "importPendingRef", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("ImportPendingRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "importCompletedRef", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("ImportCompletedRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShapeDataSourceDescription.prototype, "filterRef", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.e("FilterRef");
        },
        enumerable: true,
        configurable: true
    });
    ShapeDataSourceDescription.$t = markType(ShapeDataSourceDescription, 'ShapeDataSourceDescription', Description.$);
    return ShapeDataSourceDescription;
}(Description));
export { ShapeDataSourceDescription };
//# sourceMappingURL=ShapeDataSourceDescription.js.map
