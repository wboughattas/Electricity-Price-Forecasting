/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { TreemapNodePointerEventArgsDescription } from "./TreemapNodePointerEventArgsDescription";
/**
 * @hidden
 */
var TreemapNodePointerEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(TreemapNodePointerEventArgsDescriptionMetadata, _super);
    function TreemapNodePointerEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreemapNodePointerEventArgsDescriptionMetadata.b = function (a) {
        if (TreemapNodePointerEventArgsDescriptionMetadata.a == null) {
            TreemapNodePointerEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            TreemapNodePointerEventArgsDescriptionMetadata.c(a, TreemapNodePointerEventArgsDescriptionMetadata.a);
        }
    };
    TreemapNodePointerEventArgsDescriptionMetadata.c = function (a, b) {
        b.item("Value", "Number:double");
        b.item("Sum", "Number:double");
        b.item("CustomValueRef", "(w:CustomValue,wf:CustomValue)DataRef");
        b.item("ItemRef", "(w:Item,wf:Item)DataRef");
        b.item("ParentItemRef", "(w:ParentItem,wf:ParentItem)DataRef");
        b.item("Position", "Point");
        b.item("IsRightButton", "Boolean");
        b.item("IsHandled", "Boolean");
        b.item("IsOverHeader", "Boolean");
        b.item("Label", "String");
        b.item("ParentValue", "Number:double");
        b.item("ParentLabel", "String");
        b.item("ParentSum", "Number:double");
    };
    TreemapNodePointerEventArgsDescriptionMetadata.d = function (a) {
        TreemapNodePointerEventArgsDescriptionMetadata.b(a);
        a.n("TreemapNodePointerEventArgs", function () { return new TreemapNodePointerEventArgsDescription(); });
        a.m("TreemapNodePointerEventArgs", TreemapNodePointerEventArgsDescriptionMetadata.a);
    };
    TreemapNodePointerEventArgsDescriptionMetadata.$t = markType(TreemapNodePointerEventArgsDescriptionMetadata, 'TreemapNodePointerEventArgsDescriptionMetadata');
    TreemapNodePointerEventArgsDescriptionMetadata.a = null;
    return TreemapNodePointerEventArgsDescriptionMetadata;
}(Base));
export { TreemapNodePointerEventArgsDescriptionMetadata };
//# sourceMappingURL=TreemapNodePointerEventArgsDescriptionMetadata.js.map
