/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var CategoryChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CategoryChartDescription, _super);
    function CategoryChartDescription() {
        var _this = _super.call(this) || this;
        _this.ik = null;
        _this.ip = null;
        _this.ii = null;
        _this.ig = null;
        _this.ib = 0;
        _this.il = null;
        _this.ih = null;
        _this.ij = null;
        _this.hn = false;
        _this.im = null;
        _this.io = null;
        _this.hw = 0;
        _this.hx = 0;
        _this.hv = 0;
        _this.hy = 0;
        _this.hz = 0;
        _this.hp = false;
        _this.ic = 0;
        _this.h1 = 0;
        _this.h0 = 0;
        _this.h2 = 0;
        _this.hh = null;
        _this.hi = null;
        _this.ho = false;
        _this.hl = false;
        _this.hm = false;
        return _this;
    }
    Object.defineProperty(CategoryChartDescription.prototype, "tooltipTemplateRef", {
        get: function () {
            return this.ik;
        },
        set: function (a) {
            this.ik = a;
            this.e("TooltipTemplateRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "width", {
        get: function () {
            return this.ip;
        },
        set: function (a) {
            this.ip = a;
            this.e("Width");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "height", {
        get: function () {
            return this.ii;
        },
        set: function (a) {
            this.ii = a;
            this.e("Height");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "background", {
        get: function () {
            return this.ig;
        },
        set: function (a) {
            this.ig = a;
            this.e("Background");
        },
        enumerable: true,
        configurable: true
    });
    CategoryChartDescription.prototype.get_type = function () {
        return "CategoryChart";
    };
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInDuration", {
        get: function () {
            return this.ib;
        },
        set: function (a) {
            this.ib = a;
            this.e("TransitionInDuration");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInEasingFunctionRef", {
        get: function () {
            return this.il;
        },
        set: function (a) {
            this.il = a;
            this.e("TransitionInEasingFunctionRef");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "chartType", {
        get: function () {
            return this.ih;
        },
        set: function (a) {
            this.ih = a;
            this.e("ChartType");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "markerCollisionAvoidance", {
        get: function () {
            return this.ij;
        },
        set: function (a) {
            this.ij = a;
            this.e("MarkerCollisionAvoidance");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isTransitionInEnabled", {
        get: function () {
            return this.hn;
        },
        set: function (a) {
            this.hn = a;
            this.e("IsTransitionInEnabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInMode", {
        get: function () {
            return this.im;
        },
        set: function (a) {
            this.im = a;
            this.e("TransitionInMode");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInSpeedType", {
        get: function () {
            return this.io;
        },
        set: function (a) {
            this.io = a;
            this.e("TransitionInSpeedType");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisInterval", {
        get: function () {
            return this.hw;
        },
        set: function (a) {
            this.hw = a;
            this.e("XAxisInterval");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisMinorInterval", {
        get: function () {
            return this.hx;
        },
        set: function (a) {
            this.hx = a;
            this.e("XAxisMinorInterval");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisGap", {
        get: function () {
            return this.hv;
        },
        set: function (a) {
            this.hv = a;
            this.e("XAxisGap");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisOverlap", {
        get: function () {
            return this.hy;
        },
        set: function (a) {
            this.hy = a;
            this.e("XAxisOverlap");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisInterval", {
        get: function () {
            return this.hz;
        },
        set: function (a) {
            this.hz = a;
            this.e("YAxisInterval");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisIsLogarithmic", {
        get: function () {
            return this.hp;
        },
        set: function (a) {
            this.hp = a;
            this.e("YAxisIsLogarithmic");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisLogarithmBase", {
        get: function () {
            return this.ic;
        },
        set: function (a) {
            this.ic = a;
            this.e("YAxisLogarithmBase");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMinimumValue", {
        get: function () {
            return this.h1;
        },
        set: function (a) {
            this.h1 = a;
            this.e("YAxisMinimumValue");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMaximumValue", {
        get: function () {
            return this.h0;
        },
        set: function (a) {
            this.h0 = a;
            this.e("YAxisMaximumValue");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMinorInterval", {
        get: function () {
            return this.h2;
        },
        set: function (a) {
            this.h2 = a;
            this.e("YAxisMinorInterval");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "negativeBrushes", {
        get: function () {
            return this.hh;
        },
        set: function (a) {
            this.hh = a;
            this.e("NegativeBrushes");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "negativeOutlines", {
        get: function () {
            return this.hi;
        },
        set: function (a) {
            this.hi = a;
            this.e("NegativeOutlines");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisAbbreviateLargeNumbers", {
        get: function () {
            return this.ho;
        },
        set: function (a) {
            this.ho = a;
            this.e("YAxisAbbreviateLargeNumbers");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isCategoryHighlightingEnabled", {
        get: function () {
            return this.hl;
        },
        set: function (a) {
            this.hl = a;
            this.e("IsCategoryHighlightingEnabled");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isItemHighlightingEnabled", {
        get: function () {
            return this.hm;
        },
        set: function (a) {
            this.hm = a;
            this.e("IsItemHighlightingEnabled");
        },
        enumerable: true,
        configurable: true
    });
    CategoryChartDescription.$t = markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
}(XYChartDescription));
export { CategoryChartDescription };
//# sourceMappingURL=CategoryChartDescription.js.map
