/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GeographicMapImageryDescriptionMetadata } from "./GeographicMapImageryDescriptionMetadata";
import { ImageTilesReadyEventArgsDescriptionMetadata } from "./ImageTilesReadyEventArgsDescriptionMetadata";
import { GeographicShapeSeriesBaseDescriptionMetadata } from "./GeographicShapeSeriesBaseDescriptionMetadata";
import { GeographicTileSeriesDescription } from "./GeographicTileSeriesDescription";
/**
 * @hidden
 */
var GeographicTileSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicTileSeriesDescriptionMetadata, _super);
    function GeographicTileSeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicTileSeriesDescriptionMetadata.b = function (a) {
        if (GeographicTileSeriesDescriptionMetadata.a == null) {
            GeographicTileSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            GeographicTileSeriesDescriptionMetadata.c(a, GeographicTileSeriesDescriptionMetadata.a);
            GeographicMapImageryDescriptionMetadata.d(a);
            ImageTilesReadyEventArgsDescriptionMetadata.d(a);
        }
    };
    GeographicTileSeriesDescriptionMetadata.c = function (a, b) {
        GeographicShapeSeriesBaseDescriptionMetadata.c(a, b);
        b.item("TileImagery", "ExportedType:GeographicMapImagery");
        b.item("ImageTilesReadyRef", "EventRef::imageTilesReady");
    };
    GeographicTileSeriesDescriptionMetadata.d = function (a) {
        GeographicTileSeriesDescriptionMetadata.b(a);
        a.n("GeographicTileSeries", function () { return new GeographicTileSeriesDescription(); });
        a.m("GeographicTileSeries", GeographicTileSeriesDescriptionMetadata.a);
    };
    GeographicTileSeriesDescriptionMetadata.$t = markType(GeographicTileSeriesDescriptionMetadata, 'GeographicTileSeriesDescriptionMetadata');
    GeographicTileSeriesDescriptionMetadata.a = null;
    return GeographicTileSeriesDescriptionMetadata;
}(Base));
export { GeographicTileSeriesDescriptionMetadata };
//# sourceMappingURL=GeographicTileSeriesDescriptionMetadata.js.map
