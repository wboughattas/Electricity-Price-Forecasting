/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GeographicMapImageryDescriptionMetadata } from "./GeographicMapImageryDescriptionMetadata";
import { TileGeneratorMapImageryDescription } from "./TileGeneratorMapImageryDescription";
/**
 * @hidden
 */
var TileGeneratorMapImageryDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(TileGeneratorMapImageryDescriptionMetadata, _super);
    function TileGeneratorMapImageryDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TileGeneratorMapImageryDescriptionMetadata.b = function (a) {
        if (TileGeneratorMapImageryDescriptionMetadata.a == null) {
            TileGeneratorMapImageryDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            TileGeneratorMapImageryDescriptionMetadata.c(a, TileGeneratorMapImageryDescriptionMetadata.a);
        }
    };
    TileGeneratorMapImageryDescriptionMetadata.c = function (a, b) {
        GeographicMapImageryDescriptionMetadata.c(a, b);
        b.item("TileGenerator", "ExportedType");
    };
    TileGeneratorMapImageryDescriptionMetadata.d = function (a) {
        TileGeneratorMapImageryDescriptionMetadata.b(a);
        a.n("TileGeneratorMapImagery", function () { return new TileGeneratorMapImageryDescription(); });
        a.m("TileGeneratorMapImagery", TileGeneratorMapImageryDescriptionMetadata.a);
    };
    TileGeneratorMapImageryDescriptionMetadata.$t = markType(TileGeneratorMapImageryDescriptionMetadata, 'TileGeneratorMapImageryDescriptionMetadata');
    TileGeneratorMapImageryDescriptionMetadata.a = null;
    return TileGeneratorMapImageryDescriptionMetadata;
}(Base));
export { TileGeneratorMapImageryDescriptionMetadata };
//# sourceMappingURL=TileGeneratorMapImageryDescriptionMetadata.js.map
