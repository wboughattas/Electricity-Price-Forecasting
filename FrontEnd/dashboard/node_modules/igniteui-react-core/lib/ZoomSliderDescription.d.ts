import { Description } from "./Description";
import { RectDescription } from "./RectDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class ZoomSliderDescription extends Description {
    static $t: Type;
    private bv;
    width: string;
    private a6;
    height: string;
    private a3;
    background: string;
    protected get_type(): string;
    readonly type: string;
    constructor();
    private a1;
    panTransitionDuration: number;
    private x;
    maxZoomWidth: number;
    private z;
    pixelScalingRatio: number;
    private j;
    actualPixelScalingRatio: number;
    private f;
    windowRect: RectDescription;
    private y;
    minZoomWidth: number;
    private ab;
    startInset: number;
    private m;
    endInset: number;
    private ae;
    trackStartInset: number;
    private ad;
    trackEndInset: number;
    private k;
    barExtent: number;
    private bn;
    orientation: string;
    private bk;
    lowerThumbBrush: string;
    private v;
    lowerThumbStrokeThickness: number;
    private q;
    higherThumbStrokeThickness: number;
    private bc;
    higherThumbBrush: string;
    private bl;
    lowerThumbOutline: string;
    private bd;
    higherThumbOutline: string;
    private bm;
    lowerThumbRidgesBrush: string;
    private be;
    higherThumbRidgesBrush: string;
    private w;
    lowerThumbWidth: number;
    private r;
    higherThumbWidth: number;
    private u;
    lowerThumbHeight: number;
    private p;
    higherThumbHeight: number;
    private bi;
    lowerShadeBrush: string;
    private bj;
    lowerShadeOutline: string;
    private t;
    lowerShadeStrokeThickness: number;
    private ba;
    higherShadeBrush: string;
    private bb;
    higherShadeOutline: string;
    private o;
    higherShadeStrokeThickness: number;
    private a4;
    barBrush: string;
    private a5;
    barOutline: string;
    private l;
    barStrokeThickness: number;
    private bo;
    rangeThumbBrush: string;
    private bp;
    rangeThumbOutline: string;
    private aa;
    rangeThumbStrokeThickness: number;
    private bq;
    rangeThumbRidgesBrush: string;
    private bf;
    lowerCalloutBrush: string;
    private bh;
    lowerCalloutTextColor: string;
    private bg;
    lowerCalloutOutline: string;
    private s;
    lowerCalloutStrokeThickness: number;
    private a7;
    higherCalloutBrush: string;
    private a9;
    higherCalloutTextColor: string;
    private a8;
    higherCalloutOutline: string;
    private n;
    higherCalloutStrokeThickness: number;
    private h;
    areThumbCalloutsEnabled: boolean;
    private bs;
    thumbCalloutFontFamily: string;
    private ac;
    thumbCalloutFontSize: number;
    private bt;
    thumbCalloutFontStyle: string;
    private bu;
    thumbCalloutFontWeight: string;
    private br;
    resolvingAxisValueRef: string;
    private bw;
    windowRectChangedRef: string;
}
