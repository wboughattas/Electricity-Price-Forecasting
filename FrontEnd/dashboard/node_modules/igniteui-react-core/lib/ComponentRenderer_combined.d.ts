import { Base, Type } from "./type";
import { IComponentRendererAdapter } from "./IComponentRendererAdapter";
import { TypeDescriptionContext } from "./TypeDescriptionContext";
import { TypeDescriptionPropretyTransforms } from "./TypeDescriptionPropretyTransforms";
import { TypeDescriptionCleanups } from "./TypeDescriptionCleanups";
import { Description } from "./Description";
import { DescriptionTreeNode } from "./DescriptionTreeNode";
import { DescriptionRef } from "./DescriptionRef";
/**
 * @hidden
 */
export declare class ComponentRenderer extends Base {
    static $t: Type;
    d: IComponentRendererAdapter;
    private _context;
    context: TypeDescriptionContext;
    i: TypeDescriptionPropretyTransforms;
    f: TypeDescriptionCleanups;
    private static platform;
    constructor();
    private e;
    toJson(a: (arg1: any) => string): string;
    private ck;
    private cl;
    private s;
    private q;
    private cj;
    private k;
    createObjectFromJson(a: string, b: any): any;
    loadJson(a: string, b: (arg1: string) => any): void;
    loadJsonDelta(a: string, b: (arg1: string) => any, c: boolean): void;
    private b1;
    private a;
    private bc;
    private aj;
    private ak;
    private al;
    private ai;
    private ah;
    private ao;
    private am;
    private ag;
    private an;
    private ap;
    private ar;
    cleanup(a: any, b: boolean): void;
    render(a: Description, b: any): void;
    private cg;
    private b2;
    private ce;
    provideRefValue(a: any, b: string, c: any): void;
    removeRefValue(a: any, b: string): void;
    private cc;
    clearRefValues(a: any): void;
    private cf;
    private ci;
    private co;
    private by;
    private b3;
    private b4;
    private t;
    private z;
    private af;
    private ad;
    private bf;
    private bb;
    private ba;
    private a9;
    private a8;
    private a7;
    private a6;
    private a5;
    b(a: string, b: ContainerState): DescriptionRef;
    private bl;
    private a4;
    private bk;
    private a2;
    private bj;
    private bn;
    private a1;
    private a0;
    private az;
    private bm;
    private ay;
    private ax;
    private aq;
    addPropertyUpdatingListener(a: string, b: (propertyName: string, target: any, newValue: any) => void): void;
    private as;
    addReferenceLookupListener(a: (container: any, refType: string, id: string) => any): void;
    removePropertyUpdatingListener(a: string, b: (propertyName: string, target: any, newValue: any) => void): void;
    private at;
    addNamespaceLookupListener(a: (container: any) => string): void;
    removeNamespaceLookupListener(a: (container: any) => string): void;
    private aw;
    private cm;
    hasUserRef(a: string): boolean;
    private _shouldNamespaceSystemRefValues;
    shouldNamespaceSystemRefValues: boolean;
    b6(a: any, b: string, c: any, d: boolean): void;
    removeRefValueCore(a: any, b: string, c: boolean): void;
    clearUserRefValues(): void;
    o(a: DescriptionRef): boolean;
    bh(a: DescriptionRef): any;
    n(a: string): boolean;
    c(a: string): DescriptionRef;
    private bi;
    private y;
    private ac;
    private x;
    private ch;
    private ab;
    bx(a: any, b: any, c: ContainerState): void;
    private av;
    private w;
    private b7;
    private aa;
    private v;
    private j;
    private bp;
    private bd;
    private r;
    private a3;
    private au;
    private u;
    private bu;
    private cn;
    private bg;
    private m;
    private l;
}
/**
 * @hidden
 */
export declare class ContainerState extends Base {
    static $t: Type;
    i: any;
    private e;
    private f;
    private d;
    private g;
    private c;
    k(a: any, b: number, c: any, d: DescriptionTreeNode, e: (arg1: any, arg2: string, arg3: any, arg4: boolean) => void, f: number): void;
    a(a: number): boolean;
    b(a: any): boolean;
    j(a: number): any;
    l(a: ComponentRenderer, b: any, c: number, d: (arg1: any, arg2: string, arg3: boolean) => void): void;
    h(a: any): number;
}
