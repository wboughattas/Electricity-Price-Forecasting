import { Description } from "./Description";
import { LinearGraphRangeDescription } from "./LinearGraphRangeDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class BulletGraphDescription extends Description {
    static $t: Type;
    private cj;
    fontFamily: string;
    private x;
    fontSize: number;
    private cl;
    fontWeight: string;
    private ck;
    fontStyle: string;
    private c0;
    width: string;
    private cn;
    height: string;
    private ce;
    background: string;
    protected get_type(): string;
    readonly type: string;
    constructor();
    private az;
    transitionProgress: number;
    private cq;
    orientation: string;
    private cr;
    scaleBackgroundBrush: string;
    private cs;
    scaleBackgroundOutline: string;
    private am;
    scaleBackgroundThickness: number;
    private i;
    ranges: LinearGraphRangeDescription[];
    private g;
    rangeBrushes: string[];
    private h;
    rangeOutlines: string[];
    private ae;
    minimumValue: number;
    private s;
    actualMinimumValue: number;
    private ad;
    maximumValue: number;
    private r;
    actualMaximumValue: number;
    private ap;
    targetValue: number;
    private cu;
    targetValueName: string;
    private a0;
    value: number;
    private cy;
    valueName: string;
    private ak;
    rangeInnerExtent: number;
    private al;
    rangeOuterExtent: number;
    private a1;
    valueInnerExtent: number;
    private a2;
    valueOuterExtent: number;
    private y;
    interval: number;
    private av;
    ticksPostInitial: number;
    private aw;
    ticksPreTerminal: number;
    private aa;
    labelInterval: number;
    private z;
    labelExtent: number;
    private ab;
    labelsPostInitial: number;
    private ac;
    labelsPreTerminal: number;
    private af;
    minorTickCount: number;
    private ax;
    tickStartExtent: number;
    private au;
    tickEndExtent: number;
    private ay;
    tickStrokeThickness: number;
    private cw;
    tickBrush: string;
    private ci;
    fontBrush: string;
    private cx;
    valueBrush: string;
    private cz;
    valueOutline: string;
    private a3;
    valueStrokeThickness: number;
    private ah;
    minorTickStartExtent: number;
    private ag;
    minorTickEndExtent: number;
    private ai;
    minorTickStrokeThickness: number;
    private cp;
    minorTickBrush: string;
    private n;
    isScaleInverted: boolean;
    private cf;
    backingBrush: string;
    private cg;
    backingOutline: string;
    private w;
    backingStrokeThickness: number;
    private u;
    backingInnerExtent: number;
    private v;
    backingOuterExtent: number;
    private ao;
    scaleStartExtent: number;
    private an;
    scaleEndExtent: number;
    private ct;
    targetValueBrush: string;
    private aq;
    targetValueBreadth: number;
    private ar;
    targetValueInnerExtent: number;
    private as;
    targetValueOuterExtent: number;
    private cv;
    targetValueOutline: string;
    private at;
    targetValueStrokeThickness: number;
    private co;
    labelFormat: string;
    private f;
    labelFormatSpecifiers: FormatSpecifierDescription[];
    private b8;
    transitionDuration: number;
    private b7;
    showToolTipTimeout: number;
    private o;
    showToolTip: boolean;
    private ch;
    font: string;
    private aj;
    pixelScalingRatio: number;
    private t;
    actualPixelScalingRatio: number;
    private cm;
    formatLabelRef: string;
    private cd;
    alignLabelRef: string;
    private cc;
    actualMinimumValueChangeRef: string;
    private cb;
    actualMaximumValueChangeRef: string;
}
