import { Base, Type } from "./type";
import { IExecutionContext } from "./IExecutionContext";
import { ITickProvider } from "./ITickProvider";
import { KeyFrameAnimationPlayState } from "./KeyFrameAnimationPlayState";
import { Task } from "./Task";
import { AnimationKeyFrameEffectTargetType } from "./AnimationKeyFrameEffectTargetType";
import { IDependentRenderer } from "./IDependentRenderer";
import { AnimationKeyFrame } from "./AnimationKeyFrame";
import { UIElementPropertyId } from "./UIElementPropertyId";
import { UIElementPropertyAccessor } from "./UIElementPropertyAccessor";
import { AnimationKeyFrameEffectTiming } from "./AnimationKeyFrameEffectTiming";
import { AnimationKeyFrameProperty } from "./AnimationKeyFrameProperty";
/**
 * @hidden
 */
export declare class KeyFrameAnimationTimeline extends Base {
    static $t: Type;
    private c;
    private a;
    private h;
    private g;
    private f;
    private e;
    private k;
    private d;
    private i;
    readonly b: IExecutionContext;
    readonly j: number;
    constructor(a: ITickProvider, b: IExecutionContext);
    m(a: IKeyFrameAnimation): void;
    o(a: IKeyFrameAnimation): void;
    private p;
    private l;
    private n;
    private q;
}
/**
 * @hidden
 */
export interface IKeyFrameAnimation {
    currentTime: number;
    effect: AnimationKeyFrameEffect;
    readonly finished: Task;
    readonly ready: Task;
    id: string;
    readonly playState: KeyFrameAnimationPlayState;
    playbackRate: number;
    startTime: number;
    commitStyles(): void;
    onFinished: () => void;
    onCanceled: () => void;
    cancel(): void;
    finish(): void;
    pause(): void;
    play(): void;
    reverse(): void;
    updatePlaybackRate(a: number): void;
}
/**
 * @hidden
 */
export declare let IKeyFrameAnimation_$type: Type;
/**
 * @hidden
 */
export declare class KeyFrameAnimationDirect extends Base implements IKeyFrameAnimation {
    static $t: Type;
    private a;
    effect: AnimationKeyFrameEffect;
    private m;
    private d;
    readonly l: boolean;
    currentTime: number;
    private p;
    private i;
    private as;
    private x;
    private aa;
    private ad;
    private ah;
    private al;
    private an;
    private k;
    private ar;
    readonly finished: Task;
    readonly ready: Task;
    private u;
    id: string;
    private readonly r;
    readonly playState: KeyFrameAnimationPlayState;
    private n;
    private g;
    private o;
    readonly s: number;
    playbackRate: number;
    private q;
    private j;
    startTime: number;
    private b;
    readonly c: KeyFrameAnimationTimeline;
    onFinished: () => void;
    onCanceled: () => void;
    private static t;
    constructor(a: AnimationKeyFrameEffect, b: KeyFrameAnimationTimeline);
    cancel(): void;
    private ai;
    private aj;
    private ag;
    private ak;
    finish(): void;
    pause(): void;
    private ae;
    private y;
    private ao;
    play(): void;
    private h;
    private f;
    private e;
    private w;
    private v;
    private af;
    private am;
    private ab;
    private ac;
    private ap;
    reverse(): void;
    updatePlaybackRate(a: number): void;
    private z;
    commitStyles(): void;
    aq(): void;
}
/**
 * @hidden
 */
export declare class AnimationKeyFrameEffect extends Base {
    static $t: Type;
    r: KeyFrameAnimationDirect;
    private readonly an;
    readonly as: number;
    private a8;
    private a0;
    constructor(a: number, b: any, c: AnimationKeyFrameEffectTargetType, d: IDependentRenderer, e: AnimationKeyFrameEffectTiming);
    constructor(a: number, b: any, c: AnimationKeyFrameEffectTargetType, d: IDependentRenderer, e: AnimationKeyFrameEffectTiming, f: AnimationKeyFrame[]);
    constructor(a: number, ..._rest: any[]);
    protected readonly k: number[];
    private e;
    l(a: AnimationKeyFrame): AnimationKeyFrameEffect;
    m(...a: AnimationKeyFrameProperty[]): AnimationKeyFrameEffect;
    n(a: number, ...b: AnimationKeyFrameProperty[]): AnimationKeyFrameEffect;
    private readonly au;
    private readonly ac;
    private readonly ap;
    private readonly am;
    private readonly w;
    private readonly s;
    private readonly ao;
    private readonly y;
    private readonly ad;
    private readonly av;
    private readonly ae;
    private readonly aw;
    private readonly z;
    private readonly aq;
    private readonly aa;
    private readonly ar;
    private x;
    private readonly af;
    private readonly ay;
    private readonly at;
    private readonly ab;
    private ax;
    a7(): void;
    private a5;
    private a1;
    private a3;
    private a9;
    private a2;
    a4: any;
    o: AnimationKeyFrameEffectTargetType;
    q: IDependentRenderer;
    private ag;
    private c;
    private al;
    private ah;
    private az;
    private t;
    private ai;
    private aj;
    private v;
    private ak;
    private u;
    private d;
    private a;
    private b;
    readonly h: AnimationKeyFrame[];
    readonly f: UIElementPropertyId[];
    readonly g: UIElementPropertyAccessor[];
    private j;
    private i;
    a6(): void;
    p: AnimationKeyFrameEffectTiming;
}
