import { Base, INotifyPropertyChanged, PropertyChangedEventArgs, ICollection$1, Type } from "./type";
import { StockPriceHistory } from "./StockPriceHistory";
import { StockPosition } from "./StockPosition";
import { StockDetails } from "./StockDetails";
import { StockChangedEventArgs } from "./StockChangedEventArgs";
import { Dictionary$2 } from "./Dictionary$2";
import { List$1 } from "./List$1";
/**
 * @hidden
 */
export declare class FinancialDataAdapter extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private e;
    stockSymbols: string[];
    private c;
    stockPrices: StockPriceHistory[];
    private d;
    readonly stockPricesMemberPaths: string[];
    private b;
    stockPositions: StockPosition[];
    private a;
    stockDetails: StockDetails[];
    private aa;
    ac: number;
    private z;
    ab: number;
    private r;
    u: boolean;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected ap(a: string, b: any, c: any): void;
    protected aq(a: string, b: any, c: any): void;
    populateStockPosition: (stockSymbol: string) => StockPosition;
    populateStockPrices: (stockSymbol: string) => StockPriceHistory;
    stockSymbolsChanged: (sender: any, args: StockChangedEventArgs) => void;
    au(a: string[], b: string[]): void;
    constructor();
    log(message_: string): void;
    clearData(): void;
    removeStockPosition(a: number): void;
    removeStockPrices(a: string): void;
    ax(a: string, b?: string): void;
    a0(a: string): void;
    private ad;
    v: Dictionary$2<string, StockPriceHistory>;
    x: List$1<StockPosition>;
    private w;
    private o;
    protected q(a: string): StockPriceHistory;
    protected p(a: string): StockPosition;
    protected an(a: string, b: StockPosition): void;
    protected ao(a: string, b: StockPriceHistory): void;
    protected as(a: string, b: number): void;
    protected ar(a: number): void;
    protected at(): void;
    protected a1(a: string[], b: string[], c?: boolean): void;
    protected ay(a: string[], b: string[]): void;
    protected az(): void;
    s(a: string[], b: string): boolean;
    f<T>($t: Type, a: ICollection$1<T>): T[];
    y<T>($t: Type, a: T[]): List$1<T>;
    t(a: any[], b: any[]): boolean;
}
