import { Base, PropertyChangedEventArgs, Type } from "./type";
import { IDataSource } from "./IDataSource";
import { IEditableDataSource } from "./IEditableDataSource";
import { TransactionService } from "./TransactionService";
import { IExternalDataSource } from "./IExternalDataSource";
import { IDataSourceDataProvider } from "./IDataSourceDataProvider";
import { IDataSourceSchema } from "./IDataSourceSchema";
import { IDataSourceUpdateNotifier } from "./IDataSourceUpdateNotifier";
import { IDataSourceDataProviderUpdateNotifier } from "./IDataSourceDataProviderUpdateNotifier";
import { IDataSourceExecutionContext } from "./IDataSourceExecutionContext";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { FilterExpressionCollection } from "./FilterExpressionCollection";
import { SummaryDescriptionCollection } from "./SummaryDescriptionCollection";
import { DataSourceSummaryScope } from "./DataSourceSummaryScope";
import { DataSourceSectionHeaderDisplayMode } from "./DataSourceSectionHeaderDisplayMode";
import { NotifyCollectionChangedEventArgs } from "./NotifyCollectionChangedEventArgs";
import { TransactionEvent } from "./TransactionEvent";
import { DataSourceSpecialRow } from "./DataSourceSpecialRow";
import { DataSourceAggregatedResult } from "./DataSourceAggregatedResult";
import { DataSourceDataCommittedEventArgs } from "./DataSourceDataCommittedEventArgs";
import { DataSourceRowExpansionChangedEventArgs } from "./DataSourceRowExpansionChangedEventArgs";
import { DataSourceSchemaChangedEventArgs } from "./DataSourceSchemaChangedEventArgs";
import { DataSourceRowType } from "./DataSourceRowType";
import { DataSourceSchemaPropertyType } from "./DataSourceSchemaPropertyType";
import { ISummaryResult } from "./ISummaryResult";
/**
 * @hidden
 */
export declare abstract class BaseDataSource extends Base implements IDataSource, IEditableDataSource {
    static $t: Type;
    constructor();
    protected t: TransactionService;
    private ck;
    protected cj(a: TransactionEvent, b: any): void;
    protected ao(): boolean;
    private bu;
    private clone1;
    private _isReadOnly;
    isReadOnly: boolean;
    private y;
    protected get_isBatchingEnabled(): boolean;
    protected set_isBatchingEnabled(a: boolean): void;
    isBatchingEnabled: boolean;
    readonly canUndo: boolean;
    readonly canRedo: boolean;
    readonly canCommit: boolean;
    updatePropertyAtKey(a: any[], b: string, c: any, d?: boolean): number;
    removeItemByKey(a: any[]): void;
    removeItem(a: any): void;
    addItem(a: any): void;
    acceptPendingTransaction(a: number): void;
    rejectPendingTransaction(a: number): void;
    commitEdits(a: boolean): number;
    cancelEdits(): void;
    acceptPendingCommit(a: number): void;
    rejectPendingCommit(a: number): void;
    undo(): void;
    redo(): void;
    hasEdit(a: any[], b: string): boolean;
    hasDelete(a: any[]): boolean;
    hasAdd(a: any): boolean;
    getAggregatedChanges(a: number): DataSourceAggregatedResult[];
    isPendingTransaction(a: number): boolean;
    isPendingCommit(a: number): boolean;
    setTransactionError(a: number, b: string): void;
    getTransactionErrorByKey(a: any[], b: string): string;
    getTransactionErrorByID(a: number): string;
    getTransactionID(a: any[], b: string): number;
    private e;
    dataCommitted: (sender: any, e: DataSourceDataCommittedEventArgs) => void;
    protected bv(a: number, b: DataSourceAggregatedResult[]): void;
    private co;
    private bs;
    private cp;
    private bq;
    protected onSortDescriptionsChanged(a: NotifyCollectionChangedEventArgs): void;
    protected onGroupDescriptionsChanged(a: NotifyCollectionChangedEventArgs): void;
    protected onSummaryDescriptionsChanged(a: NotifyCollectionChangedEventArgs): void;
    protected an: boolean;
    protected onFilterExpressionsChanged(a: NotifyCollectionChangedEventArgs): void;
    onRowExpansionChanged(a: number, b: boolean, c: boolean): void;
    isPlaceholderItem(a: number): boolean;
    aw: any;
    private _externalDataSource;
    externalDataSource: IExternalDataSource;
    private r;
    private q;
    private h;
    private s;
    private i;
    protected abstract readonly actualBaseDataProvider: IDataSourceDataProvider;
    private n;
    actualSchema: IDataSourceSchema;
    private ar;
    actualCount: number;
    private as;
    firstVisibleIndexRequested: number;
    private at;
    lastVisibleIndexRequested: number;
    private o;
    updateNotifier: IDataSourceUpdateNotifier;
    getItemAtIndex(a: number): any;
    getItemFromKey(a: any[]): any;
    getItemProperty(a: any, b: string): any;
    getSpecialRowItemValue(a: DataSourceSpecialRow, b: string): any;
    protected ay(a: any, b: string): any;
    protected al(a: any, b: string): boolean;
    getItemPropertyAtIndex(a: number, b: string): any;
    protected get_fullSectionInformationWillForceLoad(): boolean;
    readonly fullSectionInformationWillForceLoad: boolean;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected onPropertyUpdated(a: string, b: any, c: any): void;
    protected propertyUpdatedOverride(a: string, b: any, c: any): void;
    protected onActualPrimaryKeyChanged(a: string[], b: string[]): void;
    protected onActualPrimaryKeyChangedOverrride(a: string[], b: string[]): void;
    protected get_isVirtual(): boolean;
    readonly isVirtual: boolean;
    private k;
    protected readonly dataProviderUpdateNotifier: IDataSourceDataProviderUpdateNotifier;
    protected onActualDataProviderChanged(a: any, b: any): void;
    protected onRequestedVisibleRangeChanged(): void;
    private m;
    executionContext: IDataSourceExecutionContext;
    schemaChanged: (sender: any, args: DataSourceSchemaChangedEventArgs) => void;
    rowExpansionChanged: (sender: any, args: DataSourceRowExpansionChangedEventArgs) => void;
    protected canInitialize(): boolean;
    private z;
    protected readonly isInitializing: boolean;
    protected get_isSortingSupported(): boolean;
    readonly isSortingSupported: boolean;
    protected get_isFilteringSupported(): boolean;
    readonly isFilteringSupported: boolean;
    readonly sortDescriptions: SortDescriptionCollection;
    readonly groupDescriptions: SortDescriptionCollection;
    readonly filterExpressions: FilterExpressionCollection;
    readonly summaryDescriptions: SummaryDescriptionCollection;
    private g;
    summaryScope: DataSourceSummaryScope;
    private w;
    deferAutoRefresh: boolean;
    private b;
    primaryKey: string[];
    private a;
    actualPrimaryKey: string[];
    private c;
    propertiesRequested: string[];
    private af;
    notifyUsingSourceIndexes: boolean;
    protected get_isItemIndexLookupSupported(): boolean;
    readonly isItemIndexLookupSupported: boolean;
    protected get_isKeyIndexLookupSupported(): boolean;
    readonly isKeyIndexLookupSupported: boolean;
    protected initializeOverride(): void;
    private ag;
    protected resolveFullCount(a: number): number;
    private bm;
    private bw;
    onSetItem(a: number, b: any, c: any): void;
    onBroadcastSetItem(a: number, b: any, c: any): void;
    onSetItemOverride(a: number, b: any, c: any): void;
    onClearItems(): void;
    onBroadcastClearItems(): void;
    onClearItemsOverride(): void;
    onInsertItem(a: number, b: any): void;
    onBroadcastInsertItem(a: number, b: any): void;
    onInsertItemOverride(a: number, b: any): void;
    onRemoveItem(a: number, b: any): void;
    onBroadcastRemoveItem(a: number, b: any): void;
    onRemoveItemOverride(a: number, b: any): void;
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
    u: boolean;
    queueAutoRefresh(): void;
    bo(): void;
    cm(): void;
    protected refreshInternalOverride(): void;
    flushAutoRefresh(): void;
    refresh(): void;
    indexOfItem(a: any): number;
    indexOfKey(a: any[]): number;
    protected getPrimaryKeyValue(a: any, b: any[]): void;
    getRowType(a: number): DataSourceRowType;
    getMainValuePath(a: DataSourceRowType): string;
    getStickyRows(): number[];
    getStickyRowsInRange(a: number, b: number): number[];
    isRowSpanning(a: DataSourceRowType): boolean;
    getStickyRowPriority(a: number): number;
    isExclusivelySticky(a: number): boolean;
    pinRow(a: any[]): void;
    unpinRow(a: any[]): void;
    clearPinnedRows(): void;
    isRowPinned(a: number): boolean;
    protected get_isGroupingSupported(): boolean;
    readonly isGroupingSupported: boolean;
    private f;
    protected get_sectionHeaderDisplayMode(): DataSourceSectionHeaderDisplayMode;
    protected set_sectionHeaderDisplayMode(a: DataSourceSectionHeaderDisplayMode): void;
    sectionHeaderDisplayMode: DataSourceSectionHeaderDisplayMode;
    private aa;
    protected get_isSectionCollapsable(): boolean;
    protected set_isSectionCollapsable(a: boolean): void;
    isSectionCollapsable: boolean;
    private ac;
    protected get_isSectionExpandedDefault(): boolean;
    protected set_isSectionExpandedDefault(a: boolean): void;
    isSectionExpandedDefault: boolean;
    private x;
    protected get_includeSummaryRowsInSection(): boolean;
    protected set_includeSummaryRowsInSection(a: boolean): void;
    includeSummaryRowsInSection: boolean;
    private ae;
    protected get_isSectionSummaryRowsAtBottom(): boolean;
    protected set_isSectionSummaryRowsAtBottom(a: boolean): void;
    isSectionSummaryRowsAtBottom: boolean;
    private ad;
    protected get_isSectionHeaderNormalRow(): boolean;
    protected set_isSectionHeaderNormalRow(a: boolean): void;
    isSectionHeaderNormalRow: boolean;
    private ab;
    protected get_isSectionContentVisible(): boolean;
    protected set_isSectionContentVisible(a: boolean): void;
    isSectionContentVisible: boolean;
    private ai;
    shouldEmitSectionHeaders: boolean;
    private ah;
    shouldEmitSectionFooters: boolean;
    private aj;
    shouldEmitShiftedRows: boolean;
    private v;
    protected d: boolean[];
    protected ensureComparables(a: IDataSourceSchema): void;
    resolveSchemaPropertyType(a: string): DataSourceSchemaPropertyType;
    setIsRowExpandedAtIndex(a: number, b: boolean): void;
    getIsRowExpandedAtIndex(a: number): boolean;
    getRowLevel(a: number): number;
    getRootSummaryRowCount(): number;
    getRootSummaryResults(): ISummaryResult[];
    getSectionSummaryResults(a: number): ISummaryResult[][];
    clone(): IDataSource;
    cloneProperties(a: IDataSource): void;
}
/**
 * @hidden
 */
export declare class DefaultDataSourceDataProviderUpdateNotifier extends Base implements IDataSourceDataProviderUpdateNotifier {
    static $t: Type;
    private a;
    constructor(a: BaseDataSource);
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
}
