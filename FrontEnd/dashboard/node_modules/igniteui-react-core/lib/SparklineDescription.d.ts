import { Description } from "./Description";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class SparklineDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    readonly type: string;
    constructor();
    private aq;
    brush: string;
    private ba;
    negativeBrush: string;
    private a8;
    markerBrush: string;
    private bb;
    negativeMarkerBrush: string;
    private at;
    firstMarkerBrush: string;
    private a4;
    lastMarkerBrush: string;
    private ax;
    highMarkerBrush: string;
    private a6;
    lowMarkerBrush: string;
    private bf;
    trendLineBrush: string;
    private az;
    horizontalAxisBrush: string;
    private bj;
    verticalAxisBrush: string;
    private bd;
    normalRangeFill: string;
    private a1;
    horizontalAxisVisibility: string;
    private bl;
    verticalAxisVisibility: string;
    private a9;
    markerVisibility: string;
    private bc;
    negativeMarkerVisibility: string;
    private au;
    firstMarkerVisibility: string;
    private a5;
    lastMarkerVisibility: string;
    private a7;
    lowMarkerVisibility: string;
    private ay;
    highMarkerVisibility: string;
    private be;
    normalRangeVisibility: string;
    private j;
    displayNormalRangeInFront: boolean;
    private r;
    markerSize: number;
    private m;
    firstMarkerSize: number;
    private o;
    lastMarkerSize: number;
    private n;
    highMarkerSize: number;
    private q;
    lowMarkerSize: number;
    private u;
    negativeMarkerSize: number;
    private p;
    lineThickness: number;
    private t;
    minimum: number;
    private s;
    maximum: number;
    private ar;
    dataSourceRef: string;
    private bi;
    valueMemberPath: string;
    private a3;
    labelMemberPath: string;
    private bg;
    trendLineType: string;
    private an;
    trendLinePeriod: number;
    private y;
    trendLineThickness: number;
    private w;
    normalRangeMinimum: number;
    private v;
    normalRangeMaximum: number;
    private as;
    displayType: string;
    private bh;
    unknownValuePlotting: string;
    private bk;
    verticalAxisLabelRef: string;
    private a0;
    horizontalAxisLabelRef: string;
    private av;
    formatLabelRef: string;
    private a2;
    horizontalLabelFormat: string;
    private f;
    horizontalLabelFormatSpecifiers: FormatSpecifierDescription[];
    private bm;
    verticalLabelFormat: string;
    private g;
    verticalLabelFormatSpecifiers: FormatSpecifierDescription[];
    private x;
    pixelScalingRatio: number;
    private l;
    actualPixelScalingRatio: number;
    private bn;
    width: string;
    private aw;
    height: string;
    private ap;
    background: string;
}
