import { BaseDataSource } from "./BaseDataSource";
import { IPageCandidatesSink } from "./IPageCandidatesSink";
import { PagePredictionEngine } from "./PagePredictionEngine";
import { IDataSourceDataProvider } from "./IDataSourceDataProvider";
import { IDataSourceVirtualDataProvider } from "./IDataSourceVirtualDataProvider";
import { IExternalVirtualDataSource } from "./IExternalVirtualDataSource";
import { Type } from "./type";
import { ISummaryResult } from "./ISummaryResult";
import { DataSourceRowType } from "./DataSourceRowType";
import { DataSourcePageRequestPriority } from "./DataSourcePageRequestPriority";
import { IDataSource } from "./IDataSource";
import { TransactionEvent } from "./TransactionEvent";
import { DataSourceBatchStartedEventArgs } from "./DataSourceBatchStartedEventArgs";
import { DataSourceBatchCompletedEventArgs } from "./DataSourceBatchCompletedEventArgs";
/**
 * @hidden
 */
export declare class VirtualDataSource extends BaseDataSource implements IPageCandidatesSink {
    static $t: Type;
    constructor();
    private cu;
    private dd;
    private d0;
    protected get_isSectionCollapsable(): boolean;
    protected set_isSectionCollapsable(a: boolean): void;
    protected get_isSectionExpandedDefault(): boolean;
    protected set_isSectionExpandedDefault(a: boolean): void;
    protected c7: PagePredictionEngine;
    protected get_actualBaseDataProvider(): IDataSourceDataProvider;
    protected readonly actualBaseDataProvider: IDataSourceDataProvider;
    private cy;
    dataProvider: IDataSourceVirtualDataProvider;
    private cx;
    actualDataProvider: IDataSourceVirtualDataProvider;
    private dz;
    pageSizeRequested: number;
    protected resetCache(): void;
    protected resetCacheOverride(): void;
    private dy;
    maxCachedPages: number;
    protected actualPageSizePopulated: boolean;
    private dj;
    actualPageSize: number;
    private db;
    protected get_isSortingSupported(): boolean;
    protected get_isFilteringSupported(): boolean;
    protected get_isGroupingSupported(): boolean;
    private c2;
    c3: IExternalVirtualDataSource;
    protected resolveDataProvider(): IDataSourceVirtualDataProvider;
    protected propertyUpdatedOverride(a: string, b: any, c: any): void;
    private d3;
    private ek;
    private eq;
    protected resolveFullCount(a: number): number;
    private ep;
    private cs;
    private ei;
    private ct;
    private eh;
    private eo;
    private d2;
    private em;
    protected get_isVirtual(): boolean;
    private da;
    private dh;
    private di;
    private dc;
    private cq;
    private cv;
    isPlaceholderItem(a: number): boolean;
    getItemAtIndex(a: number): any;
    private d7;
    private cw;
    private c9;
    private c8;
    getItemPropertyAtIndex(a: number, b: string): any;
    private d8;
    private en;
    private el;
    addCandidate(a: number, b: DataSourcePageRequestPriority): boolean;
    removeCandidate(a: number): void;
    transformPage(a: number): number[];
    getUnrealizedCount(): number;
    onSetItemOverride(a: number, b: any, c: any): void;
    protected refreshInternalOverride(): void;
    private er;
    onClearItemsOverride(): void;
    onInsertItemOverride(a: number, b: any): void;
    onRemoveItemOverride(a: number, b: any): void;
    protected get_isItemIndexLookupSupported(): boolean;
    protected get_isKeyIndexLookupSupported(): boolean;
    indexOfItem(a: any): number;
    private df;
    indexOfKey(a: any[]): number;
    private c6;
    getStickyRowPriority(a: number): number;
    unpinRow(a: any[]): void;
    pinRow(a: any[]): void;
    isRowPinned(a: number): boolean;
    private cr;
    private ds;
    private dk;
    private du;
    private dm;
    private dv;
    private dn;
    private dt;
    private dl;
    private dx;
    private dw;
    private dq;
    private dp;
    private dr;
    getStickyRowsInRange(a: number, b: number): number[];
    isExclusivelySticky(a: number): boolean;
    getRowType(a: number): DataSourceRowType;
    private dg;
    getIsRowExpandedAtIndex(a: number): boolean;
    setIsRowExpandedAtIndex(a: number, b: boolean): void;
    getRowLevel(a: number): number;
    getRootSummaryRowCount(): number;
    private eb;
    private ec;
    getRootSummaryResults(): ISummaryResult[];
    getSectionSummaryResults(a: number): ISummaryResult[][];
    clone(): IDataSource;
    cloneProperties(a: IDataSource): void;
    private _concurrencyTag;
    concurrencyTag: string;
    protected get_isBatchingEnabled(): boolean;
    protected set_isBatchingEnabled(a: boolean): void;
    updatePropertyAtKey(a: any[], b: string, c: any, d?: boolean): number;
    removeItemByKey(a: any[]): void;
    protected cj(a: TransactionEvent, b: any): void;
    private ej;
    batchStarted: (sender: any, e: DataSourceBatchStartedEventArgs) => void;
    batchCompleted: (sender: any, e: DataSourceBatchCompletedEventArgs) => void;
}
