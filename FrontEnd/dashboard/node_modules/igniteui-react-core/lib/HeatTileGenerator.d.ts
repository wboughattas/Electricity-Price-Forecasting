import { Base, Type } from "./type";
import { ITileGenerator } from "./ITileGenerator";
import { Color } from "./Color";
import { TileImageCreatedEventArgs } from "./TileImageCreatedEventArgs";
import { TileImageZoomChangingEventArgs } from "./TileImageZoomChangingEventArgs";
/**
 * @hidden
 */
export declare class HeatTileGenerator extends Base implements ITileGenerator {
    static $t: Type;
    private m;
    private bz;
    private l;
    constructor();
    private e;
    k: number[];
    private d;
    j: number[];
    private c;
    i: number[];
    private bw;
    by: Color;
    private bv;
    bx: Color;
    private b;
    scaleColors: Color[];
    private a;
    g: number[];
    private ac;
    ap: number;
    private am;
    ar: number;
    private p;
    u: boolean;
    private q;
    v: boolean;
    private r;
    w: boolean;
    private ao;
    at: number;
    private an;
    as: number;
    private al;
    aq: number;
    private s;
    x: boolean;
    private t;
    y: boolean;
    private a0;
    bi: string;
    private ax;
    az: any;
    bo(): void;
    protected br(a: string, b: any, c: any): void;
    protected bs(a: string, b: any, c: any): void;
    private ad;
    private ag;
    private aw;
    getTile(a: number, b: number, c: number, d: (sender: any, eventArgs: TileImageCreatedEventArgs) => void, e: (sender: any, eventArgs: TileImageCreatedEventArgs) => void, f: (sender: any, eventArgs: TileImageZoomChangingEventArgs) => void, g: HTMLImageElement): void;
    private au;
    private ay;
    private ak;
    private aj;
    private z;
    private aa;
    private ah;
    private ai;
    private ae;
    private af;
    private n;
    private ab;
    private getTile1;
    cancelTile(a: number, b: number, c: number): void;
    private o;
    private bm;
    private bn;
    private a2;
    private f;
    private bt;
    private bu;
    private b0;
    private bq;
}
