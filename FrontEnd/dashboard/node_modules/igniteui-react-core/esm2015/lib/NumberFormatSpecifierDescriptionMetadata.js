/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FormatSpecifierDescriptionMetadata } from "./FormatSpecifierDescriptionMetadata";
import { NumberFormatSpecifierDescription } from "./NumberFormatSpecifierDescription";
/**
 * @hidden
 */
export let NumberFormatSpecifierDescriptionMetadata = /*@__PURE__*/ (() => {
    class NumberFormatSpecifierDescriptionMetadata extends Base {
        static b(a) {
            if (NumberFormatSpecifierDescriptionMetadata.a == null) {
                NumberFormatSpecifierDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                NumberFormatSpecifierDescriptionMetadata.c(a, NumberFormatSpecifierDescriptionMetadata.a);
            }
        }
        static c(a, b) {
            FormatSpecifierDescriptionMetadata.c(a, b);
            b.item("Locale", "String");
            b.item("CompactDisplay", "String");
            b.item("Currency", "String");
            b.item("CurrencyDisplay", "String");
            b.item("CurrencySign", "String");
            b.item("LocaleMatcher", "String");
            b.item("Notation", "String");
            b.item("NumberingSystem", "String");
            b.item("SignDisplay", "String");
            b.item("Style", "String");
            b.item("Unit", "String");
            b.item("UnitDisplay", "String");
            b.item("UseGrouping", "Boolean");
            b.item("MinimumIntegerDigits", "Number:int");
            b.item("MinimumFractionDigits", "Number:int");
            b.item("MaximumFractionDigits", "Number:int");
            b.item("MinimumSignificantDigits", "Number:int");
            b.item("MaximumSignificantDigits", "Number:int");
        }
        static d(a) {
            NumberFormatSpecifierDescriptionMetadata.b(a);
            a.n("NumberFormatSpecifier", () => new NumberFormatSpecifierDescription());
            a.m("NumberFormatSpecifier", NumberFormatSpecifierDescriptionMetadata.a);
        }
    }
    NumberFormatSpecifierDescriptionMetadata.$t = /*@__PURE__*/ markType(NumberFormatSpecifierDescriptionMetadata, 'NumberFormatSpecifierDescriptionMetadata');
    NumberFormatSpecifierDescriptionMetadata.a = null;
    return NumberFormatSpecifierDescriptionMetadata;
})();
//# sourceMappingURL=NumberFormatSpecifierDescriptionMetadata.js.map
