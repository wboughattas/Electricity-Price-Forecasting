/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GridFilterDialogOpeningEventArgsDescriptionMetadata } from "./GridFilterDialogOpeningEventArgsDescriptionMetadata";
import { GridFilterDialogFilterChangeEventArgsDescriptionMetadata } from "./GridFilterDialogFilterChangeEventArgsDescriptionMetadata";
import { FilterDialogRenderCompletedEventArgsDescriptionMetadata } from "./FilterDialogRenderCompletedEventArgsDescriptionMetadata";
import { DataGridFilterDialogDescription } from "./DataGridFilterDialogDescription";
/**
 * @hidden
 */
export let DataGridFilterDialogDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataGridFilterDialogDescriptionMetadata extends Base {
        static b(a) {
            if (DataGridFilterDialogDescriptionMetadata.a == null) {
                DataGridFilterDialogDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataGridFilterDialogDescriptionMetadata.c(a, DataGridFilterDialogDescriptionMetadata.a);
                GridFilterDialogOpeningEventArgsDescriptionMetadata.d(a);
                GridFilterDialogFilterChangeEventArgsDescriptionMetadata.d(a);
                FilterDialogRenderCompletedEventArgsDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("IsAnimationEnabled", "Boolean");
            b.item("PixelScalingRatio", "Number:double");
            b.item("ActualPixelScalingRatio", "Number:double");
            b.item("IconColor", "Brush");
            b.item("ViewSize", "Number:double");
            b.item("DialogOpeningRef", "EventRef::dialogOpening");
            b.item("FilterChangingRef", "EventRef::filterChanging");
            b.item("FilterChangedRef", "EventRef::filterChanged");
            b.item("RenderCompletedRef", "EventRef::renderCompleted");
        }
        static d(a) {
            DataGridFilterDialogDescriptionMetadata.b(a);
            a.n("DataGridFilterDialog", () => new DataGridFilterDialogDescription());
            a.m("DataGridFilterDialog", DataGridFilterDialogDescriptionMetadata.a);
        }
    }
    DataGridFilterDialogDescriptionMetadata.$t = /*@__PURE__*/ markType(DataGridFilterDialogDescriptionMetadata, 'DataGridFilterDialogDescriptionMetadata');
    DataGridFilterDialogDescriptionMetadata.a = null;
    return DataGridFilterDialogDescriptionMetadata;
})();
//# sourceMappingURL=DataGridFilterDialogDescriptionMetadata.js.map
