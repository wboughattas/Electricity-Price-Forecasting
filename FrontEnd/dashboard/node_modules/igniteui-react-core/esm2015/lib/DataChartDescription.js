/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataChartDescription = /*@__PURE__*/ (() => {
    class DataChartDescription extends SeriesViewerDescription {
        constructor() {
            super();
            this.d9 = false;
            this.el = 0;
            this.em = 0;
            this.ef = 0;
            this.eg = 0;
            this.d8 = false;
            this.ea = false;
            this.ey = null;
            this.d7 = false;
            this.dy = null;
            this.dz = null;
            this.d1 = null;
            this.d0 = null;
            this.ex = null;
            this.ev = null;
            this.ew = null;
            this.dx = null;
            this.ei = 0;
            this.ek = 0;
            this.ej = 0;
            this.eh = 0;
            this.e0 = null;
            this.ez = null;
        }
        get_type() {
            return "DataChart";
        }
        get isSquare() {
            return this.d9;
        }
        set isSquare(a) {
            this.d9 = a;
            this.e("IsSquare");
        }
        get windowScaleHorizontal() {
            return this.el;
        }
        set windowScaleHorizontal(a) {
            this.el = a;
            this.e("WindowScaleHorizontal");
        }
        get windowScaleVertical() {
            return this.em;
        }
        set windowScaleVertical(a) {
            this.em = a;
            this.e("WindowScaleVertical");
        }
        get actualWindowScaleHorizontal() {
            return this.ef;
        }
        set actualWindowScaleHorizontal(a) {
            this.ef = a;
            this.e("ActualWindowScaleHorizontal");
        }
        get actualWindowScaleVertical() {
            return this.eg;
        }
        set actualWindowScaleVertical(a) {
            this.eg = a;
            this.e("ActualWindowScaleVertical");
        }
        get isHorizontalZoomEnabled() {
            return this.d8;
        }
        set isHorizontalZoomEnabled(a) {
            this.d8 = a;
            this.e("IsHorizontalZoomEnabled");
        }
        get isVerticalZoomEnabled() {
            return this.ea;
        }
        set isVerticalZoomEnabled(a) {
            this.ea = a;
            this.e("IsVerticalZoomEnabled");
        }
        get gridMode() {
            return this.ey;
        }
        set gridMode(a) {
            this.ey = a;
            this.e("GridMode");
        }
        get alignsGridLinesToPixels() {
            return this.d7;
        }
        set alignsGridLinesToPixels(a) {
            this.d7 = a;
            this.e("AlignsGridLinesToPixels");
        }
        get brushes() {
            return this.dy;
        }
        set brushes(a) {
            this.dy = a;
            this.e("Brushes");
        }
        get markerBrushes() {
            return this.dz;
        }
        set markerBrushes(a) {
            this.dz = a;
            this.e("MarkerBrushes");
        }
        get outlines() {
            return this.d1;
        }
        set outlines(a) {
            this.d1 = a;
            this.e("Outlines");
        }
        get markerOutlines() {
            return this.d0;
        }
        set markerOutlines(a) {
            this.d0 = a;
            this.e("MarkerOutlines");
        }
        get defaultAxisStroke() {
            return this.ex;
        }
        set defaultAxisStroke(a) {
            this.ex = a;
            this.e("DefaultAxisStroke");
        }
        get defaultAxisMajorStroke() {
            return this.ev;
        }
        set defaultAxisMajorStroke(a) {
            this.ev = a;
            this.e("DefaultAxisMajorStroke");
        }
        get defaultAxisMinorStroke() {
            return this.ew;
        }
        set defaultAxisMinorStroke(a) {
            this.ew = a;
            this.e("DefaultAxisMinorStroke");
        }
        get axes() {
            return this.dx;
        }
        set axes(a) {
            this.dx = a;
            this.e("Axes");
        }
        get plotAreaMarginLeft() {
            return this.ei;
        }
        set plotAreaMarginLeft(a) {
            this.ei = a;
            this.e("PlotAreaMarginLeft");
        }
        get plotAreaMarginTop() {
            return this.ek;
        }
        set plotAreaMarginTop(a) {
            this.ek = a;
            this.e("PlotAreaMarginTop");
        }
        get plotAreaMarginRight() {
            return this.ej;
        }
        set plotAreaMarginRight(a) {
            this.ej = a;
            this.e("PlotAreaMarginRight");
        }
        get plotAreaMarginBottom() {
            return this.eh;
        }
        set plotAreaMarginBottom(a) {
            this.eh = a;
            this.e("PlotAreaMarginBottom");
        }
        get width() {
            return this.e0;
        }
        set width(a) {
            this.e0 = a;
            this.e("Width");
        }
        get height() {
            return this.ez;
        }
        set height(a) {
            this.ez = a;
            this.e("Height");
        }
    }
    DataChartDescription.$t = /*@__PURE__*/ markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
})();
//# sourceMappingURL=DataChartDescription.js.map
