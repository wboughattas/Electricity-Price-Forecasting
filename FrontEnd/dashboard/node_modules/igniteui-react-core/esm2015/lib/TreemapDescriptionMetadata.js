/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { TreemapNodeStylingEventArgsDescriptionMetadata } from "./TreemapNodeStylingEventArgsDescriptionMetadata";
import { TreemapNodePointerEventArgsDescriptionMetadata } from "./TreemapNodePointerEventArgsDescriptionMetadata";
import { TreemapDescription } from "./TreemapDescription";
/**
 * @hidden
 */
export let TreemapDescriptionMetadata = /*@__PURE__*/ (() => {
    class TreemapDescriptionMetadata extends Base {
        static b(a) {
            if (TreemapDescriptionMetadata.a == null) {
                TreemapDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                TreemapDescriptionMetadata.c(a, TreemapDescriptionMetadata.a);
                TreemapNodeStylingEventArgsDescriptionMetadata.d(a);
                TreemapNodePointerEventArgsDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("ValueMemberPath", "String");
            b.item("RootTitle", "String");
            b.item("BreadcrumbSequence", "String");
            b.item("ParentIdMemberPath", "String");
            b.item("LabelMemberPath", "String");
            b.item("CustomValueMemberPath", "String");
            b.item("IdMemberPath", "String");
            b.item("DataSourceRef", "(w:ItemsSource,j:dataSource,wf:ItemsSource)DataRef::object");
            b.item("FillBrushes", "BrushCollection:string");
            b.item("StyleMappings", "Collection:TreemapNodeStyleMapping:TreemapNodeStyleMappingCollection:TreemapNodeStyleMapping");
            b.item("FillScaleMode", "ExportedType:string:TreemapFillScaleMode");
            b.item("IsFillScaleLogarithmic", "Boolean");
            b.item("FillScaleLogarithmBase", "Number:int");
            b.item("FillScaleMinimumValue", "Number:double");
            b.item("FillScaleMaximumValue", "Number:double");
            b.item("LabelVerticalFitMode", "ExportedType:string:TreemapLabelVerticalFitMode");
            b.item("LabelHorizontalFitMode", "ExportedType:string:TreemapLabelHorizontalFitMode");
            b.item("OverlayHeaderHoverBackground", "Brush");
            b.item("HeaderHoverBackground", "Brush");
            b.item("HeaderBackground", "Brush");
            b.item("OverlayHeaderBackground", "Brush");
            b.item("HeaderTextColor", "Brush");
            b.item("HeaderDarkTextColor", "Brush");
            b.item("TextColor", "Brush");
            b.item("DarkTextColor", "Brush");
            b.item("HeaderHoverTextColor", "Brush");
            b.item("HeaderHoverDarkTextColor", "Brush");
            b.item("FontFamily", "(w:FontFamily/FontFamilyTransform,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
            b.item("FontSize", "(w:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
            b.item("FontStyle", "(w:FontStyle/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            b.item("FontWeight", "(w:FontWeight/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            b.item("HeaderFontFamily", "(w:HeaderFontFamily/FontFamilyTransform,wf:HeaderFontFamily,web:headerTextStyle/FontFamilyTransform)String");
            b.item("HeaderFontSize", "(w:HeaderFontSize,wf:HeaderFontSize,web:headerTextStyle/FontSizeTransform)Number:double");
            b.item("HeaderFontStyle", "(w:HeaderFontStyle/FontStyleTransform,wf:HeaderFontFamily/FontStyleTransform,web:headerTextStyle/FontStyleTransform)String");
            b.item("HeaderFontWeight", "(w:HeaderFontWeight/FontWeightTransform,wf:HeaderFontFamily/FontWeightTransform,web:headerTextStyle/FontWeightTransform)String");
            b.item("HeaderDisplayMode", "ExportedType:string:TreemapHeaderDisplayMode");
            b.item("HeaderLabelLeftMargin", "Number:double");
            b.item("HeaderLabelTopMargin", "Number:double");
            b.item("HeaderLabelRightMargin", "Number:double");
            b.item("HeaderLabelBottomMargin", "Number:double");
            b.item("OverlayHeaderLabelLeftMargin", "Number:double");
            b.item("OverlayHeaderLabelTopMargin", "Number:double");
            b.item("OverlayHeaderLabelRightMargin", "Number:double");
            b.item("OverlayHeaderLabelBottomMargin", "Number:double");
            b.item("LabelLeftMargin", "Number:double");
            b.item("LabelTopMargin", "Number:double");
            b.item("LabelRightMargin", "Number:double");
            b.item("LabelBottomMargin", "Number:double");
            b.item("ParentNodeLeftMargin", "Number:double");
            b.item("ParentNodeTopMargin", "Number:double");
            b.item("ParentNodeRightMargin", "Number:double");
            b.item("ParentNodeBottomMargin", "Number:double");
            b.item("ParentNodeLeftPadding", "Number:double");
            b.item("ParentNodeTopPadding", "Number:double");
            b.item("ParentNodeRightPadding", "Number:double");
            b.item("ParentNodeBottomPadding", "Number:double");
            b.item("LabelHorizontalAlignment", "ExportedType:string:HorizontalAlignment");
            b.item("LabelVerticalAlignment", "ExportedType:string:VerticalAlignment");
            b.item("HeaderHeight", "Number:double");
            b.item("Outline", "Brush");
            b.item("StrokeThickness", "Number:double");
            b.item("LayoutOrientation", "ExportedType:string:TreemapOrientation");
            b.item("LayoutType", "ExportedType:string:TreemapLayoutType");
            b.item("MinimumDisplaySize", "Number:double");
            b.item("TransitionDuration", "Number:int");
            b.item("PixelScalingRatio", "Number:double");
            b.item("ActualPixelScalingRatio", "Number:double");
            b.item("InteractionPixelScalingRatio", "Number:double");
            b.item("ActualInteractionPixelScalingRatio", "Number:double");
            b.item("FocusItemRef", "(w:FocusItem,wf:FocusItem)DataRef");
            b.item("NodeStylingRef", "EventRef::nodeStyling");
            b.item("NodePointerOverRef", "EventRef::nodePointerOver");
            b.item("NodePointerEnterRef", "EventRef::nodePointerEnter");
            b.item("NodePointerLeaveRef", "EventRef::nodePointerLeave");
            b.item("NodePointerPressedRef", "EventRef::nodePointerPressed");
            b.item("NodePointerReleasedRef", "EventRef::nodePointerReleased");
            TreemapDescriptionMetadata.e(a, b);
        }
        static d(a) {
            TreemapDescriptionMetadata.b(a);
            a.n("Treemap", () => new TreemapDescription());
            a.m("Treemap", TreemapDescriptionMetadata.a);
        }
        static e(a, b) {
            b.item("_qualifiedName", "String:Infragistics.Controls.Charts.XamTreemap");
            b.item("Width", "(w:Width/DimensionTransform)String");
            b.item("Height", "(w:Height/DimensionTransform)String");
            b.item("Background", "(wf:BackColor/ColorTransform)Brush");
        }
    }
    TreemapDescriptionMetadata.$t = /*@__PURE__*/ markType(TreemapDescriptionMetadata, 'TreemapDescriptionMetadata');
    TreemapDescriptionMetadata.a = null;
    return TreemapDescriptionMetadata;
})();
//# sourceMappingURL=TreemapDescriptionMetadata.js.map
