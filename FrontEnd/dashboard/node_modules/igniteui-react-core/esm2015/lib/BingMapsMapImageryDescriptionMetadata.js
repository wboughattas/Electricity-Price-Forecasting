/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GeographicMapImageryDescriptionMetadata } from "./GeographicMapImageryDescriptionMetadata";
import { BingMapsMapImageryDescription } from "./BingMapsMapImageryDescription";
/**
 * @hidden
 */
export let BingMapsMapImageryDescriptionMetadata = /*@__PURE__*/ (() => {
    class BingMapsMapImageryDescriptionMetadata extends Base {
        static b(a) {
            if (BingMapsMapImageryDescriptionMetadata.a == null) {
                BingMapsMapImageryDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                BingMapsMapImageryDescriptionMetadata.c(a, BingMapsMapImageryDescriptionMetadata.a);
            }
        }
        static c(a, b) {
            GeographicMapImageryDescriptionMetadata.c(a, b);
            b.item("IsInitialized", "Boolean");
            b.item("IsDeferredLoad", "Boolean");
            b.item("TilePath", "String");
            b.item("ActualTilePath", "String");
            b.item("SubDomains", "Collection:String:SubDomainsCollection:String");
            b.item("ActualSubDomains", "Collection:String:SubDomainsCollection:String");
            b.item("BingImageryRestUri", "String");
            b.item("ActualBingImageryRestUri", "String");
            b.item("CultureName", "String");
            b.item("ApiKey", "String");
            b.item("ImageryStyle", "ExportedType:string:BingMapsImageryStyle");
        }
        static d(a) {
            BingMapsMapImageryDescriptionMetadata.b(a);
            a.n("BingMapsMapImagery", () => new BingMapsMapImageryDescription());
            a.m("BingMapsMapImagery", BingMapsMapImageryDescriptionMetadata.a);
        }
    }
    BingMapsMapImageryDescriptionMetadata.$t = /*@__PURE__*/ markType(BingMapsMapImageryDescriptionMetadata, 'BingMapsMapImageryDescriptionMetadata');
    BingMapsMapImageryDescriptionMetadata.a = null;
    return BingMapsMapImageryDescriptionMetadata;
})();
//# sourceMappingURL=BingMapsMapImageryDescriptionMetadata.js.map
