/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, IEnumerable_$type, fromEnum, typeCast, Date_$type, Boolean_$type, Array_$type, String_$type, runOn, Delegate_$type, markType, Number_$type } from "./type";
import { TypeDescriptionContext } from "./TypeDescriptionContext";
import { TypeDescriptionPropretyTransforms } from "./TypeDescriptionPropretyTransforms";
import { TypeDescriptionCleanups } from "./TypeDescriptionCleanups";
import { Dictionary$2 } from "./Dictionary$2";
import { Description } from "./Description";
import { DescriptionTreeNode } from "./DescriptionTreeNode";
import { Queue$1 } from "./Queue$1";
import { DescriptionTreeAction } from "./DescriptionTreeAction";
import { DescriptionRef } from "./DescriptionRef";
import { List$1 } from "./List$1";
import { DescriptionSerializerBuilder } from "./DescriptionSerializerBuilder";
import { DescriptionSerializer } from "./DescriptionSerializer";
import { DataSourceLocalDataProvider } from "./DataSourceLocalDataProvider";
import { JsonDictionaryParser } from "./JsonDictionaryParser";
import { DescriptionTreeBuilder } from "./DescriptionTreeBuilder";
import { JsonDictionaryObject } from "./JsonDictionaryObject";
import { JsonDictionaryValue } from "./JsonDictionaryValue";
import { JsonDictionaryArray } from "./JsonDictionaryArray";
import { DescriptionTreeReconciler } from "./DescriptionTreeReconciler";
import { HashSet$1 } from "./HashSet$1";
import { NotImplementedException } from "./NotImplementedException";
import { ComponentRendererAdapter } from "./ComponentRendererAdapter";
import { stringIsNullOrEmpty, stringStartsWith } from "./string";
/**
 * @hidden
 */
export let ComponentRenderer = /*@__PURE__*/ (() => {
    class ComponentRenderer extends Base {
        constructor() {
            super();
            this.d = null;
            this._context = null;
            this.i = null;
            this.f = null;
            this.aj = new Dictionary$2(Base.$, Description.$, 0);
            this.ak = new Dictionary$2(Base.$, Boolean_$type, 0);
            this.al = new Dictionary$2(Base.$, Boolean_$type, 0);
            this.ai = new Dictionary$2(Base.$, Boolean_$type, 0);
            this.ah = new Dictionary$2(Base.$, DescriptionTreeNode.$, 0);
            this.ao = new Dictionary$2(Base.$, ContainerState.$, 0);
            this.am = new Dictionary$2(Base.$, Queue$1.$.specialize(Queue$1.$.specialize(DescriptionTreeAction.$)), 0);
            this.ag = new Dictionary$2(Base.$, Boolean_$type, 0);
            this.an = new Dictionary$2(String_$type, DescriptionRef.$, 0);
            this.ap = new Dictionary$2(String_$type, Base.$, 0);
            this.ar = new Dictionary$2(String_$type, Base.$, 0);
            this.aq = new Dictionary$2(String_$type, List$1.$.specialize(Delegate_$type), 0);
            this.as = new List$1(Delegate_$type, 0);
            this.at = new List$1(Delegate_$type, 0);
            this._shouldNamespaceSystemRefValues = false;
            let a = this.e();
            this.d = a;
            this.context = new TypeDescriptionContext(a, ComponentRenderer.platform);
            this.i = new TypeDescriptionPropretyTransforms();
            this.f = new TypeDescriptionCleanups();
        }
        get context() {
            return this._context;
        }
        set context(a) {
            this._context = a;
        }
        e() {
            return (new ComponentRendererAdapter());
        }
        toJson(a) {
            let b = new DescriptionSerializerBuilder();
            let c = new DescriptionSerializer();
            b.f("{");
            b.i();
            b.f("\"descriptions\": {");
            b.i();
            let d = true;
            for (let e of fromEnum(this.ah.keys)) {
                if (d) {
                    d = false;
                }
                else {
                    b.f(",");
                }
                let f = e;
                let g = this.ah.item(e);
                let h = "root";
                h = a(f);
                if (stringIsNullOrEmpty(h)) {
                    h = "root";
                }
                b.e("\"" + h + "\"");
                b.e(": ");
                c.o(this.context, g, b);
            }
            b.f("");
            b.h();
            b.e("}");
            if (this.ar.count > 0) {
                b.e(",");
            }
            b.f("");
            if (this.ar.count > 0) {
                d = true;
                b.f("refs: {");
                b.i();
                for (let i of fromEnum(this.ar.keys)) {
                    if (!this.k(i, this.ar.item(i))) {
                        continue;
                    }
                    if (d) {
                        d = false;
                    }
                    else {
                        b.f(",");
                    }
                    this.ck(b, i, this.ar.item(i));
                }
                b.f("");
                b.h();
                b.f("}");
            }
            b.h();
            b.f("}");
            return b.toString();
        }
        ck(a, b, c) {
            a.e("\"" + b + "\": ");
            this.cl(a, c);
        }
        cl(a, b) {
            if (this.s(b)) {
                if (typeof b === 'string') {
                    a.e(b == null ? "null" : "\"" + b.toString() + "\"");
                }
                else if (typeof b === 'number') {
                    a.e(b == null ? "null" : b.toString());
                }
                else if (typeof b === 'number') {
                    a.e(b == null ? "null" : b.toString());
                }
                else if (typeof b === 'number') {
                    a.e(b == null ? "null" : b.toString());
                }
                else if (typeof b === 'number') {
                    a.e(b == null ? "null" : b.toString());
                }
                else if (typeof b === 'number') {
                    a.e(b == null ? "null" : b.toString());
                }
                else if (typeof b === 'number') {
                    a.e(b == null ? "null" : b.toString());
                }
                else if (typeof b === 'number') {
                    a.e(b == null ? "null" : b.toString());
                }
                else if (typeCast(Date_$type, b) !== null) {
                    let v_ = b;
                    a.e("\"" + (v_.toJSON()) + "\"");
                }
                else if (typeCast(Boolean_$type, b) !== null) {
                    a.e(b == null ? "null" : b.toString().toLowerCase());
                }
                else {
                    a.e("null");
                }
            }
            else {
                if (b == null) {
                    a.e("null");
                    return;
                }
                if (this.q(b)) {
                    a.f("[");
                    a.i();
                    let c = new DataSourceLocalDataProvider();
                    c.dataSource = b;
                    for (let d = 0; d < c.actualCount; d++) {
                        if (d > 0) {
                            a.f(",");
                        }
                        this.cj(a, c, d);
                    }
                    a.f("");
                    a.h();
                    a.e("]");
                }
                else {
                    let e = [b];
                    let f = new DataSourceLocalDataProvider();
                    f.dataSource = e;
                    this.cj(a, f, 0);
                }
            }
        }
        s(a) {
            if (typeof a === 'string') {
                return true;
            }
            if (typeof a === 'number' || typeof a === 'number' || typeof a === 'number' || typeof a === 'number' || typeof a === 'number' || typeof a === 'number' || typeof a === 'number') {
                return true;
            }
            if (typeCast(Date_$type, a) !== null) {
                return true;
            }
            if (typeCast(Boolean_$type, a) !== null) {
                return true;
            }
            return false;
        }
        q(a) {
            if (typeCast(Array_$type, a) !== null) {
                return true;
            }
            if (typeCast(IEnumerable_$type, a) !== null) {
                return true;
            }
            return false;
        }
        cj(a, b, c) {
            a.f("{");
            a.i();
            let d = b.actualSchema;
            for (let e = 0; e < d.propertyNames.length; e++) {
                if (e > 0) {
                    a.f(",");
                }
                let f = d.propertyNames[e];
                if (stringStartsWith(f, "[")) {
                    f = f.substr(1, f.length - 2);
                }
                a.e("\"" + f + "\"");
                a.e(": ");
                let g = b.getItemValue(b.getItemAtIndex(c), d.propertyNames[e]);
                switch (d.propertyTypes[e]) {
                    case 0:
                        a.e(g == null ? "null" : "\"" + g.toString() + "\"");
                        break;
                    case 2:
                        a.e(g == null ? "null" : "\"" + g.toString() + "\"");
                        break;
                    case 10:
                    case 6:
                    case 5:
                    case 1:
                    case 3:
                    case 4:
                    case 7:
                        a.e(g == null ? "null" : g.toString());
                        break;
                    case 8:
                        let v_ = g;
                        a.e("\"" + (v_.toJSON()) + "\"");
                        break;
                    case 11:
                        this.cl(a, g);
                        break;
                }
            }
            a.h();
            a.f("}");
        }
        k(a, b) {
            if (b == null) {
                return true;
            }
            let v_ = b;
            if ((typeof v_ === 'function')) {
                return false;
            }
            return true;
        }
        createObjectFromJson(a, b) {
            let c = new JsonDictionaryParser();
            let d = c.parse(a);
            let e = new DescriptionSerializer();
            let f = false;
            let g = e.d(this.context, d, f);
            if (g.result == null) {
                return null;
            }
            let h = DescriptionTreeBuilder.createTree(this.context, g.result);
            let i = this.ao.item(b);
            if (h.b("Type")) {
                let j = h.a("Type").b;
                return this.bd(j, h, b, i, true, -1);
            }
            else {
                return this.bc(typeCast(JsonDictionaryObject.$, d));
            }
        }
        loadJson(a, b) {
            this.b1(a, b, false, false);
        }
        loadJsonDelta(a, b, c) {
            this.b1(a, b, true, c);
        }
        b1(a, b, c, d) {
            let e = new JsonDictionaryParser();
            let f = e.parse(a);
            let g = new DescriptionSerializer();
            let h = null;
            if (typeCast(JsonDictionaryObject.$, f) !== null) {
                let i = f;
                if (i.c("descriptions")) {
                    let j = i.item("descriptions");
                    if (typeCast(JsonDictionaryObject.$, j) !== null) {
                        let k = j;
                        let l = k.a();
                        for (let m = 0; m < l.length; m++) {
                            let n = l[m];
                            let o = k.item(n);
                            let p = b(n);
                            if (p == null) {
                                continue;
                            }
                            h = p;
                            let q = false;
                            let r = g.d(this.context, o, q);
                            if (r.result == null) {
                                continue;
                            }
                            this.cg(r.result, p, c, d, false);
                        }
                    }
                }
                if (i.c("refs") && h != null) {
                    let s = i.item("refs");
                    if (typeCast(JsonDictionaryObject.$, s) !== null) {
                        let t = s;
                        let u = t.a();
                        for (let v = 0; v < u.length; v++) {
                            let w = u[v];
                            let x = t.item(w);
                            if (typeCast(JsonDictionaryValue.$, x) !== null) {
                                let y = x;
                                this.provideRefValue(h, w, y.value);
                            }
                            else if (typeCast(JsonDictionaryArray.$, x) !== null) {
                                let z = x;
                                let aa = this.a(z);
                                this.provideRefValue(h, w, aa);
                            }
                            else {
                                let ab = this.bc(x);
                                this.provideRefValue(h, w, ab);
                            }
                        }
                    }
                }
            }
        }
        a(a) {
            let b = new Array(a.items.length);
            for (let c = 0; c < a.items.length; c++) {
                let d = this.bc(a.items[c]);
                b[c] = d;
            }
            return b;
        }
        bc(a) {
            if (a == null) {
                return null;
            }
            let b = {};
            let dict_ = b;
            let c = a.a();
            for (let d = 0; d < c.length; d++) {
                let key_ = c[d];
                if (typeCast(JsonDictionaryObject.$, a.item(key_)) !== null) {
                    let val_ = this.bc(a.item(key_));
                    dict_[key_] = val_;
                }
                else if (typeCast(JsonDictionaryArray.$, a.item(key_)) !== null) {
                    let val_ = this.a(a.item(key_));
                    dict_[key_] = val_;
                }
                else {
                    let val_ = a.item(key_).value;
                    dict_[key_] = val_;
                }
            }
            return dict_;
        }
        cleanup(a, b) {
            this.cg(null, a, false, false, b);
        }
        render(a, b) {
            this.cg(a, b, false, false, false);
        }
        cg(a, b, c, d, e) {
            if (!this.ao.containsKey(b)) {
                this.ao.item(b, new ContainerState());
                this.ao.item(b).i = b;
            }
            this.aj.item(b, a);
            this.ak.item(b, c);
            this.al.item(b, d);
            this.ai.item(b, e);
            this.b2(b, () => this.ce(b));
        }
        b2(a, b) {
            this.d.onUIThread(a, b);
        }
        ce(a) {
            if (this.aj.containsKey(a)) {
                let b = this.ak.containsKey(a) ? this.ak.item(a) : false;
                let c = this.al.containsKey(a) ? this.al.item(a) : false;
                let d = this.aj.item(a);
                this.aj.removeItem(a);
                let e = DescriptionTreeBuilder.createTree(this.context, d);
                let f = null;
                if (this.ah.containsKey(a)) {
                    f = this.ah.item(a);
                }
                let g = DescriptionTreeReconciler.c(f, e, b);
                if (c) {
                    let h = DescriptionTreeReconciler.a(f, g);
                    if (!this.ao.containsKey(a)) {
                        this.ao.addItem(a, ((() => {
                            let $ret = new ContainerState();
                            $ret.i = a;
                            return $ret;
                        })()));
                    }
                    let i = this.ao.item(a);
                    if (h.a.count > 0) {
                        for (let j of fromEnum(h.a)) {
                            if (i.a(j)) {
                                let k = i.j(j);
                                this.bx(a, k, i);
                            }
                        }
                    }
                    if (h.c.count > 0) {
                        for (let l of fromEnum(h.c)) {
                            let m = this.bi(a, i, l);
                            let n = this.d.getPropertyValue(m, l.i);
                            if (n != null) {
                                if (!i.b(n)) {
                                    let o = l.f;
                                    if (typeCast(DescriptionTreeNode.$, o) !== null) {
                                        let p = o.f;
                                        i.k(a, p, n, o, runOn(this, this.b6), l.b.f);
                                    }
                                }
                            }
                        }
                    }
                    if (h.b.count > 0) {
                        for (let q of fromEnum(h.b)) {
                            let r = q.b.a(q.i).b;
                            if (r == null) {
                                continue;
                            }
                            let s = new Dictionary$2(String_$type, DescriptionTreeNode.$, 0);
                            for (let t = 0; t < r.length; t++) {
                                let u = r[t];
                                if (typeCast(DescriptionTreeNode.$, u) !== null) {
                                    let v = u;
                                    if (v.b("Name")) {
                                        s.item(v.a("Name").b, v);
                                    }
                                }
                            }
                            if (s.count == 0) {
                                continue;
                            }
                            let w = this.bi(a, i, q);
                            let x = this.d.getPropertyValue(w, q.i);
                            if (x != null) {
                                let y = 0;
                                this.d.forPropertyValueItem(w, q.i, (z) => {
                                    if (s.containsKey(this.d.getPropertyValue(z, "Name").toString())) {
                                        if (!i.b(z)) {
                                            let aa = s.item(this.d.getPropertyValue(z, "Name").toString());
                                            if (typeCast(DescriptionTreeNode.$, aa) !== null) {
                                                let ab = aa.f;
                                                i.k(a, ab, z, aa, runOn(this, this.b6), q.b.f);
                                            }
                                        }
                                    }
                                    y++;
                                });
                            }
                        }
                    }
                }
                else {
                    this.ah.item(a, e);
                }
                if (!c) {
                    this.cf(a, g);
                }
                if (this.ai.item(a)) {
                    this.cc(a);
                    if (this.ao.containsKey(a)) {
                        this.ao.removeItem(a);
                    }
                }
            }
        }
        provideRefValue(a, b, c) {
            this.b2(a, () => {
                if (!this.ao.containsKey(a)) {
                    this.ao.addItem(a, ((() => {
                        let $ret = new ContainerState();
                        $ret.i = a;
                        return $ret;
                    })()));
                }
                let d = this.ao.item(a);
                this.b6(a, b, c, true);
            });
        }
        removeRefValue(a, b) {
            this.b2(a, () => {
                if (!this.ao.containsKey(a)) {
                    this.ao.addItem(a, ((() => {
                        let $ret = new ContainerState();
                        $ret.i = a;
                        return $ret;
                    })()));
                }
                let c = this.ao.item(a);
                this.removeRefValueCore(a, b, true);
            });
        }
        cc(a) {
            let b = this.ao.item(a);
            let c = new List$1(String_$type, 0);
            for (let d of fromEnum(this.an.keys)) {
                if (this.an.item(d).b == 0) {
                    c.add(d);
                }
            }
            for (let e = 0; e < c.count; e++) {
                let f = this.shouldNamespaceSystemRefValues;
                this.shouldNamespaceSystemRefValues = false;
                this.removeRefValueCore(a, c._inner[e], this.ar.containsKey(c._inner[e]));
                this.shouldNamespaceSystemRefValues = f;
            }
        }
        clearRefValues(a) {
            this.b2(a, () => {
                if (!this.ao.containsKey(a)) {
                    this.ao.addItem(a, ((() => {
                        let $ret = new ContainerState();
                        $ret.i = a;
                        return $ret;
                    })()));
                }
                let b = this.ao.item(a);
                this.clearUserRefValues();
            });
        }
        cf(a, b) {
            let c = this.ao.item(a);
            this.b3(a, c, b);
        }
        ci(a, b) {
            this.by(a, b, true);
        }
        co(a, b) {
            this.by(a, b, false);
        }
        by(a, b, c) {
            if (!c) {
                if (this.ag.containsKey(a) && this.ag.item(a)) {
                    return;
                }
            }
            this.ag.item(a, true);
            let d = true;
            while (d && this.am.item(a).count > 0) {
                while (this.am.item(a).count > 0 && this.am.item(a).c().count < 1) {
                    this.am.item(a).b();
                }
                if (this.am.item(a).count < 1) {
                    break;
                }
                let e = this.am.item(a).c();
                while (e.count > 0) {
                    let f = e.b();
                    d = this.t(a, b, f);
                    if (!d) {
                        break;
                    }
                }
            }
            if (d) {
                this.ag.item(a, false);
            }
        }
        b3(a, b, c) {
            let d = new Queue$1(DescriptionTreeAction.$);
            for (let e = 0; e < c.count; e++) {
                d.g(c._inner[e]);
            }
            if (!this.am.containsKey(a)) {
                this.am.addItem(a, new Queue$1(Queue$1.$.specialize(DescriptionTreeAction.$)));
            }
            this.am.item(a).g(d);
            this.co(a, b);
        }
        b4(a, b, c) {
            for (let d = 0; d < c.count; d++) {
                this.t(a, b, c._inner[d]);
            }
        }
        t(a, b, c) {
            switch (c.a) {
                case 5: return this.u(a, b, c);
                case 2: return this.v(a, b, c);
                case 4: return this.w(a, b, c);
                case 3: return this.x(a, b, c);
                case 1: return this.y(a, b, c);
                case 0: return this.z(a, b, c);
            }
            return true;
        }
        z(a, b, c) {
            let d = this.bi(a, b, c);
            this.af(a, b, c, d);
            return true;
        }
        af(a, b, c, d) {
            let e = this.bf(c, a, b);
            e = this.i.b(ComponentRenderer.platform, e, c);
            if (c.c != null && c.c.knownType == 9) {
                this.ad(a, b, c.h(ComponentRenderer.platform), c.c, e, d);
            }
            else {
                this.cm(a, b, c.h(ComponentRenderer.platform), e, c.g, d);
            }
            return true;
        }
        ad(a, b, c, d, e, f) {
            if (this.aq.containsKey(c)) {
                for (let g of fromEnum(this.aq.item(c))) {
                    g(c, f, e);
                }
            }
            this.d.setOrUpdateCollectionOnTarget(a, c, d, this.context, f, e);
            return true;
        }
        bf(a, b, c) {
            if (a.c == null) {
                return a.f;
            }
            switch (a.c.knownType) {
                case 10: return this.aw(a, b, c);
                case 7: return this.ax(a);
                case 4: return this.ay(a);
                case 6: return this.az(a);
                case 9: return this.aw(a, b, c);
                case 5: return this.a0(a);
                case 16: return this.a1(a);
                case 20: return this.bj(a, c);
                case 15: return null;
                case 3: return this.a2(a);
                case 19: return this.bk(a, c);
                case 8: return this.a4(a, b, c);
                case 13: return null;
                case 18: return this.bl(a, c);
                case 1: return this.a5(a);
                case 11: return this.a6(a);
                case 14: return this.a7(a);
                case 12: return this.a8(a);
                case 2: return this.a9(a);
                case 21: return this.ba(a);
                case 17: return this.bb(a, b, c);
                case 0: return null;
            }
            return null;
        }
        bb(a, b, c) {
            if (typeCast(DescriptionTreeNode.$, a.f) !== null) {
                let d = a.f;
                if (d.h == "EmbeddedRef") {
                    return this.bd(d.h, a.f, b, c, false, a.b.f);
                }
            }
            return a.f;
        }
        ba(a) {
            return a.f;
        }
        a9(a) {
            return a.f != null ? a.f.toString() : null;
        }
        a8(a) {
            let b = a.f;
            let width_ = b.width;
            let height_ = b.height;
            let c = { width: width_, height: height_ };
            return c;
        }
        a7(a) {
            let b = a.f;
            let top_ = b.top;
            let left_ = b.left;
            let width_ = b.width;
            let height_ = b.height;
            let c = { left: left_, top: top_, width: width_, height: height_ };
            return c;
        }
        a6(a) {
            let b = a.f;
            let x_ = b.x;
            let y_ = b.y;
            let c = { x: x_, y: y_ };
            return c;
        }
        a5(a) {
            if (a.f == null) {
                if (a.c != null && (a.c.specificType == "double" || a.c.specificType == "float")) {
                    return NaN;
                }
                return 0;
            }
            return a.f;
        }
        b(a, b) {
            if (this.an.containsKey(a)) {
                let c = this.an.item(a);
                return c;
            }
            let d = new DescriptionRef(a);
            this.an.addItem(a, d);
            return d;
        }
        bl(a, b) {
            return a.f == null ? null : this.b(a.f, b);
        }
        a4(a, b, c) {
            let d = a.c.specificType;
            if (d == null) {
                d = a.c.specificExternalType;
            }
            if (typeCast(DescriptionTreeNode.$, a.f) !== null) {
                let e = a.f;
                if (e.b("Type")) {
                    d = e.a("Type").b;
                }
            }
            let f = this.bd(d, a.f, b, c, false, a.b.f);
            return f;
        }
        bk(a, b) {
            return a.f == null ? null : this.b(a.f, b);
        }
        a2(a) {
            return a.f;
        }
        bj(a, b) {
            return a.f == null ? null : this.b(a.f, b);
        }
        bn(a) {
            return a;
        }
        a1(a) {
            let b = a.f;
            if (b == null) {
                return null;
            }
            let c = new Array(b.length);
            for (let d = 0; d < b.length; d++) {
                c[d] = this.bn(b[d]);
            }
            return c;
        }
        a0(a) {
            return this.bn(a.f);
        }
        az(a) {
            let b = a.f;
            if (b == null) {
                return null;
            }
            let c = new Array(b.length);
            for (let d = 0; d < b.length; d++) {
                c[d] = this.bm(b[d]);
            }
            return c;
        }
        bm(a) {
            return a;
        }
        ay(a) {
            return this.bm(a.f);
        }
        ax(a) {
            return a.f;
        }
        addPropertyUpdatingListener(a, b) {
            if (!this.aq.containsKey(a)) {
                this.aq.addItem(a, new List$1(Delegate_$type, 0));
            }
            this.aq.item(a).add(b);
        }
        addReferenceLookupListener(a) {
            this.as.add(a);
        }
        removePropertyUpdatingListener(a, b) {
            if (this.aq.containsKey(a)) {
                this.aq.item(a).remove(b);
                if (this.aq.item(a).count == 0) {
                    this.aq.removeItem(a);
                }
            }
        }
        addNamespaceLookupListener(a) {
            this.at.add(a);
        }
        removeNamespaceLookupListener(a) {
            this.at.remove(a);
        }
        aw(a, b, c) {
            if (a.f == null) {
                return null;
            }
            let d = a.f;
            let e = new List$1(Base.$, 0);
            let f = a.c.specificType;
            if (f == null) {
                f = a.c.specificExternalType;
            }
            if (a.c.knownType == 9) {
                f = a.c.collectionElementType;
                if (f == null) {
                    f = a.c.specificExternalType;
                }
            }
            for (let g = 0; g < d.length; g++) {
                let h = f;
                if (typeCast(DescriptionTreeNode.$, d[g]) !== null) {
                    let i = d[g];
                    if (i.b("Type")) {
                        h = i.a("Type").b;
                    }
                }
                let j = this.bd(h, d[g], b, c, false, a.b.f);
                e.add1(j);
            }
            return e.toArray();
        }
        cm(a, b, c, d, e, f) {
            if (typeCast(DescriptionRef.$, d) !== null) {
                let g = d;
                let h = false;
                if (e != null && typeof e === 'string') {
                    if (this.n(e)) {
                        let i = this.c(e);
                        if (Base.equalsStatic(i, d)) {
                            h = true;
                        }
                        else {
                            i.i(a, f, c);
                        }
                    }
                }
                if (this.o(d)) {
                    d = this.bh(d);
                    this.cn(f, c, d, e);
                }
                let j = null;
                j = (k, l) => {
                    let m = this.bh(k);
                    this.cn(f, c, m, e);
                };
                if (!h) {
                    g.f(a, f, c, j);
                }
                return;
            }
            this.cn(f, c, d, e);
        }
        hasUserRef(a) {
            return this.ar.containsKey(a);
        }
        get shouldNamespaceSystemRefValues() {
            return this._shouldNamespaceSystemRefValues;
        }
        set shouldNamespaceSystemRefValues(a) {
            this._shouldNamespaceSystemRefValues = a;
        }
        b6(a, b, c, d) {
            let e = null;
            if (d) {
                if (this.ar.containsKey(b)) {
                    e = this.ar.item(b);
                }
                this.ar.item(b, c);
            }
            else {
                if (this.shouldNamespaceSystemRefValues) {
                    let f = "";
                    if (this.at != null && this.at.count > 0) {
                        for (let g = 0; g < this.at.count; g++) {
                            f = this.at._inner[g](a);
                        }
                    }
                    if (!stringIsNullOrEmpty(f)) {
                        b = f + "/" + b;
                    }
                }
                if (this.ap.containsKey(b)) {
                    e = this.ap.item(b);
                }
                this.ap.item(b, c);
            }
            if (this.an.containsKey(b)) {
                this.an.item(b).e(e, c);
            }
        }
        removeRefValueCore(a, b, c) {
            let d = null;
            if (c) {
                if (this.ar.containsKey(b)) {
                    d = this.ar.item(b);
                }
                this.ar.removeItem(b);
            }
            else {
                if (this.shouldNamespaceSystemRefValues) {
                    let e = "";
                    if (this.at != null && this.at.count > 0) {
                        for (let f = 0; f < this.at.count; f++) {
                            e = this.at._inner[f](a);
                        }
                    }
                    if (!stringIsNullOrEmpty(e)) {
                        b = e + "/" + b;
                    }
                }
                if (this.ap.containsKey(b)) {
                    d = this.ap.item(b);
                }
                this.ap.removeItem(b);
            }
            if (this.an.containsKey(b)) {
                this.an.item(b).e(d, this.bh(this.an.item(b)));
                if (this.an.item(b).b <= 0) {
                    this.an.item(b).g();
                    this.an.removeItem(b);
                }
            }
        }
        clearUserRefValues() {
            let a = new List$1(String_$type, 0);
            for (let b of fromEnum(this.ar.keys)) {
                a.add(b);
            }
            for (let c of fromEnum(a)) {
                this.removeRefValueCore(null, c, true);
            }
        }
        o(a) {
            return this.ar.containsKey(a.d) || this.ap.containsKey(a.d);
        }
        bh(a) {
            if (this.ar.containsKey(a.d)) {
                return this.ar.item(a.d);
            }
            if (this.ap.containsKey(a.d)) {
                return this.ap.item(a.d);
            }
            return null;
        }
        n(a) {
            return this.an.containsKey(a);
        }
        c(a) {
            return this.an.item(a);
        }
        bi(a, b, c) {
            return b.j(c.b.f);
        }
        y(a, b, c) {
            let d = this.bi(a, b, c);
            this.ac(a, b, c, d);
            return true;
        }
        ac(a, b, c, d) {
            this.d.resetPropertyOnTarget(a, c.h(ComponentRenderer.platform), c.c, d);
            return true;
        }
        x(a, b, c) {
            if (c.b == null) {
                return this.ab(a, b, c);
            }
            else {
                let d = this.bi(a, b, c);
                this.ch(a, b, c, d);
            }
            return true;
        }
        ch(a, b, c, d) {
            let e = c.h(ComponentRenderer.platform);
            let f = this.bd(c.c.collectionElementType, c.f, a, b, false, c.b.f);
            this.d.replaceItemInCollection(e, c.c, d, c.d, f);
            if (c.g != null && typeCast(DescriptionTreeNode.$, c.g) !== null) {
                let g = c.g.f;
                if (g >= 0) {
                    let h = b.j(g);
                    if (h != null) {
                        this.bx(a, h, b);
                    }
                }
            }
        }
        ab(a, b, c) {
            let d = this.d.getRootObject(a);
            if (d != null) {
                this.bx(a, d, b);
            }
            if (!(typeCast(DescriptionTreeNode.$, c.f) !== null)) {
                throw new NotImplementedException(0);
            }
            let e = c.f;
            let f = false;
            this.d.replaceRootItem(a, e.h, this.context, (g) => {
                let h = this.d.getRootObject(a);
                b.k(a, e.f, h, e, runOn(this, this.b6), -1);
                let i = this.au(e);
                this.b4(a, b, i);
                f = true;
                if (g) {
                    this.ci(a, b);
                }
            });
            return f;
        }
        bx(a, b, c) {
            let d = this.av(a, b, c);
            for (let e of fromEnum(this.an.values)) {
                e.h(b);
            }
            if (d != -1) {
                c.l(this, a, d, runOn(this, this.removeRefValueCore));
            }
            this.f.b(ComponentRenderer.platform, b);
        }
        av(a, b, c) {
            return c.h(b);
        }
        w(a, b, c) {
            if (c.b == null) {
                return this.aa(a, b, c);
            }
            else {
                let d = this.bi(a, b, c);
                this.b7(a, b, c, d);
            }
            return true;
        }
        b7(a, b, c, d) {
            let e = c.h(ComponentRenderer.platform);
            this.d.removeItemFromCollection(e, c.c, d, c.e);
            if (c.g != null && typeCast(DescriptionTreeNode.$, c.g) !== null) {
                let f = c.g.f;
                if (f >= 0) {
                    let g = b.j(f);
                    if (g != null) {
                        this.bx(a, g, b);
                    }
                }
            }
        }
        aa(a, b, c) {
            let d = this.d.getRootObject(a);
            if (d != null) {
                this.bx(a, d, b);
            }
            let e = false;
            this.d.removeRootItem(a, this.context, (f) => {
                e = true;
                if (f) {
                    this.ci(a, b);
                }
            });
            return e;
        }
        v(a, b, c) {
            if (c.b == null) {
                return this.j(a, b, c);
            }
            else {
                let d = this.bi(a, b, c);
                this.bp(a, b, c, d);
            }
            return true;
        }
        j(a, b, c) {
            if (!(typeCast(DescriptionTreeNode.$, c.f) !== null)) {
                throw new NotImplementedException(0);
            }
            let d = c.f;
            let e = false;
            this.d.replaceRootItem(a, d.h, this.context, (f) => {
                let g = this.d.getRootObject(a);
                b.k(a, d.f, g, d, runOn(this, this.b6), -1);
                let h = this.au(d);
                this.b4(a, b, h);
                e = true;
                if (f) {
                    this.ci(a, b);
                }
            });
            return e;
        }
        bp(a, b, c, d) {
            let e = c.h(ComponentRenderer.platform);
            let f = c.c.collectionElementType;
            if (typeCast(DescriptionTreeNode.$, c.f) !== null) {
                let g = c.f;
                if (g.b("Type")) {
                    f = g.a("Type").b;
                }
            }
            let h = this.bd(f, c.f, a, b, false, c.b.f);
            this.d.addItemToCollection(e, c.c, d, c.d, h);
        }
        bd(a, b, c, d, e, f) {
            if (this.r(a)) {
                return b;
            }
            let g = null;
            if (b != null && typeCast(DescriptionTreeNode.$, b) !== null) {
                let h = b;
                if (h.b("Name")) {
                    let i = h.a("Name").b;
                    if (!stringIsNullOrEmpty(i)) {
                        if (this.shouldNamespaceSystemRefValues) {
                            let j = "";
                            if (this.at != null && this.at.count > 0) {
                                for (let k = 0; k < this.at.count; k++) {
                                    j = this.at._inner[k](c);
                                }
                            }
                            if (!stringIsNullOrEmpty(j)) {
                                i = j + "/" + i;
                            }
                        }
                        if (this.ap.containsKey(i)) {
                            let l = this.ap.item(i);
                            g = l;
                        }
                    }
                }
                if (g == null) {
                    g = this.context.j(a, c);
                }
            }
            else {
                g = this.context.j(a, c);
            }
            if (b == null) {
                return g;
            }
            if (typeCast(DescriptionTreeNode.$, b) !== null) {
                let m = b;
                if (m.h == "EmbeddedRef") {
                    let n = "uuid";
                    let o = null;
                    for (let p = 0; p < m.e().count; p++) {
                        if (m.e()._inner[p].c == "RefType") {
                            n = m.e()._inner[p].b;
                        }
                        if (m.e()._inner[p].c == "Value") {
                            o = m.e()._inner[p].b;
                        }
                    }
                    if (o != null) {
                        for (let q = 0; q < this.as.count; q++) {
                            let r = this.as._inner[q](c, n, o);
                            if (r != null) {
                                return r;
                            }
                        }
                        return null;
                    }
                }
                else {
                    d.k(c, m.f, g, m, runOn(this, this.b6), f);
                    let s = this.au(m);
                    this.b4(c, d, s);
                    if (e) {
                        d.l(this, c, m.f, runOn(this, this.removeRefValueCore));
                    }
                }
            }
            if (typeof b === 'string' && a.toLowerCase() != "string") {
                return this.a3(a, b);
            }
            if (a == "object" || a == "Object") {
                return b;
            }
            return g;
        }
        r(a) {
            return a == "int" || a == "Int32" || a == "short" || a == "Int16" || a == "double" || a == "Double" || a == "float" || a == "Float" || a == "Single" || a == "single" || a == "DateTime" || a == "decimal" || a == "Decimal" || a == "long" || a == "Int64" || a == "byte" || a == "bool" || a == "string" || a == "String";
        }
        a3(a, b) {
            return this.context.f(a, b);
        }
        au(a) {
            let b = a.e();
            let c = new List$1(DescriptionTreeAction.$, 0);
            for (let d = 0; d < b.count; d++) {
                let e = new DescriptionTreeAction();
                e.a = 0;
                e.i = b._inner[d].c;
                e.c = b._inner[d].a;
                e.b = a;
                e.f = b._inner[d].b;
                c.add(e);
            }
            return c;
        }
        u(a, b, c) {
            if (c.b == null) {
                return this.m(a, b, c);
            }
            else {
                let d = this.bi(a, b, c);
                this.bu(a, b, c, d);
            }
            return true;
        }
        bu(a, b, c, d) {
            let e = c.h(ComponentRenderer.platform);
            this.d.clearCollection(d, e, c.c);
            if (c.g != null && typeCast(Array_$type, c.g) !== null) {
                let f = c.g;
                for (let g = 0; g < f.length; g++) {
                    let h = f[g];
                    if (h != null && typeCast(DescriptionTreeNode.$, h) !== null) {
                        let i = h.f;
                        if (i >= 0) {
                            let j = b.j(i);
                            if (j != null) {
                                this.bx(a, j, b);
                            }
                        }
                    }
                }
            }
        }
        cn(a, b, c, d) {
            if (this.aq.containsKey(b)) {
                for (let e of fromEnum(this.aq.item(b))) {
                    e(b, a, c);
                }
            }
            this.d.setPropertyValue(a, b, c, d);
        }
        bg(a, b) {
            return this.d.getPropertyValue(a, b);
        }
        m(a, b, c) {
            return this.l(a, b);
        }
        l(a, b) {
            let c = this.d.getRootObject(a);
            if (c != null) {
                this.bx(a, c, b);
            }
            let d = false;
            this.d.clearContainer(a, this.context, (e) => {
                d = true;
                if (e) {
                    this.ci(a, b);
                }
            });
            return d;
        }
    }
    ComponentRenderer.$t = /*@__PURE__*/ markType(ComponentRenderer, 'ComponentRenderer');
    ComponentRenderer.platform = 3;
    return ComponentRenderer;
})();
/**
 * @hidden
 */
export let ContainerState = /*@__PURE__*/ (() => {
    class ContainerState extends Base {
        constructor() {
            super(...arguments);
            this.i = null;
            this.e = new Dictionary$2(Number_$type, Base.$, 0);
            this.f = new Dictionary$2(Base.$, Number_$type, 0);
            this.d = new Dictionary$2(Number_$type, String_$type, 0);
            this.g = new Dictionary$2(Number_$type, HashSet$1.$.specialize(Number_$type), 0);
            this.c = new Dictionary$2(Number_$type, List$1.$.specialize(Number_$type), 0);
        }
        k(a, b, c, d, e, f) {
            if (d.b("Name")) {
                this.d.item(b, d.a("Name").b);
                e(a, this.d.item(b), c, false);
            }
            this.e.item(b, c);
            this.f.item(c, b);
            if (!this.g.containsKey(b)) {
                this.g.item(b, new HashSet$1(Number_$type, 0));
            }
            this.g.item(b).add_1(f);
            if (f >= 0) {
                if (!this.c.containsKey(f)) {
                    this.c.item(f, new List$1(Number_$type, 0));
                }
                this.c.item(f).add(b);
            }
        }
        a(a) {
            return this.e.containsKey(a);
        }
        b(a) {
            return this.f.containsKey(a);
        }
        j(a) {
            return this.e.item(a);
        }
        l(a, b, c, d) {
            if (this.c.containsKey(c)) {
                let e = this.c.item(c);
                for (let f = 0; f < e.count; f++) {
                    if (!this.g.containsKey(e._inner[f]) || this.g.item(e._inner[f]).count < 1 || (this.g.item(e._inner[f]).count == 1 && this.g.item(e._inner[f]).contains(c))) {
                        if (this.e.containsKey(e._inner[f])) {
                            a.bx(b, this.e.item(e._inner[f]), this);
                        }
                    }
                }
                this.c.removeItem(c);
            }
            let g = this.e.item(c);
            this.f.removeItem(g);
            this.e.removeItem(c);
            if (this.g.containsKey(c)) {
                this.g.removeItem(c);
            }
            if (this.d.containsKey(c)) {
                let h = this.d.item(c);
                this.d.removeItem(c);
                d(b, h, false);
            }
        }
        h(a) {
            if (this.f.containsKey(a)) {
                return this.f.item(a);
            }
            return -1;
        }
    }
    ContainerState.$t = /*@__PURE__*/ markType(ContainerState, 'ContainerState');
    return ContainerState;
})();
//# sourceMappingURL=ComponentRenderer_combined.js.map
