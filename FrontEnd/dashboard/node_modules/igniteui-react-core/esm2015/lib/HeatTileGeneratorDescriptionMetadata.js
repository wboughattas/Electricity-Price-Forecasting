/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { HeatTileGeneratorDescription } from "./HeatTileGeneratorDescription";
/**
 * @hidden
 */
export let HeatTileGeneratorDescriptionMetadata = /*@__PURE__*/ (() => {
    class HeatTileGeneratorDescriptionMetadata extends Base {
        static b(a) {
            if (HeatTileGeneratorDescriptionMetadata.a == null) {
                HeatTileGeneratorDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                HeatTileGeneratorDescriptionMetadata.c(a, HeatTileGeneratorDescriptionMetadata.a);
            }
        }
        static c(a, b) {
            b.item("YValues", "Array:double");
            b.item("XValues", "Array:double");
            b.item("Values", "Array:double");
            b.item("MinimumColor", "Color");
            b.item("MaximumColor", "Color");
            b.item("ScaleColors", "Array:string:Color");
            b.item("ScaleColorOffsets", "Array:double");
            b.item("BlurRadius", "Number:double");
            b.item("MaxBlurRadius", "Number:double");
            b.item("UseBlurRadiusAdjustedForZoom", "Boolean");
            b.item("UseGlobalMinMax", "Boolean");
            b.item("UseGlobalMinMaxAdjustedForZoom", "Boolean");
            b.item("MinimumValue", "Number:double");
            b.item("MaximumValue", "Number:double");
            b.item("LogarithmBase", "Number:double");
            b.item("UseLogarithmicScale", "Boolean");
            b.item("UseWebWorkers", "Boolean");
            b.item("WebWorkerScriptPath", "String");
            b.item("WebWorkerInstanceRef", "(w:WebWorkerInstance,wf:WebWorkerInstance)DataRef");
        }
        static d(a) {
            HeatTileGeneratorDescriptionMetadata.b(a);
            a.n("HeatTileGenerator", () => new HeatTileGeneratorDescription());
            a.m("HeatTileGenerator", HeatTileGeneratorDescriptionMetadata.a);
        }
    }
    HeatTileGeneratorDescriptionMetadata.$t = /*@__PURE__*/ markType(HeatTileGeneratorDescriptionMetadata, 'HeatTileGeneratorDescriptionMetadata');
    HeatTileGeneratorDescriptionMetadata.a = null;
    return HeatTileGeneratorDescriptionMetadata;
})();
//# sourceMappingURL=HeatTileGeneratorDescriptionMetadata.js.map
