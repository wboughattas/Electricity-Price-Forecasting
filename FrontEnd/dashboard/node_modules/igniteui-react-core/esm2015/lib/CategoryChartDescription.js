/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let CategoryChartDescription = /*@__PURE__*/ (() => {
    class CategoryChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.ik = null;
            this.ip = null;
            this.ii = null;
            this.ig = null;
            this.ib = 0;
            this.il = null;
            this.ih = null;
            this.ij = null;
            this.hn = false;
            this.im = null;
            this.io = null;
            this.hw = 0;
            this.hx = 0;
            this.hv = 0;
            this.hy = 0;
            this.hz = 0;
            this.hp = false;
            this.ic = 0;
            this.h1 = 0;
            this.h0 = 0;
            this.h2 = 0;
            this.hh = null;
            this.hi = null;
            this.ho = false;
            this.hl = false;
            this.hm = false;
        }
        get tooltipTemplateRef() {
            return this.ik;
        }
        set tooltipTemplateRef(a) {
            this.ik = a;
            this.e("TooltipTemplateRef");
        }
        get width() {
            return this.ip;
        }
        set width(a) {
            this.ip = a;
            this.e("Width");
        }
        get height() {
            return this.ii;
        }
        set height(a) {
            this.ii = a;
            this.e("Height");
        }
        get background() {
            return this.ig;
        }
        set background(a) {
            this.ig = a;
            this.e("Background");
        }
        get_type() {
            return "CategoryChart";
        }
        get transitionInDuration() {
            return this.ib;
        }
        set transitionInDuration(a) {
            this.ib = a;
            this.e("TransitionInDuration");
        }
        get transitionInEasingFunctionRef() {
            return this.il;
        }
        set transitionInEasingFunctionRef(a) {
            this.il = a;
            this.e("TransitionInEasingFunctionRef");
        }
        get chartType() {
            return this.ih;
        }
        set chartType(a) {
            this.ih = a;
            this.e("ChartType");
        }
        get markerCollisionAvoidance() {
            return this.ij;
        }
        set markerCollisionAvoidance(a) {
            this.ij = a;
            this.e("MarkerCollisionAvoidance");
        }
        get isTransitionInEnabled() {
            return this.hn;
        }
        set isTransitionInEnabled(a) {
            this.hn = a;
            this.e("IsTransitionInEnabled");
        }
        get transitionInMode() {
            return this.im;
        }
        set transitionInMode(a) {
            this.im = a;
            this.e("TransitionInMode");
        }
        get transitionInSpeedType() {
            return this.io;
        }
        set transitionInSpeedType(a) {
            this.io = a;
            this.e("TransitionInSpeedType");
        }
        get xAxisInterval() {
            return this.hw;
        }
        set xAxisInterval(a) {
            this.hw = a;
            this.e("XAxisInterval");
        }
        get xAxisMinorInterval() {
            return this.hx;
        }
        set xAxisMinorInterval(a) {
            this.hx = a;
            this.e("XAxisMinorInterval");
        }
        get xAxisGap() {
            return this.hv;
        }
        set xAxisGap(a) {
            this.hv = a;
            this.e("XAxisGap");
        }
        get xAxisOverlap() {
            return this.hy;
        }
        set xAxisOverlap(a) {
            this.hy = a;
            this.e("XAxisOverlap");
        }
        get yAxisInterval() {
            return this.hz;
        }
        set yAxisInterval(a) {
            this.hz = a;
            this.e("YAxisInterval");
        }
        get yAxisIsLogarithmic() {
            return this.hp;
        }
        set yAxisIsLogarithmic(a) {
            this.hp = a;
            this.e("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.ic;
        }
        set yAxisLogarithmBase(a) {
            this.ic = a;
            this.e("YAxisLogarithmBase");
        }
        get yAxisMinimumValue() {
            return this.h1;
        }
        set yAxisMinimumValue(a) {
            this.h1 = a;
            this.e("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.h0;
        }
        set yAxisMaximumValue(a) {
            this.h0 = a;
            this.e("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.h2;
        }
        set yAxisMinorInterval(a) {
            this.h2 = a;
            this.e("YAxisMinorInterval");
        }
        get negativeBrushes() {
            return this.hh;
        }
        set negativeBrushes(a) {
            this.hh = a;
            this.e("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.hi;
        }
        set negativeOutlines(a) {
            this.hi = a;
            this.e("NegativeOutlines");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.ho;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.ho = a;
            this.e("YAxisAbbreviateLargeNumbers");
        }
        get isCategoryHighlightingEnabled() {
            return this.hl;
        }
        set isCategoryHighlightingEnabled(a) {
            this.hl = a;
            this.e("IsCategoryHighlightingEnabled");
        }
        get isItemHighlightingEnabled() {
            return this.hm;
        }
        set isItemHighlightingEnabled(a) {
            this.hm = a;
            this.e("IsItemHighlightingEnabled");
        }
    }
    CategoryChartDescription.$t = /*@__PURE__*/ markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
})();
//# sourceMappingURL=CategoryChartDescription.js.map
