/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let BaseDataSourceDescription = /*@__PURE__*/ (() => {
    class BaseDataSourceDescription extends Description {
        constructor() {
            super();
            this.m = false;
            this.l = false;
            this.ah = 0;
            this.ai = 0;
            this.aj = 0;
            this.j = false;
            this.f = null;
            this.g = null;
            this.ap = null;
            this.n = false;
            this.p = false;
            this.k = false;
            this.r = false;
            this.q = false;
            this.o = false;
            this.t = false;
            this.s = false;
            this.u = false;
            this.ao = null;
            this.an = null;
        }
        get_type() {
            return "BaseDataSource";
        }
        get type() {
            return this.get_type();
        }
        get isReadOnly() {
            return this.m;
        }
        set isReadOnly(a) {
            this.m = a;
            this.e("IsReadOnly");
        }
        get isBatchingEnabled() {
            return this.l;
        }
        set isBatchingEnabled(a) {
            this.l = a;
            this.e("IsBatchingEnabled");
        }
        get actualCount() {
            return this.ah;
        }
        set actualCount(a) {
            this.ah = a;
            this.e("ActualCount");
        }
        get firstVisibleIndexRequested() {
            return this.ai;
        }
        set firstVisibleIndexRequested(a) {
            this.ai = a;
            this.e("FirstVisibleIndexRequested");
        }
        get lastVisibleIndexRequested() {
            return this.aj;
        }
        set lastVisibleIndexRequested(a) {
            this.aj = a;
            this.e("LastVisibleIndexRequested");
        }
        get deferAutoRefresh() {
            return this.j;
        }
        set deferAutoRefresh(a) {
            this.j = a;
            this.e("DeferAutoRefresh");
        }
        get primaryKey() {
            return this.f;
        }
        set primaryKey(a) {
            this.f = a;
            this.e("PrimaryKey");
        }
        get propertiesRequested() {
            return this.g;
        }
        set propertiesRequested(a) {
            this.g = a;
            this.e("PropertiesRequested");
        }
        get sectionHeaderDisplayMode() {
            return this.ap;
        }
        set sectionHeaderDisplayMode(a) {
            this.ap = a;
            this.e("SectionHeaderDisplayMode");
        }
        get isSectionCollapsable() {
            return this.n;
        }
        set isSectionCollapsable(a) {
            this.n = a;
            this.e("IsSectionCollapsable");
        }
        get isSectionExpandedDefault() {
            return this.p;
        }
        set isSectionExpandedDefault(a) {
            this.p = a;
            this.e("IsSectionExpandedDefault");
        }
        get includeSummaryRowsInSection() {
            return this.k;
        }
        set includeSummaryRowsInSection(a) {
            this.k = a;
            this.e("IncludeSummaryRowsInSection");
        }
        get isSectionSummaryRowsAtBottom() {
            return this.r;
        }
        set isSectionSummaryRowsAtBottom(a) {
            this.r = a;
            this.e("IsSectionSummaryRowsAtBottom");
        }
        get isSectionHeaderNormalRow() {
            return this.q;
        }
        set isSectionHeaderNormalRow(a) {
            this.q = a;
            this.e("IsSectionHeaderNormalRow");
        }
        get isSectionContentVisible() {
            return this.o;
        }
        set isSectionContentVisible(a) {
            this.o = a;
            this.e("IsSectionContentVisible");
        }
        get shouldEmitSectionHeaders() {
            return this.t;
        }
        set shouldEmitSectionHeaders(a) {
            this.t = a;
            this.e("ShouldEmitSectionHeaders");
        }
        get shouldEmitSectionFooters() {
            return this.s;
        }
        set shouldEmitSectionFooters(a) {
            this.s = a;
            this.e("ShouldEmitSectionFooters");
        }
        get shouldEmitShiftedRows() {
            return this.u;
        }
        set shouldEmitShiftedRows(a) {
            this.u = a;
            this.e("ShouldEmitShiftedRows");
        }
        get schemaChangedRef() {
            return this.ao;
        }
        set schemaChangedRef(a) {
            this.ao = a;
            this.e("SchemaChangedRef");
        }
        get rowExpansionChangedRef() {
            return this.an;
        }
        set rowExpansionChangedRef(a) {
            this.an = a;
            this.e("RowExpansionChangedRef");
        }
    }
    BaseDataSourceDescription.$t = /*@__PURE__*/ markType(BaseDataSourceDescription, 'BaseDataSourceDescription', Description.$);
    return BaseDataSourceDescription;
})();
//# sourceMappingURL=BaseDataSourceDescription.js.map
