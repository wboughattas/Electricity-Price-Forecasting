/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { MarkerSeriesDescription } from "./MarkerSeriesDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let ScatterBaseDescription = /*@__PURE__*/ (() => {
    class ScatterBaseDescription extends MarkerSeriesDescription {
        constructor() {
            super();
            this.cq = null;
            this.cs = null;
            this.cr = null;
            this.ct = null;
            this.cp = null;
            this.co = null;
            this.cm = null;
            this.ce = 0;
            this.ch = 0;
            this.cn = null;
            this.ci = 0;
            this.cg = 0;
        }
        get_type() {
            return "ScatterBase";
        }
        get xAxisRef() {
            return this.cq;
        }
        set xAxisRef(a) {
            this.cq = a;
            this.e("XAxisRef");
        }
        get yAxisRef() {
            return this.cs;
        }
        set yAxisRef(a) {
            this.cs = a;
            this.e("YAxisRef");
        }
        get xMemberPath() {
            return this.cr;
        }
        set xMemberPath(a) {
            this.cr = a;
            this.e("XMemberPath");
        }
        get yMemberPath() {
            return this.ct;
        }
        set yMemberPath(a) {
            this.ct = a;
            this.e("YMemberPath");
        }
        get trendLineType() {
            return this.cp;
        }
        set trendLineType(a) {
            this.cp = a;
            this.e("TrendLineType");
        }
        get trendLineBrush() {
            return this.co;
        }
        set trendLineBrush(a) {
            this.co = a;
            this.e("TrendLineBrush");
        }
        get actualTrendLineBrush() {
            return this.cm;
        }
        set actualTrendLineBrush(a) {
            this.cm = a;
            this.e("ActualTrendLineBrush");
        }
        get trendLineThickness() {
            return this.ce;
        }
        set trendLineThickness(a) {
            this.ce = a;
            this.e("TrendLineThickness");
        }
        get trendLinePeriod() {
            return this.ch;
        }
        set trendLinePeriod(a) {
            this.ch = a;
            this.e("TrendLinePeriod");
        }
        get markerCollisionAvoidance() {
            return this.cn;
        }
        set markerCollisionAvoidance(a) {
            this.cn = a;
            this.e("MarkerCollisionAvoidance");
        }
        get trendLineZIndex() {
            return this.ci;
        }
        set trendLineZIndex(a) {
            this.ci = a;
            this.e("TrendLineZIndex");
        }
        get maximumMarkers() {
            return this.cg;
        }
        set maximumMarkers(a) {
            this.cg = a;
            this.e("MaximumMarkers");
        }
    }
    ScatterBaseDescription.$t = /*@__PURE__*/ markType(ScatterBaseDescription, 'ScatterBaseDescription', MarkerSeriesDescription.$);
    return ScatterBaseDescription;
})();
//# sourceMappingURL=ScatterBaseDescription.js.map
