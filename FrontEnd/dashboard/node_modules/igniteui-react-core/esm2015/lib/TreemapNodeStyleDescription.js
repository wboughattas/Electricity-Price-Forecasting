/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let TreemapNodeStyleDescription = /*@__PURE__*/ (() => {
    class TreemapNodeStyleDescription extends Description {
        constructor() {
            super();
            this.ab = null;
            this.aa = null;
            this.ad = null;
            this.ae = null;
            this.ai = null;
            this.ac = null;
            this.h = 0;
            this.j = 0;
            this.i = 0;
            this.g = 0;
            this.l = 0;
            this.n = 0;
            this.m = 0;
            this.k = 0;
            this.f = 0;
            this.af = null;
            this.ag = null;
            this.z = null;
            this.ah = null;
            this.o = 0;
        }
        get_type() {
            return "TreemapNodeStyle";
        }
        get type() {
            return this.get_type();
        }
        get headerHoverBackground() {
            return this.ab;
        }
        set headerHoverBackground(a) {
            this.ab = a;
            this.e("HeaderHoverBackground");
        }
        get headerBackground() {
            return this.aa;
        }
        set headerBackground(a) {
            this.aa = a;
            this.e("HeaderBackground");
        }
        get headerTextColor() {
            return this.ad;
        }
        set headerTextColor(a) {
            this.ad = a;
            this.e("HeaderTextColor");
        }
        get label() {
            return this.ae;
        }
        set label(a) {
            this.ae = a;
            this.e("Label");
        }
        get textColor() {
            return this.ai;
        }
        set textColor(a) {
            this.ai = a;
            this.e("TextColor");
        }
        get headerHoverTextColor() {
            return this.ac;
        }
        set headerHoverTextColor(a) {
            this.ac = a;
            this.e("HeaderHoverTextColor");
        }
        get headerLabelLeftMargin() {
            return this.h;
        }
        set headerLabelLeftMargin(a) {
            this.h = a;
            this.e("HeaderLabelLeftMargin");
        }
        get headerLabelTopMargin() {
            return this.j;
        }
        set headerLabelTopMargin(a) {
            this.j = a;
            this.e("HeaderLabelTopMargin");
        }
        get headerLabelRightMargin() {
            return this.i;
        }
        set headerLabelRightMargin(a) {
            this.i = a;
            this.e("HeaderLabelRightMargin");
        }
        get headerLabelBottomMargin() {
            return this.g;
        }
        set headerLabelBottomMargin(a) {
            this.g = a;
            this.e("HeaderLabelBottomMargin");
        }
        get labelLeftMargin() {
            return this.l;
        }
        set labelLeftMargin(a) {
            this.l = a;
            this.e("LabelLeftMargin");
        }
        get labelTopMargin() {
            return this.n;
        }
        set labelTopMargin(a) {
            this.n = a;
            this.e("LabelTopMargin");
        }
        get labelRightMargin() {
            return this.m;
        }
        set labelRightMargin(a) {
            this.m = a;
            this.e("LabelRightMargin");
        }
        get labelBottomMargin() {
            return this.k;
        }
        set labelBottomMargin(a) {
            this.k = a;
            this.e("LabelBottomMargin");
        }
        get headerHeight() {
            return this.f;
        }
        set headerHeight(a) {
            this.f = a;
            this.e("HeaderHeight");
        }
        get labelHorizontalAlignment() {
            return this.af;
        }
        set labelHorizontalAlignment(a) {
            this.af = a;
            this.e("LabelHorizontalAlignment");
        }
        get labelVerticalAlignment() {
            return this.ag;
        }
        set labelVerticalAlignment(a) {
            this.ag = a;
            this.e("LabelVerticalAlignment");
        }
        get fill() {
            return this.z;
        }
        set fill(a) {
            this.z = a;
            this.e("Fill");
        }
        get outline() {
            return this.ah;
        }
        set outline(a) {
            this.ah = a;
            this.e("Outline");
        }
        get strokeThickness() {
            return this.o;
        }
        set strokeThickness(a) {
            this.o = a;
            this.e("StrokeThickness");
        }
    }
    TreemapNodeStyleDescription.$t = /*@__PURE__*/ markType(TreemapNodeStyleDescription, 'TreemapNodeStyleDescription', Description.$);
    return TreemapNodeStyleDescription;
})();
//# sourceMappingURL=TreemapNodeStyleDescription.js.map
