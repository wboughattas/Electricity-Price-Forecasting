/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumericAxisBaseDescription = /*@__PURE__*/ (() => {
    class NumericAxisBaseDescription extends AxisDescription {
        constructor() {
            super();
            this.di = 0;
            this.dc = 0;
            this.df = 0;
            this.dh = 0;
            this.db = 0;
            this.de = 0;
            this.dg = 0;
            this.da = 0;
            this.dj = 0;
            this.dd = 0;
            this.dk = 0;
            this.c6 = false;
            this.c5 = false;
            this.dx = 0;
            this.c4 = false;
            this.d1 = null;
            this.d0 = null;
            this.dz = null;
            this.d2 = null;
        }
        get_type() {
            return "NumericAxisBase";
        }
        get minimumValue() {
            return this.di;
        }
        set minimumValue(a) {
            this.di = a;
            this.e("MinimumValue");
        }
        get actualMinimumValue() {
            return this.dc;
        }
        set actualMinimumValue(a) {
            this.dc = a;
            this.e("ActualMinimumValue");
        }
        get actualVisibleMinimumValue() {
            return this.df;
        }
        set actualVisibleMinimumValue(a) {
            this.df = a;
            this.e("ActualVisibleMinimumValue");
        }
        get maximumValue() {
            return this.dh;
        }
        set maximumValue(a) {
            this.dh = a;
            this.e("MaximumValue");
        }
        get actualMaximumValue() {
            return this.db;
        }
        set actualMaximumValue(a) {
            this.db = a;
            this.e("ActualMaximumValue");
        }
        get actualVisibleMaximumValue() {
            return this.de;
        }
        set actualVisibleMaximumValue(a) {
            this.de = a;
            this.e("ActualVisibleMaximumValue");
        }
        get interval() {
            return this.dg;
        }
        set interval(a) {
            this.dg = a;
            this.e("Interval");
        }
        get actualInterval() {
            return this.da;
        }
        set actualInterval(a) {
            this.da = a;
            this.e("ActualInterval");
        }
        get minorInterval() {
            return this.dj;
        }
        set minorInterval(a) {
            this.dj = a;
            this.e("MinorInterval");
        }
        get actualMinorInterval() {
            return this.dd;
        }
        set actualMinorInterval(a) {
            this.dd = a;
            this.e("ActualMinorInterval");
        }
        get referenceValue() {
            return this.dk;
        }
        set referenceValue(a) {
            this.dk = a;
            this.e("ReferenceValue");
        }
        get isLogarithmic() {
            return this.c6;
        }
        set isLogarithmic(a) {
            this.c6 = a;
            this.e("IsLogarithmic");
        }
        get actualIsLogarithmic() {
            return this.c5;
        }
        set actualIsLogarithmic(a) {
            this.c5 = a;
            this.e("ActualIsLogarithmic");
        }
        get logarithmBase() {
            return this.dx;
        }
        set logarithmBase(a) {
            this.dx = a;
            this.e("LogarithmBase");
        }
        get abbreviateLargeNumbers() {
            return this.c4;
        }
        set abbreviateLargeNumbers(a) {
            this.c4 = a;
            this.e("AbbreviateLargeNumbers");
        }
        get actualMinimumValueChangeRef() {
            return this.d1;
        }
        set actualMinimumValueChangeRef(a) {
            this.d1 = a;
            this.e("ActualMinimumValueChangeRef");
        }
        get actualMaximumValueChangeRef() {
            return this.d0;
        }
        set actualMaximumValueChangeRef(a) {
            this.d0 = a;
            this.e("ActualMaximumValueChangeRef");
        }
        get actualIntervalChangeRef() {
            return this.dz;
        }
        set actualIntervalChangeRef(a) {
            this.dz = a;
            this.e("ActualIntervalChangeRef");
        }
        get actualMinorIntervalChangeRef() {
            return this.d2;
        }
        set actualMinorIntervalChangeRef(a) {
            this.d2 = a;
            this.e("ActualMinorIntervalChangeRef");
        }
    }
    NumericAxisBaseDescription.$t = /*@__PURE__*/ markType(NumericAxisBaseDescription, 'NumericAxisBaseDescription', AxisDescription.$);
    return NumericAxisBaseDescription;
})();
//# sourceMappingURL=NumericAxisBaseDescription.js.map
