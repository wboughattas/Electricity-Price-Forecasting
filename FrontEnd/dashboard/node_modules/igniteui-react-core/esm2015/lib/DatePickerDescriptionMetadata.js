/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ValueChangedEventArgsDescriptionMetadata } from "./ValueChangedEventArgsDescriptionMetadata";
import { DatePickerDescription } from "./DatePickerDescription";
/**
 * @hidden
 */
export let DatePickerDescriptionMetadata = /*@__PURE__*/ (() => {
    class DatePickerDescriptionMetadata extends Base {
        static b(a) {
            if (DatePickerDescriptionMetadata.a == null) {
                DatePickerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DatePickerDescriptionMetadata.c(a, DatePickerDescriptionMetadata.a);
                ValueChangedEventArgsDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("Value", "Date");
            b.item("Density", "ExportedType:string:ControlDisplayDensity");
            b.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            b.item("TextFontFamily", "(w:TextFontFamily/FontFamilyTransform,wf:TextFontFamily,web:textStyle/FontFamilyTransform)String");
            b.item("TextFontSize", "(w:TextFontSize,wf:TextFontSize,web:textStyle/FontSizeTransform)Number:double");
            b.item("TextFontStyle", "(w:TextFontStyle/FontStyleTransform,wf:TextFontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            b.item("TextFontWeight", "(w:TextFontWeight/FontWeightTransform,wf:TextFontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            b.item("TextColor", "Brush");
            b.item("IconColor", "Brush");
            b.item("ShowClearButton", "Boolean");
            b.item("ValueChangedRef", "EventRef::valueChanged");
        }
        static d(a) {
            DatePickerDescriptionMetadata.b(a);
            a.n("DatePicker", () => new DatePickerDescription());
            a.m("DatePicker", DatePickerDescriptionMetadata.a);
        }
    }
    DatePickerDescriptionMetadata.$t = /*@__PURE__*/ markType(DatePickerDescriptionMetadata, 'DatePickerDescriptionMetadata');
    DatePickerDescriptionMetadata.a = null;
    return DatePickerDescriptionMetadata;
})();
//# sourceMappingURL=DatePickerDescriptionMetadata.js.map
