/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryAxisBaseDescription } from "./CategoryAxisBaseDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let TimeAxisBaseDescription = /*@__PURE__*/ (() => {
    class TimeAxisBaseDescription extends CategoryAxisBaseDescription {
        constructor() {
            super();
            this.dt = null;
            this.dg = false;
            this.dj = new Date();
            this.di = new Date();
            this.dl = new Date();
            this.dk = new Date();
            this.ds = null;
            this.dr = null;
        }
        get_type() {
            return "TimeAxisBase";
        }
        get dateTimeMemberPath() {
            return this.dt;
        }
        set dateTimeMemberPath(a) {
            this.dt = a;
            this.e("DateTimeMemberPath");
        }
        get isDataPreSorted() {
            return this.dg;
        }
        set isDataPreSorted(a) {
            this.dg = a;
            this.e("IsDataPreSorted");
        }
        get actualMinimumValue() {
            return this.dj;
        }
        set actualMinimumValue(a) {
            this.dj = a;
            this.e("ActualMinimumValue");
        }
        get actualMaximumValue() {
            return this.di;
        }
        set actualMaximumValue(a) {
            this.di = a;
            this.e("ActualMaximumValue");
        }
        get minimumValue() {
            return this.dl;
        }
        set minimumValue(a) {
            this.dl = a;
            this.e("MinimumValue");
        }
        get maximumValue() {
            return this.dk;
        }
        set maximumValue(a) {
            this.dk = a;
            this.e("MaximumValue");
        }
        get actualMinimumValueChangeRef() {
            return this.ds;
        }
        set actualMinimumValueChangeRef(a) {
            this.ds = a;
            this.e("ActualMinimumValueChangeRef");
        }
        get actualMaximumValueChangeRef() {
            return this.dr;
        }
        set actualMaximumValueChangeRef(a) {
            this.dr = a;
            this.e("ActualMaximumValueChangeRef");
        }
    }
    TimeAxisBaseDescription.$t = /*@__PURE__*/ markType(TimeAxisBaseDescription, 'TimeAxisBaseDescription', CategoryAxisBaseDescription.$);
    return TimeAxisBaseDescription;
})();
//# sourceMappingURL=TimeAxisBaseDescription.js.map
