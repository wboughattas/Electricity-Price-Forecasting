/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let GridCellValueChangedEventArgsDescription = /*@__PURE__*/ (() => {
    class GridCellValueChangedEventArgsDescription extends Description {
        constructor() {
            super();
            this.h = 0;
            this.f = null;
            this.l = null;
            this.k = null;
            this.j = null;
            this.m = null;
        }
        get_type() {
            return "GridCellValueChangedEventArgs";
        }
        get type() {
            return this.get_type();
        }
        get transactionID() {
            return this.h;
        }
        set transactionID(a) {
            this.h = a;
            this.e("TransactionID");
        }
        get column() {
            return this.f;
        }
        set column(a) {
            this.f = a;
            this.e("Column");
        }
        get oldValueRef() {
            return this.l;
        }
        set oldValueRef(a) {
            this.l = a;
            this.e("OldValueRef");
        }
        get newValueRef() {
            return this.k;
        }
        set newValueRef(a) {
            this.k = a;
            this.e("NewValueRef");
        }
        get errorMessage() {
            return this.j;
        }
        set errorMessage(a) {
            this.j = a;
            this.e("ErrorMessage");
        }
        get pendingState() {
            return this.m;
        }
        set pendingState(a) {
            this.m = a;
            this.e("PendingState");
        }
    }
    GridCellValueChangedEventArgsDescription.$t = /*@__PURE__*/ markType(GridCellValueChangedEventArgsDescription, 'GridCellValueChangedEventArgsDescription', Description.$);
    return GridCellValueChangedEventArgsDescription;
})();
//# sourceMappingURL=GridCellValueChangedEventArgsDescription.js.map
