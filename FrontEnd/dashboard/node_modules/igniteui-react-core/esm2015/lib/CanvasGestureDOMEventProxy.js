/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseDOMEventProxy } from "./BaseDOMEventProxy";
import { TypeRegistrar, runOn, delegateCombine, Point_$type, String_$type, Delegate_$type, Number_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { List$1 } from "./List$1";
import { TouchPointInfo } from "./TouchPointInfo";
import { DOMExecutionContext } from "./DOMExecutionContext";
import { TouchGestureRecognizer } from "./TouchGestureRecognizer";
import { Rect } from "./Rect";
/**
 * @hidden
 */
export let CanvasGestureDOMEventProxy = /*@__PURE__*/ (() => {
    class CanvasGestureDOMEventProxy extends BaseDOMEventProxy {
        constructor(a, b, c) {
            super();
            this.dc = 0;
            this.dd = "";
            this.cz = null;
            this.da = null;
            this.c5 = new Dictionary$2(String_$type, List$1.$.specialize(Delegate_$type), 0);
            this.d1 = null;
            this.c0 = false;
            this.c6 = new List$1(Number_$type, 0);
            this.c7 = new List$1(Point_$type, 0);
            this.c2 = false;
            this.c8 = new List$1(TouchPointInfo.$, 0);
            this.br = c;
            this.bx = b;
            this.cz = new TouchGestureRecognizer(new DOMExecutionContext(b));
            let d = this.cz;
            d.holdEnding = delegateCombine(d.holdEnding, runOn(this, this.df));
            let e = this.cz;
            e.holdStarting = delegateCombine(e.holdStarting, runOn(this, this.dg));
            let f = this.cz;
            f.zoomStarting = delegateCombine(f.zoomStarting, runOn(this, this.dn));
            let g = this.cz;
            g.zoomEnding = delegateCombine(g.zoomEnding, runOn(this, this.dm));
            let h = this.cz;
            h.panStarting = delegateCombine(h.panStarting, runOn(this, this.dl));
            let i = this.cz;
            i.panEnding = delegateCombine(i.panEnding, runOn(this, this.dk));
            let j = this.cz;
            j.manipulationStarting = delegateCombine(j.manipulationStarting, runOn(this, this.dj));
            let k = this.cz;
            k.manipulationChanging = delegateCombine(k.manipulationChanging, runOn(this, this.dh));
            let l = this.cz;
            l.manipulationEnding = delegateCombine(l.manipulationEnding, runOn(this, this.di));
            let m = this.cz;
            m.doubleTapped = delegateCombine(m.doubleTapped, runOn(this, this.de));
            let n = this.cz;
            n.flingStarting = delegateCombine(n.flingStarting, runOn(this, this.c1));
            this.al = (o) => true;
            this.aa = true;
            CanvasGestureDOMEventProxy.db++;
            this.dc = CanvasGestureDOMEventProxy.db;
            this.dd = ".DOMProxy" + this.dc.toString();
            this.bc = 0;
            this.by = a;
            BaseDOMEventProxy.bn = false;
            try {
                BaseDOMEventProxy.bn = (window.navigator.msPointerEnabled && MSGesture !== undefined);
            }
            catch (o) {
            }
            BaseDOMEventProxy.bo = false;
            try {
                BaseDOMEventProxy.bo = (window.PointerEvent || window.navigator.pointerEnabled);
            }
            catch (p) {
            }
            if (BaseDOMEventProxy.bs) {
                this.aa = false;
            }
            BaseDOMEventProxy.b6 = this.b5();
            BaseDOMEventProxy.b3 = this.b4();
            this.ap(this.by, "");
            this.ak = (q) => true;
        }
        d() {
            let a = new CanvasGestureDOMEventProxy(this.by, this.bx, this.br);
            a.aa = this.aa;
            a.al = this.al;
            return a;
        }
        c1(a, b) {
            return this.ad({ $type: Point_$type, x: b.a, y: b.b }, b.h, b.i);
        }
        de(a, b) {
            this.av({ $type: Point_$type, x: b.a, y: b.b });
        }
        get_aj() {
            return true;
        }
        di(a, b) {
            if (this.cz.n == 0) {
                this.az({ $type: Point_$type, x: b.a, y: b.b }, b.d);
                this.cl();
            }
        }
        dh(a, b) {
            if (this.cz.n == 2) {
                this.a6({ $type: Point_$type, x: b.a, y: b.b }, b.d);
                this.a9({ $type: Point_$type, x: b.a, y: b.b }, b.d, b.e, b.c);
            }
            if (this.cz.n == 1 || this.cz.n == 5) {
                this.at({ $type: Point_$type, x: b.a, y: b.b }, true);
                this.ax({ $type: Point_$type, x: b.a, y: b.b });
            }
        }
        dj(a, b) {
        }
        dk(a, b) {
            this.c0 = false;
            if (this.cz.n == 0) {
                this.as({ $type: Point_$type, x: b.a, y: b.b }, true);
                this.aw({ $type: Point_$type, x: b.a, y: b.b });
            }
        }
        dl(a, b) {
            this.ay({ $type: Point_$type, x: b.a, y: b.b });
        }
        dm(a, b) {
            this.a8({ $type: Point_$type, x: b.a, y: b.b }, b.d, b.e, b.c);
        }
        dn(a, b) {
            this.a7({ $type: Point_$type, x: b.a, y: b.b }, 1);
            this.ba({ $type: Point_$type, x: b.a, y: b.b }, 1, 1, 1);
        }
        dg(a, b) {
            this.c0 = true;
            this.a0({ $type: Point_$type, x: b.a, y: b.b });
        }
        df(a, b) {
            if (this.cz.n == 0) {
                this.as({ $type: Point_$type, x: b.a, y: b.b }, true);
            }
        }
        static c3() {
            BaseDOMEventProxy.bn = false;
            try {
                BaseDOMEventProxy.bn = (window.navigator.msPointerEnabled && MSGesture !== undefined);
            }
            catch (a) {
            }
            BaseDOMEventProxy.bo = false;
            try {
                BaseDOMEventProxy.bo = (window.PointerEvent || window.navigator.pointerEnabled);
            }
            catch (b) {
            }
            return BaseDOMEventProxy.bs;
        }
        dp(a, b, c) {
        }
        ap(a, b) {
            let c = a;
            if (!this.bx.supportsDOMEvents()) {
                return;
            }
            let d = this.dd + b;
            let e = new List$1(Delegate_$type, 0);
            this.c5.addItem(d, e);
            this.dp(a, b, e);
            if (!BaseDOMEventProxy.bs) {
                e.add(c.listen("mousemove", runOn(this, this.cd)));
                e.add(c.listen("mouseleave", runOn(this, this.cc)));
                e.add(c.listen("mousedown", runOn(this, this.cb)));
                e.add(c.listen("mouseup", runOn(this, this.cf)));
                e.add(this.bx.globalListen("window", "mouseup", runOn(this, this.ct)));
            }
            e.add(c.listen("keydown", runOn(this, this.b8)));
            e.add(c.listen("keyup", runOn(this, this.ca)));
            if (BaseDOMEventProxy.bs) {
                let source_ = this.by.getNativeElement();
                BaseDOMEventProxy.cn(source_);
                let f = this.by.getNativeElement();
                if (BaseDOMEventProxy.bo) {
                    e.add(c.listen("pointerdown", runOn(this, this.ds)));
                    e.add(c.listen("pointerup", runOn(this, this.dv)));
                    e.add(c.listen("pointercancel", runOn(this, this.dr)));
                    e.add(c.listen("pointermove", runOn(this, this.dt)));
                    e.add(c.listen("pointerleave", runOn(this, this.du)));
                    e.add(c.listen("lostpointercapture", runOn(this, this.dq)));
                }
                else {
                    e.add(c.listen("MSPointerDown", runOn(this, this.ds)));
                    e.add(c.listen("MSPointerUp", runOn(this, this.dv)));
                    e.add(c.listen("MSPointerCancel", runOn(this, this.dr)));
                    e.add(c.listen("MSPointerMove", runOn(this, this.dt)));
                    e.add(c.listen("MSPointerLeave", runOn(this, this.du)));
                    e.add(c.listen("MSLostPointerCapture", runOn(this, this.dq)));
                }
            }
            else {
                e.add(c.listen("touchstart", runOn(this, this.dy)));
                e.add(c.listen("touchmove", runOn(this, this.dx)));
                e.add(c.listen("touchend", runOn(this, this.dw)));
            }
            if (this.br) {
                e.add(c.listen("wheel", runOn(this, this.cg)));
            }
            else {
                e.add(c.listen("DOMMouseScroll", runOn(this, this.ce)));
                e.add(c.listen("mousewheel", runOn(this, this.ce)));
            }
        }
        dv(e_) {
            let a = this.bl(e_);
            let b = this.c6.indexOf((e_.originalEvent.pointerId));
            if (b >= 0) {
                this.c6.removeAt(b);
                this.c7.removeAt(b);
                this.b2 = this.c6.count;
            }
            if (a) {
                this.dw(e_);
            }
            else {
                this.cf(e_);
            }
        }
        dq(e_) {
            let a = this.bl(e_);
        }
        dr(e_) {
            let a = this.bl(e_);
            let b = this.c6.indexOf((e_.originalEvent.pointerId));
            if (b >= 0) {
                this.c6.removeAt(b);
                this.c7.removeAt(b);
                this.b2 = this.c6.count;
            }
        }
        ds(e_) {
            let a = this.bl(e_);
            BaseDOMEventProxy.cm(e_);
            this.c6.add((e_.originalEvent.pointerId));
            this.c7.add({ $type: Point_$type, x: e_.pageX, y: e_.pageY });
            this.b2 = this.c6.count;
            if (a) {
                this.cs(e_);
            }
            else {
                this.cr(e_);
            }
            this.cq(e_);
            if (!this.c2 && this.ab(this.cx, a, false)) {
                let eventSource_ = this.by.getNativeElement();
                if (BaseDOMEventProxy.bo) {
                    eventSource_.setPointerCapture(e_.originalEvent.pointerId);
                }
                else {
                    eventSource_.msSetPointerCapture(e_.originalEvent.pointerId);
                }
            }
            if (a) {
                this.dy(e_);
            }
            else {
                this.cb(e_);
            }
        }
        dt(e_) {
            let a = this.bl(e_);
            BaseDOMEventProxy.cm(e_);
            this.cq(e_);
            this.cs(e_);
            let b = this.c6.indexOf((e_.originalEvent.pointerId));
            if (b >= 0) {
                this.c7._inner[b] = { $type: Point_$type, x: e_.pageX, y: e_.pageY };
            }
            if (this.c2 && this.ab(this.cx, a, false)) {
                let eventSource_ = this.by.getNativeElement();
                if (BaseDOMEventProxy.bo) {
                    eventSource_.setPointerCapture(e_.originalEvent.pointerId);
                }
                else {
                    eventSource_.msSetPointerCapture(e_.originalEvent.pointerId);
                }
            }
            if (a) {
                this.dx(e_);
            }
            else {
                this.cd(e_);
            }
        }
        du(e_) {
            let a = this.bl(e_);
            if (a) {
            }
            else {
                this.cc(e_);
            }
        }
        dy(e_) {
            this.bm = true;
            this.cq(e_);
            this.cs(e_);
            this.d1 = this.cw;
            if (this.ab(this.cx, true, false)) {
                if (!this.aa || this.b2 > 1) {
                    if (this.bq) {
                        this.bq = false;
                        this.b7();
                    }
                    this.co(e_);
                }
                else {
                    this.bq = true;
                    this.c0 = false;
                }
                this.a4(this.cx, false, true);
                this.a1(this.cx);
                this.au(this.cw, true);
                this.cz.a6(this.c9(e_));
            }
        }
        c9(e_) {
            let a = BaseDOMEventProxy.cy(this.by);
            let b = this.bf;
            let c = 0;
            let d = 0;
            if (Rect.l_op_Inequality(b, null)) {
                c = b.left;
                d = b.top;
            }
            this.c8.clear();
            if (BaseDOMEventProxy.bs) {
                let e = this.c6.count;
                for (let j_ = 0; j_ < e; j_++) {
                    let f = this.c6._inner[j_];
                    let g = this.c7._inner[j_];
                    let h = g.x;
                    let i = g.y;
                    let j = new TouchPointInfo(1);
                    j.a = (h - a.left) - b.left;
                    j.b = (i - a.top) - b.top;
                    this.c8.add(j);
                }
            }
            else {
                let k = (e_.originalEvent.targetTouches.length);
                for (let j_ = 0; j_ < k; j_++) {
                    let l = (e_.originalEvent.targetTouches[j_].pageX);
                    let m = (e_.originalEvent.targetTouches[j_].pageY);
                    let n = new TouchPointInfo(1);
                    n.a = (l - a.left) - c;
                    n.b = (m - a.top) - d;
                    this.c8.add(n);
                }
            }
            return this.c8;
        }
        dx(a) {
            this.bm = true;
            this.cq(a);
            this.cs(a);
            if (this.bq) {
                if ((this.ab(this.cx, true, false) && this.c4()) || this.c0 == true || this.cz.n == 2) {
                    this.bq = false;
                    this.b7();
                }
            }
            if ((this.c0 || this.cz.n == 2 || this.ab(this.cx, true, false)) && !this.bq) {
                this.c0 = true;
                this.co(a);
                this.cz.a6(this.c9(a));
            }
        }
        c4() {
            let a = { $type: Point_$type, x: this.d1.x - this.cw.x, y: this.d1.y - this.cw.y };
            if (Math.abs(a.x) > Math.abs(a.y)) {
                a.y = 0;
            }
            if (Math.abs(a.y) > Math.abs(a.x)) {
                a.x = 0;
            }
            return this.al(a);
        }
        dw(a) {
            this.bm = false;
            this.cq(a);
            this.cs(a);
            if (this.bq) {
                this.bq = false;
                this.b7();
            }
            let b = this.cz.n;
            let c = this.ab(this.cx, true, false) || b != 0;
            if (this.cz.n != 2 && this.cz.n != 5) {
                this.a4(this.cx, false, true);
                this.a5(this.cx);
            }
            let d = this.cz.n == 2;
            if (d) {
                c = true;
                this.as({ $type: Point_$type, x: this.cz.as, y: this.cz.at }, true);
            }
            this.cz.a6(this.c9(a));
            if (this.cz.n == 0) {
                this.cl();
            }
            if (!d && this.cz.n == 0) {
                this.as({ $type: Point_$type, x: this.cz.as, y: this.cz.at }, true);
            }
            if (this.cz.n != 0) {
                c = true;
            }
            if (c) {
                this.co(a);
            }
        }
        dz(a) {
            if (this.c5.containsKey(a)) {
                let b = this.c5.item(a);
                this.c5.removeItem(a);
                for (let c = 0; c < b.count; c++) {
                    b._inner[c]();
                }
                b.clear();
            }
        }
        bb(a, b) {
            let c = a;
            let d = this.dd + b;
            this.dz(d);
        }
        aq() {
            if (this.by == null) {
                return;
            }
            this.dz(this.dd);
            this.by = null;
        }
        static register() {
            TypeRegistrar.register("CanvasGestureDOMEventProxy", CanvasGestureDOMEventProxy.$);
        }
    }
    CanvasGestureDOMEventProxy.$t = /*@__PURE__*/ markType(CanvasGestureDOMEventProxy, 'CanvasGestureDOMEventProxy', BaseDOMEventProxy.$);
    CanvasGestureDOMEventProxy.db = 0;
    return CanvasGestureDOMEventProxy;
})();
//# sourceMappingURL=CanvasGestureDOMEventProxy.js.map
