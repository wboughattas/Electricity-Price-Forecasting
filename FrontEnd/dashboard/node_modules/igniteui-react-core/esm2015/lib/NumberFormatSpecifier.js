/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FormatSpecifier } from "./FormatSpecifier";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumberFormatSpecifier = /*@__PURE__*/ (() => {
    class NumberFormatSpecifier extends FormatSpecifier {
        constructor() {
            super();
            this.l = null;
            this.h = null;
            this.i = null;
            this.j = null;
            this.k = null;
            this.m = null;
            this.n = null;
            this.o = null;
            this.p = null;
            this.q = null;
            this.r = null;
            this.s = null;
            this.b = false;
            this.f = 0;
            this.e = 0;
            this.c = 0;
            this.g = 0;
            this.d = 0;
            this.b = true;
            this.f = -1;
            this.e = -1;
            this.g = -1;
            this.c = -1;
            this.d = -1;
        }
        a() {
            let a = {};
            if (this.h != null) {
                this.t(a, "compactDisplay", this.h);
            }
            if (this.i != null) {
                this.t(a, "currency", this.i);
            }
            if (this.j != null) {
                this.t(a, "currencyDisplay", this.j);
            }
            if (this.k != null) {
                this.t(a, "currencySign", this.k);
            }
            if (this.m != null) {
                this.t(a, "localeMatcher", this.m);
            }
            if (this.n != null) {
                this.t(a, "notation", this.n);
            }
            if (this.o != null) {
                this.t(a, "numberingSystem", this.o);
            }
            if (this.p != null) {
                this.t(a, "signDisplay", this.p);
            }
            if (this.q != null) {
                this.t(a, "style", this.q);
            }
            if (this.r != null) {
                this.t(a, "unit", this.r);
            }
            if (this.s != null) {
                this.t(a, "unitDisplay", this.s);
            }
            if (this.b != true) {
                this.t(a, "useGrouping", this.b);
            }
            if (this.f != -1) {
                this.t(a, "minimumIntegerDigits", this.f);
            }
            if (this.e != -1) {
                this.t(a, "minimumFractionDigits", this.e);
            }
            if (this.c != -1) {
                this.t(a, "maximumFractionDigits", this.c);
            }
            if (this.g != -1) {
                this.t(a, "minimumSignificantDigits", this.g);
            }
            if (this.d != -1) {
                this.t(a, "maximumSignificantDigits", this.d);
            }
            let locale_ = this.l;
            let options_ = a;
            return new Intl.NumberFormat(locale_, options_);
        }
        t(options_, propertyName_, value_) {
            options_[propertyName_] = value_;
        }
    }
    NumberFormatSpecifier.$t = /*@__PURE__*/ markType(NumberFormatSpecifier, 'NumberFormatSpecifier', FormatSpecifier.$);
    return NumberFormatSpecifier;
})();
//# sourceMappingURL=NumberFormatSpecifier.js.map
