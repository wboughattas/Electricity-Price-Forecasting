/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TileGeneratorDescription } from "./TileGeneratorDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let HeatTileGeneratorDescription = /*@__PURE__*/ (() => {
    class HeatTileGeneratorDescription extends TileGeneratorDescription {
        constructor() {
            super();
            this.k = null;
            this.j = null;
            this.i = null;
            this.al = null;
            this.ak = null;
            this.h = null;
            this.g = null;
            this.aa = 0;
            this.ac = 0;
            this.q = false;
            this.r = false;
            this.s = false;
            this.ae = 0;
            this.ad = 0;
            this.ab = 0;
            this.t = false;
            this.u = false;
            this.an = null;
            this.am = null;
        }
        get_type() {
            return "HeatTileGenerator";
        }
        get type() {
            return this.get_type();
        }
        get yValues() {
            return this.k;
        }
        set yValues(a) {
            this.k = a;
            this.e("YValues");
        }
        get xValues() {
            return this.j;
        }
        set xValues(a) {
            this.j = a;
            this.e("XValues");
        }
        get values() {
            return this.i;
        }
        set values(a) {
            this.i = a;
            this.e("Values");
        }
        get minimumColor() {
            return this.al;
        }
        set minimumColor(a) {
            this.al = a;
            this.e("MinimumColor");
        }
        get maximumColor() {
            return this.ak;
        }
        set maximumColor(a) {
            this.ak = a;
            this.e("MaximumColor");
        }
        get scaleColors() {
            return this.h;
        }
        set scaleColors(a) {
            this.h = a;
            this.e("ScaleColors");
        }
        get scaleColorOffsets() {
            return this.g;
        }
        set scaleColorOffsets(a) {
            this.g = a;
            this.e("ScaleColorOffsets");
        }
        get blurRadius() {
            return this.aa;
        }
        set blurRadius(a) {
            this.aa = a;
            this.e("BlurRadius");
        }
        get maxBlurRadius() {
            return this.ac;
        }
        set maxBlurRadius(a) {
            this.ac = a;
            this.e("MaxBlurRadius");
        }
        get useBlurRadiusAdjustedForZoom() {
            return this.q;
        }
        set useBlurRadiusAdjustedForZoom(a) {
            this.q = a;
            this.e("UseBlurRadiusAdjustedForZoom");
        }
        get useGlobalMinMax() {
            return this.r;
        }
        set useGlobalMinMax(a) {
            this.r = a;
            this.e("UseGlobalMinMax");
        }
        get useGlobalMinMaxAdjustedForZoom() {
            return this.s;
        }
        set useGlobalMinMaxAdjustedForZoom(a) {
            this.s = a;
            this.e("UseGlobalMinMaxAdjustedForZoom");
        }
        get minimumValue() {
            return this.ae;
        }
        set minimumValue(a) {
            this.ae = a;
            this.e("MinimumValue");
        }
        get maximumValue() {
            return this.ad;
        }
        set maximumValue(a) {
            this.ad = a;
            this.e("MaximumValue");
        }
        get logarithmBase() {
            return this.ab;
        }
        set logarithmBase(a) {
            this.ab = a;
            this.e("LogarithmBase");
        }
        get useLogarithmicScale() {
            return this.t;
        }
        set useLogarithmicScale(a) {
            this.t = a;
            this.e("UseLogarithmicScale");
        }
        get useWebWorkers() {
            return this.u;
        }
        set useWebWorkers(a) {
            this.u = a;
            this.e("UseWebWorkers");
        }
        get webWorkerScriptPath() {
            return this.an;
        }
        set webWorkerScriptPath(a) {
            this.an = a;
            this.e("WebWorkerScriptPath");
        }
        get webWorkerInstanceRef() {
            return this.am;
        }
        set webWorkerInstanceRef(a) {
            this.am = a;
            this.e("WebWorkerInstanceRef");
        }
    }
    HeatTileGeneratorDescription.$t = /*@__PURE__*/ markType(HeatTileGeneratorDescription, 'HeatTileGeneratorDescription', TileGeneratorDescription.$);
    return HeatTileGeneratorDescription;
})();
//# sourceMappingURL=HeatTileGeneratorDescription.js.map
