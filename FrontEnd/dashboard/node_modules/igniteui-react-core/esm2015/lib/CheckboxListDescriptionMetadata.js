/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CheckedChangedEventArgsDescriptionMetadata } from "./CheckedChangedEventArgsDescriptionMetadata";
import { SelectAllCheckboxChangedEventArgsDescriptionMetadata } from "./SelectAllCheckboxChangedEventArgsDescriptionMetadata";
import { CheckboxListDescription } from "./CheckboxListDescription";
/**
 * @hidden
 */
export let CheckboxListDescriptionMetadata = /*@__PURE__*/ (() => {
    class CheckboxListDescriptionMetadata extends Base {
        static b(a) {
            if (CheckboxListDescriptionMetadata.a == null) {
                CheckboxListDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                CheckboxListDescriptionMetadata.c(a, CheckboxListDescriptionMetadata.a);
                CheckedChangedEventArgsDescriptionMetadata.d(a);
                SelectAllCheckboxChangedEventArgsDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("Keys", "Collection:PrimaryKeyValue:GridSelectedKeysCollection:PrimaryKeyValue");
            b.item("PrimaryKey", "Array:string");
            b.item("DataSourceRef", "(w:ItemsSource,wf:ItemsSource)DataRef::object");
            b.item("DataMemberPath", "String");
            b.item("SelectedMemberPath", "String");
            b.item("FilterPlaceholderText", "String");
            b.item("SearchInputType", "ExportedType:string:InputGroupDisplayType");
            b.item("RowHeight", "Number:int");
            b.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
            b.item("CellFontSize", "(w:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
            b.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
            b.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
            b.item("IndexType", "ExportedType:string:CheckboxListIndexType");
            b.item("BaseTheme", "ExportedType:string:BaseControlTheme");
            b.item("Density", "ExportedType:string:ControlDisplayDensity");
            b.item("SelectAllCaption", "String");
            b.item("SelectAllCaptionTextColor", "Brush");
            b.item("ActualSelectAllCaptionTextColor", "Brush");
            b.item("ShowSelectAll", "Boolean");
            b.item("BackgroundColor", "Brush");
            b.item("TextColor", "Brush");
            b.item("CheckedChangedRef", "EventRef::checkedChanged");
            b.item("SelectAllCheckboxChangedRef", "EventRef::selectAllCheckboxChanged");
        }
        static d(a) {
            CheckboxListDescriptionMetadata.b(a);
            a.n("CheckboxList", () => new CheckboxListDescription());
            a.m("CheckboxList", CheckboxListDescriptionMetadata.a);
        }
    }
    CheckboxListDescriptionMetadata.$t = /*@__PURE__*/ markType(CheckboxListDescriptionMetadata, 'CheckboxListDescriptionMetadata');
    CheckboxListDescriptionMetadata.a = null;
    return CheckboxListDescriptionMetadata;
})();
//# sourceMappingURL=CheckboxListDescriptionMetadata.js.map
