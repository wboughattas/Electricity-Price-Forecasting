/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, NotSupportedException, typeCast, typeGetValue, markType } from "./type";
import { TypeDescriptionContext } from "./TypeDescriptionContext";
import { DescriptionTreeNode } from "./DescriptionTreeNode";
import { DescriptionSerializerBuilder } from "./DescriptionSerializerBuilder";
import { DescriptionTreeBuilder } from "./DescriptionTreeBuilder";
import { DescriptionResult } from "./DescriptionResult";
import { JsonDictionaryParser } from "./JsonDictionaryParser";
import { JsonDictionaryObject } from "./JsonDictionaryObject";
import { EmbeddedRefDescription } from "./EmbeddedRefDescription";
import { JsonDictionaryArray } from "./JsonDictionaryArray";
import { PointDescription } from "./PointDescription";
import { SizeDescription } from "./SizeDescription";
import { RectDescription } from "./RectDescription";
import { NotImplementedException } from "./NotImplementedException";
import { stringEndsWith, stringStartsWith, stringReplace } from "./string";
/**
 * @hidden
 */
export let DescriptionSerializer = /*@__PURE__*/ (() => {
    class DescriptionSerializer extends Base {
        constructor() {
            super();
            this.e = false;
        }
        k(a, b) {
            let c = DescriptionTreeBuilder.createTree(a, b);
            let d = new DescriptionSerializerBuilder();
            this.l(a, c, d);
            return d.toString();
        }
        o(a, b, c) {
            this.l(a, b, c);
        }
        c(a, b) {
            let c = new JsonDictionaryParser();
            let d = c.parse(b);
            return this.d(a, d, false);
        }
        d(a, b, c) {
            if (!(typeCast(JsonDictionaryObject.$, b) !== null)) {
                throw new NotSupportedException(1, "expected an object at the root of the json");
            }
            let d = b;
            if (c) {
                this.e = true;
            }
            let e = this.b(a, d);
            this.e = false;
            return e;
        }
        b(a, b, c = 8) {
            if (!b.c("type")) {
                if (b.c("refType")) {
                    let d = new EmbeddedRefDescription();
                    d.refType = b.item("refType").value;
                    d.value = b.item("id").value;
                    let e = new DescriptionResult();
                    e.result = d;
                    return e;
                }
                else {
                    throw new NotSupportedException(1, "expected type to be defined for the json object");
                }
            }
            let f = new DescriptionResult();
            let g = b.item("type").value;
            let h = a.i(g);
            f.result = h;
            if (h == null) {
                f.d("couldn't find registered description for type: " + g);
                return f;
            }
            let i = b.a();
            for (let j = 0; j < i.length; j++) {
                let k = i[j];
                let l = a.b(g, TypeDescriptionContext.l(k));
                if (l == null) {
                    if (TypeDescriptionContext.l(k) == "Name") {
                        let m = "string";
                        let n = b.item(k);
                        let o = this.f(f, a, n, m);
                        h.name = o;
                    }
                    continue;
                }
                let p = b.item(k);
                if (l.knownType == 14 || l.knownType == 11 || l.knownType == 12) {
                    let q = p;
                    switch (l.knownType) {
                        case 14:
                            q = this.h(a, p);
                            break;
                        case 12:
                            q = this.i(a, p);
                            break;
                        case 11:
                            q = this.g(a, p);
                            break;
                    }
                    a.o(h, k, q);
                }
                else if (typeCast(JsonDictionaryObject.$, p) !== null) {
                    let r = p;
                    let s = this.b(a, r, l.knownType);
                    f.e(s);
                    a.o(h, k, s.result);
                }
                else if (typeCast(JsonDictionaryArray.$, p) !== null) {
                    let t = p;
                    let u = "string";
                    if (l.knownType == 10) {
                        u = l.specificExternalType;
                    }
                    if (l.knownType == 9) {
                        u = l.collectionElementType;
                    }
                    let v = this.a(f, a, t, u);
                    a.o(h, k, v);
                }
                else {
                    let w = l.specificExternalType;
                    if (w == null && l.knownType == 3) {
                        w = "DateTime";
                    }
                    if (w == null) {
                        w = "String";
                    }
                    let x = p;
                    let y = this.f(f, a, x, w);
                    if (this.e) {
                        if (stringEndsWith(l.propertyName, "MemberPath") || (g != null && stringEndsWith(g, "Axis") && l.propertyName.toLowerCase() == "label")) {
                            let z = y.toString();
                            if (stringStartsWith(z, "{")) {
                                if (!stringStartsWith(z, "{[")) {
                                    z = z.substr(1, z.length - 2);
                                    z = "{[" + z + "]}";
                                    y = z;
                                }
                            }
                            else {
                                if (!stringStartsWith(z, "[")) {
                                    z = "[" + z + "]";
                                    y = z;
                                }
                            }
                        }
                    }
                    a.o(h, k, y);
                }
            }
            return f;
        }
        g(a, b) {
            if (b == null) {
                return null;
            }
            let c = NaN;
            let d = NaN;
            if (b.c("x")) {
                c = b.item("x").value;
            }
            if (b.c("y")) {
                d = b.item("y").value;
            }
            return ((() => {
                let $ret = new PointDescription();
                $ret.x = c;
                $ret.y = d;
                return $ret;
            })());
        }
        i(a, b) {
            if (b == null) {
                return null;
            }
            let c = NaN;
            let d = NaN;
            if (b.c("width")) {
                c = b.item("width").value;
            }
            if (b.c("height")) {
                d = b.item("height").value;
            }
            return ((() => {
                let $ret = new SizeDescription();
                $ret.width = c;
                $ret.height = d;
                return $ret;
            })());
        }
        h(a, b) {
            if (b == null) {
                return null;
            }
            let c = NaN;
            let d = NaN;
            let e = NaN;
            let f = NaN;
            if (b.c("left")) {
                c = b.item("left").value;
            }
            if (b.c("top")) {
                d = b.item("top").value;
            }
            if (b.c("width")) {
                e = b.item("width").value;
            }
            if (b.c("height")) {
                f = b.item("height").value;
            }
            return ((() => {
                let $ret = new RectDescription();
                $ret.left = c;
                $ret.top = d;
                $ret.width = e;
                $ret.height = f;
                return $ret;
            })());
        }
        a(a, b, c, d) {
            let e = new Array(c.items.length);
            for (let f = 0; f < c.items.length; f++) {
                let g = c.items[f];
                if (typeCast(JsonDictionaryObject.$, g) !== null) {
                    let h = g;
                    let i = this.b(b, h);
                    a.e(i);
                    e[f] = i.result;
                }
                else if (typeCast(JsonDictionaryArray.$, g) !== null) {
                    let j = g;
                    let k = this.a(a, b, j, d);
                    e[f] = k;
                }
                else {
                    let l = g;
                    let m = this.f(a, b, l, d);
                    e[f] = m;
                }
            }
            return e;
        }
        f(a, b, c, d) {
            switch (c.a) {
                case 1: return c.value;
                case 3: return c.value;
                case 0: switch (d.toLowerCase()) {
                    case "int": return typeGetValue(c.value);
                    case "double": return c.value;
                    case "timespan": return c.value;
                    case "short": return typeGetValue(c.value);
                    case "long": return typeGetValue(c.value);
                    case "float": return c.value;
                    case "byte": return typeGetValue(c.value);
                    default:
                        a.d("unexpected target type for number: " + d);
                        return c.value;
                }
                case 2:
                    if (d.toLowerCase() == "datetime") {
                        let val_ = c.value;
                        let e = (new Date(val_));
                        return e;
                    }
                    return c.value;
                default:
                    a.d("unexpected value type");
                    return c.value;
            }
        }
        l(a, b, c) {
            c.f("{");
            c.i();
            c.f("\"type\": \"" + b.h + "\",");
            let d = b.e();
            for (let e = 0; e < d.count; e++) {
                let f = d._inner[e];
                this.m(a, b, f, c);
            }
            c.h();
            c.f("}");
        }
        j(a) {
            if (a == null) {
                return null;
            }
            return a.substr(0, 1).toLowerCase() + a.substr(1);
        }
        m(a, b, c, d) {
            if (c.c.toLowerCase() == "type") {
                return;
            }
            d.e("\"" + this.j(c.c) + "\": ");
            this.p(a, b, c, c.b, d);
            d.f(",");
        }
        p(a, b, c, d, e) {
            let f = 2;
            if (c.a != null) {
                f = c.a.knownType;
            }
            switch (f) {
                case 6:
                case 16:
                case 10:
                    {
                        e.e("[");
                        let g = c.b;
                        let h = c.a.specificType;
                        if (c.a.knownType == 6 || c.a.knownType == 16) {
                            h = "String";
                        }
                        for (let i = 0; i < g.length; i++) {
                            if (i > 0) {
                                e.e(", ");
                            }
                            let j = h;
                            if (typeCast(DescriptionTreeNode.$, g[i]) !== null) {
                                this.l(a, g[i], e);
                            }
                            else {
                                this.n(a, h, g[i], e);
                            }
                        }
                        e.e("]");
                    }
                    break;
                case 7:
                    this.n(a, "Boolean", d, e);
                    break;
                case 9:
                    {
                        e.e("[");
                        let k = c.b;
                        let l = c.a.collectionElementType;
                        for (let m = 0; m < k.length; m++) {
                            if (m > 0) {
                                e.e(", ");
                            }
                            let n = l;
                            if (typeCast(DescriptionTreeNode.$, k[m]) !== null) {
                                this.l(a, k[m], e);
                            }
                            else {
                                this.n(a, l, k[m], e);
                            }
                        }
                        e.e("]");
                    }
                    break;
                case 4:
                case 18:
                case 19:
                case 20:
                case 5:
                case 2:
                    this.n(a, "String", d, e);
                    break;
                case 3:
                    this.n(a, "DateTime", d, e);
                    break;
                case 8:
                    if (c.a.specificExternalType.toLowerCase() == "string") {
                        this.n(a, "String", d, e);
                    }
                    else {
                        this.l(a, d, e);
                    }
                    break;
                case 1:
                    this.n(a, "Double", d, e);
                    break;
                case 14:
                case 12:
                case 11:
                    this.l(a, d, e);
                    break;
                case 21:
                    this.n(a, "TimeSpan", d, e);
                    break;
                case 17:
                case 0:
                case 15:
                case 13: throw new NotImplementedException(0);
            }
        }
        n(a, b, c, d) {
            switch (b.toLowerCase()) {
                case "string":
                    if (c == null) {
                        d.e("null");
                    }
                    else {
                        d.e("\"" + stringReplace(c, "\"", "\\\"") + "\"");
                    }
                    break;
                case "number":
                case "double":
                    d.e(c.toString());
                    break;
                case "int":
                    d.e(c.toString());
                    break;
                case "float":
                    d.e(c.toString());
                    break;
                case "long":
                    d.e(c.toString());
                    break;
                case "decimal":
                    d.e(c.toString());
                    break;
                case "timespan":
                    d.e(c.toString());
                    break;
                case "boolean":
                    d.e(c.toString().toLowerCase());
                    break;
                case "datetime":
                    let v_ = c;
                    d.e("\"" + (v_.toJSON()) + "\"");
                    break;
            }
        }
    }
    DescriptionSerializer.$t = /*@__PURE__*/ markType(DescriptionSerializer, 'DescriptionSerializer');
    return DescriptionSerializer;
})();
//# sourceMappingURL=DescriptionSerializer.js.map
