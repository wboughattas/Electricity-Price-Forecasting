/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { SizeScaleDescriptionMetadata } from "./SizeScaleDescriptionMetadata";
import { BrushScaleDescriptionMetadata } from "./BrushScaleDescriptionMetadata";
import { GeographicMapSeriesHostDescriptionMetadata } from "./GeographicMapSeriesHostDescriptionMetadata";
import { GeographicProportionalSymbolSeriesDescription } from "./GeographicProportionalSymbolSeriesDescription";
/**
 * @hidden
 */
export let GeographicProportionalSymbolSeriesDescriptionMetadata = /*@__PURE__*/ (() => {
    class GeographicProportionalSymbolSeriesDescriptionMetadata extends Base {
        static b(a) {
            if (GeographicProportionalSymbolSeriesDescriptionMetadata.a == null) {
                GeographicProportionalSymbolSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GeographicProportionalSymbolSeriesDescriptionMetadata.c(a, GeographicProportionalSymbolSeriesDescriptionMetadata.a);
                SizeScaleDescriptionMetadata.d(a);
                BrushScaleDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            GeographicMapSeriesHostDescriptionMetadata.c(a, b);
            b.item("LatitudeMemberPath", "String");
            b.item("LongitudeMemberPath", "String");
            b.item("MarkerType", "ExportedType:string:MarkerType");
            b.item("MarkerTemplateRef", "(w:MarkerTemplate,wf:MarkerTemplate)DataRef::object");
            b.item("MarkerBrush", "Brush");
            b.item("MarkerOutline", "Brush");
            b.item("MaximumMarkers", "Number:int");
            b.item("RadiusMemberPath", "String");
            b.item("RadiusScale", "ExportedType:SizeScale");
            b.item("LabelMemberPath", "String");
            b.item("FillMemberPath", "String");
            b.item("FillScale", "ExportedType:BrushScale");
            b.item("FillScaleUseGlobalValues", "Boolean");
            b.item("MarkerOutlineUsesFillScale", "Boolean");
            b.item("MarkerOutlineBrightness", "Number:double");
            b.item("MarkerBrushBrightness", "Number:double");
            b.item("MarkerThickness", "Number:double");
            b.item("RadiusScaleUseGlobalValues", "Boolean");
        }
        static d(a) {
            GeographicProportionalSymbolSeriesDescriptionMetadata.b(a);
            a.n("GeographicProportionalSymbolSeries", () => new GeographicProportionalSymbolSeriesDescription());
            a.m("GeographicProportionalSymbolSeries", GeographicProportionalSymbolSeriesDescriptionMetadata.a);
        }
    }
    GeographicProportionalSymbolSeriesDescriptionMetadata.$t = /*@__PURE__*/ markType(GeographicProportionalSymbolSeriesDescriptionMetadata, 'GeographicProportionalSymbolSeriesDescriptionMetadata');
    GeographicProportionalSymbolSeriesDescriptionMetadata.a = null;
    return GeographicProportionalSymbolSeriesDescriptionMetadata;
})();
//# sourceMappingURL=GeographicProportionalSymbolSeriesDescriptionMetadata.js.map
