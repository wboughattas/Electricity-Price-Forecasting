/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ISupportsDataChangeNotifications_$type } from "./ISupportsDataChangeNotifications";
import { IDataSourceSupportsCount_$type } from "./IDataSourceSupportsCount";
import { Base, Type, markType, typeGetValue } from "./type";
import { SyncableObservableCollection$1 } from "./SyncableObservableCollection$1";
import { IDataSourceSupportsIndexedAccess_$type } from "./IDataSourceSupportsIndexedAccess";
import { Convert } from "./Convert";
import { truncate, isNaN_ } from "./number";
import { toOADate, fromOADate } from "./dateExtended";
import { DefaultSummaryResult } from "./DefaultSummaryResult";
import { stringCompare } from "./string";
import { ArgumentNullException } from "./ArgumentNullException";
/**
 * @hidden
 */
export let IDataSourceDataProvider_$type = /*@__PURE__*/ new Type(null, 'IDataSourceDataProvider', null, [ISupportsDataChangeNotifications_$type, IDataSourceSupportsCount_$type]);
/**
 * @hidden
 */
export let IFilterExpression_$type = /*@__PURE__*/ new Type(null, 'IFilterExpression');
/**
 * @hidden
 */
export let FilterExpressionCollection = /*@__PURE__*/ (() => {
    class FilterExpressionCollection extends Base {
        constructor() {
            super();
            this.a = null;
            this.f = null;
            this.f = new SyncableObservableCollection$1(IFilterExpression_$type);
        }
        get syncTarget() {
            return this.a;
        }
        set syncTarget(a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.a = null;
                return;
            }
            this.a = a;
            this.f.syncTarget = this.a.f;
        }
        add(a) {
            return this.f.add(a);
        }
        insert(a, b) {
            this.f.add1(a, b);
        }
        clear() {
            this.f.clear();
        }
        get(a) {
            return this.f.get(a);
        }
        indexOf(a) {
            return this.f.indexOf(a);
        }
        remove(a) {
            return this.f.remove1(a);
        }
        removeAt(a) {
            return this.f.remove(a);
        }
        set(a, b) {
            return this.f.set(a, b);
        }
        size() {
            return this.f.size();
        }
        get onChanged() {
            return this.f.f;
        }
        set onChanged(a) {
            this.f.f = a;
        }
        m(a) {
            this.f.addListener(a);
        }
        p(a) {
            this.f.removeListener(a);
        }
        get j() {
            return this.f.all;
        }
    }
    FilterExpressionCollection.$t = /*@__PURE__*/ markType(FilterExpressionCollection, 'FilterExpressionCollection');
    return FilterExpressionCollection;
})();
/**
 * @hidden
 */
export let IDataSource_$type = /*@__PURE__*/ new Type(null, 'IDataSource', null, [ISupportsDataChangeNotifications_$type, IDataSourceSupportsIndexedAccess_$type]);
/**
 * @hidden
 */
export let SummaryCalculator = /*@__PURE__*/ (() => {
    class SummaryCalculator extends Base {
        constructor() {
            super(...arguments);
            this._propertyName = null;
            this._propertyType = 0;
            this._dataSource = null;
            this._isSummaryDirty = false;
            this.f = 5;
        }
        get propertyName() {
            return this._propertyName;
        }
        set propertyName(a) {
            this._propertyName = a;
        }
        get propertyType() {
            return this._propertyType;
        }
        set propertyType(a) {
            this._propertyType = a;
        }
        get dataSource() {
            return this._dataSource;
        }
        set dataSource(a) {
            this._dataSource = a;
        }
        get isSummaryDirty() {
            return this._isSummaryDirty;
        }
        set isSummaryDirty(a) {
            this._isSummaryDirty = a;
        }
        get_operand() {
            return this.f;
        }
        get operand() {
            return this.get_operand();
        }
        beginCalculation(a, b) {
            this.dataSource = a;
            this.propertyName = b;
            if (this.propertyName != null) {
                this.propertyType = a.resolveSchemaPropertyType(this.propertyName);
            }
            this.isSummaryDirty = false;
        }
        endCalculation() {
            return null;
        }
        aggregate(a) {
        }
        itemAdded(a, b, c) {
            return b;
        }
        itemRemoved(a, b, c) {
            return b;
        }
        i(a) {
            if (this.dataSource == null) {
                return NaN;
            }
            let b = this.dataSource.getItemProperty(a, this.propertyName);
            if (b == null) {
                return NaN;
            }
            return this.j(b);
        }
        j(a) {
            if (a == null) {
                return NaN;
            }
            switch (this.propertyType) {
                case 6: return a;
                case 5: return a;
                case 1: return typeGetValue(a);
                case 3: return typeGetValue(a);
                case 4: return typeGetValue(a);
                case 7: return a;
                case 8: return toOADate(a);
                case 11: try {
                    return Convert.toDouble3(a);
                }
                catch (b) {
                    return NaN;
                }
            }
            return 0;
        }
        k(a) {
            switch (this.propertyType) {
                case 6: return a;
                case 5: return a;
                case 1: return truncate(a);
                case 3: return truncate(a);
                case 4: return truncate(a);
                case 7: return a;
                case 8: return fromOADate(a);
                default: return a;
            }
        }
    }
    SummaryCalculator.$t = /*@__PURE__*/ markType(SummaryCalculator, 'SummaryCalculator');
    return SummaryCalculator;
})();
/**
 * @hidden
 */
export let SumSummaryCalculator = /*@__PURE__*/ (() => {
    class SumSummaryCalculator extends SummaryCalculator {
        constructor() {
            super(...arguments);
            this.p = 0;
        }
        get_displayName() {
            return "Sum";
        }
        get displayName() {
            return this.get_displayName();
        }
        get_operand() {
            return 2;
        }
        beginCalculation(a, b) {
            super.beginCalculation(a, b);
            this.p = 0;
        }
        endCalculation() {
            return new DefaultSummaryResult(this.propertyName, 2, this.k(this.p));
        }
        aggregate(a) {
            let b = this.i(a);
            if (!isNaN_(b)) {
                this.p += b;
            }
        }
        itemAdded(a, b, c) {
            let d = this.i(a);
            if (isNaN_(d)) {
                d = 0;
            }
            if (b == null) {
                return new DefaultSummaryResult(this.propertyName, 2, this.k(d));
            }
            let e = this.j(b.value) + d;
            return new DefaultSummaryResult(this.propertyName, 2, this.k(e));
        }
        itemRemoved(a, b, c) {
            let d = this.i(a);
            if (isNaN_(d)) {
                d = 0;
            }
            let e = this.j(b.value) - d;
            return new DefaultSummaryResult(this.propertyName, 2, this.k(e));
        }
    }
    SumSummaryCalculator.$t = /*@__PURE__*/ markType(SumSummaryCalculator, 'SumSummaryCalculator', SummaryCalculator.$);
    return SumSummaryCalculator;
})();
/**
 * @hidden
 */
export let CountSummaryCalculator = /*@__PURE__*/ (() => {
    class CountSummaryCalculator extends SummaryCalculator {
        constructor() {
            super(...arguments);
            this.p = 0;
        }
        get_displayName() {
            return "Count";
        }
        get displayName() {
            return this.get_displayName();
        }
        get_operand() {
            return 4;
        }
        beginCalculation(a, b) {
            super.beginCalculation(a, b);
            this.propertyType = 1;
            this.p = 0;
        }
        endCalculation() {
            return new DefaultSummaryResult(this.propertyName, 4, this.p);
        }
        aggregate(a) {
            this.p++;
        }
        itemAdded(a, b, c) {
            if (b == null) {
                return new DefaultSummaryResult(this.propertyName, 4, 1);
            }
            return new DefaultSummaryResult(this.propertyName, 4, typeGetValue(b.value) + 1);
        }
        itemRemoved(a, b, c) {
            return new DefaultSummaryResult(this.propertyName, 4, typeGetValue(b.value) - 1);
        }
    }
    CountSummaryCalculator.$t = /*@__PURE__*/ markType(CountSummaryCalculator, 'CountSummaryCalculator', SummaryCalculator.$);
    return CountSummaryCalculator;
})();
/**
 * @hidden
 */
export let AverageSummaryCalculator = /*@__PURE__*/ (() => {
    class AverageSummaryCalculator extends SummaryCalculator {
        constructor() {
            super(...arguments);
            this.p = 0;
            this.q = 0;
        }
        get_displayName() {
            return "Avg";
        }
        get displayName() {
            return this.get_displayName();
        }
        get_operand() {
            return 3;
        }
        beginCalculation(a, b) {
            super.beginCalculation(a, b);
            this.p = 0;
            this.q = 0;
        }
        endCalculation() {
            let a = this.q > 0 ? this.p / this.q : 0;
            return new DefaultSummaryResult(this.propertyName, 3, this.k(a));
        }
        aggregate(a) {
            let b = this.i(a);
            if (!isNaN_(b)) {
                this.p += b;
                this.q++;
            }
        }
        itemAdded(a, b, c) {
            let d = this.i(a);
            if (isNaN_(d)) {
                d = 0;
            }
            if (b == null) {
                return new DefaultSummaryResult(this.propertyName, 3, this.k(d));
            }
            let e = this.j(b.value) * (c - 1);
            let f = (e + d) / c;
            return new DefaultSummaryResult(this.propertyName, 3, this.k(f));
        }
        itemRemoved(a, b, c) {
            let d = this.i(a);
            if (isNaN_(d)) {
                d = 0;
            }
            let e = this.j(b.value) * (c + 1);
            let f = (e - d) / c;
            return new DefaultSummaryResult(this.propertyName, 3, this.k(f));
        }
    }
    AverageSummaryCalculator.$t = /*@__PURE__*/ markType(AverageSummaryCalculator, 'AverageSummaryCalculator', SummaryCalculator.$);
    return AverageSummaryCalculator;
})();
/**
 * @hidden
 */
export let MaxSummaryCalculator = /*@__PURE__*/ (() => {
    class MaxSummaryCalculator extends SummaryCalculator {
        constructor() {
            super(...arguments);
            this.p = null;
        }
        get_displayName() {
            return "Max";
        }
        get displayName() {
            return this.get_displayName();
        }
        get_operand() {
            return 1;
        }
        beginCalculation(a, b) {
            super.beginCalculation(a, b);
            this.p = null;
        }
        endCalculation() {
            return new DefaultSummaryResult(this.propertyName, 1, this.p);
        }
        aggregate(a) {
            this.p = this.q(a, this.p);
        }
        itemAdded(a, b, c) {
            if (b == null) {
                return new DefaultSummaryResult(this.propertyName, 1, this.q(a, null));
            }
            let d = this.q(a, b.value);
            return new DefaultSummaryResult(this.propertyName, 1, d);
        }
        itemRemoved(a, b, c) {
            let d = this.dataSource.getItemProperty(a, this.propertyName);
            if (Base.equalsStatic(d, b.value)) {
                this.isSummaryDirty = true;
            }
            return b;
        }
        q(a, b) {
            let c = this.dataSource.getItemProperty(a, this.propertyName);
            if (b == null) {
                return c;
            }
            if (c == null) {
                return b;
            }
            switch (this.propertyType) {
                case 0:
                    b = stringCompare(c, b) > 0 ? c : b;
                    break;
                case 6:
                    b = c > b ? c : b;
                    break;
                case 5:
                    b = c > b ? c : b;
                    break;
                case 1:
                    b = typeGetValue(c) > typeGetValue(b) ? c : b;
                    break;
                case 3:
                    b = typeGetValue(c) > typeGetValue(b) ? c : b;
                    break;
                case 4:
                    b = typeGetValue(c) > typeGetValue(b) ? c : b;
                    break;
                case 7:
                    b = c > b ? c : b;
                    break;
                case 2:
                    b = c ? c : b;
                    break;
                case 10:
                    b = typeGetValue(c) > typeGetValue(b) ? c : b;
                    break;
                case 8:
                    let xVal_ = c;
                    let yVal_ = b;
                    xVal_ = +xVal_;
                    yVal_ = +yVal_;
                    let d = typeGetValue(xVal_);
                    let e = typeGetValue(yVal_);
                    b = Base.compareSimple(d, e) > 0 ? c : b;
                    break;
            }
            return b;
        }
    }
    MaxSummaryCalculator.$t = /*@__PURE__*/ markType(MaxSummaryCalculator, 'MaxSummaryCalculator', SummaryCalculator.$);
    return MaxSummaryCalculator;
})();
/**
 * @hidden
 */
export let MinSummaryCalculator = /*@__PURE__*/ (() => {
    class MinSummaryCalculator extends SummaryCalculator {
        constructor() {
            super(...arguments);
            this.p = null;
        }
        get_displayName() {
            return "Min";
        }
        get displayName() {
            return this.get_displayName();
        }
        get_operand() {
            return 0;
        }
        beginCalculation(a, b) {
            super.beginCalculation(a, b);
            this.p = null;
        }
        endCalculation() {
            return new DefaultSummaryResult(this.propertyName, 0, this.p);
        }
        aggregate(a) {
            this.p = this.q(a, this.p);
        }
        itemAdded(a, b, c) {
            if (b == null) {
                return new DefaultSummaryResult(this.propertyName, 0, this.q(a, null));
            }
            let d = this.q(a, b.value);
            return new DefaultSummaryResult(this.propertyName, 0, d);
        }
        itemRemoved(a, b, c) {
            let d = this.dataSource.getItemProperty(a, this.propertyName);
            if (Base.equalsStatic(d, b.value)) {
                this.isSummaryDirty = true;
            }
            return b;
        }
        q(a, b) {
            let c = this.dataSource.getItemProperty(a, this.propertyName);
            if (b == null) {
                return c;
            }
            if (c == null) {
                return b;
            }
            switch (this.propertyType) {
                case 0:
                    b = stringCompare(c, b) < 0 ? c : b;
                    break;
                case 6:
                    b = c < b ? c : b;
                    break;
                case 5:
                    b = c < b ? c : b;
                    break;
                case 1:
                    b = typeGetValue(c) < typeGetValue(b) ? c : b;
                    break;
                case 3:
                    b = typeGetValue(c) < typeGetValue(b) ? c : b;
                    break;
                case 4:
                    b = typeGetValue(c) < typeGetValue(b) ? c : b;
                    break;
                case 7:
                    b = c < b ? c : b;
                    break;
                case 2:
                    b = !c ? c : b;
                    break;
                case 10:
                    b = typeGetValue(c) < typeGetValue(b) ? c : b;
                    break;
                case 8:
                    let xVal_ = c;
                    let yVal_ = b;
                    xVal_ = +xVal_;
                    yVal_ = +yVal_;
                    let d = typeGetValue(xVal_);
                    let e = typeGetValue(yVal_);
                    b = Base.compareSimple(d, e) < 0 ? c : b;
                    break;
            }
            return b;
        }
    }
    MinSummaryCalculator.$t = /*@__PURE__*/ markType(MinSummaryCalculator, 'MinSummaryCalculator', SummaryCalculator.$);
    return MinSummaryCalculator;
})();
/**
 * @hidden
 */
export let SummaryDescription = /*@__PURE__*/ (() => {
    class SummaryDescription extends Base {
        constructor(a, ..._rest) {
            super();
            this.h = false;
            this.k = null;
            this.f = 0;
            this.b = null;
            this.provideCalculator = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.propertyName = c;
                        this.operand = 4;
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.propertyName = c;
                        this.operand = d;
                    }
                    break;
            }
        }
        get propertyName() {
            return this.k;
        }
        set propertyName(a) {
            this.k = a;
        }
        get operand() {
            return this.f;
        }
        set operand(a) {
            this.f = a;
            switch (this.f) {
                case 0:
                    this.calculator = new MinSummaryCalculator();
                    break;
                case 1:
                    this.calculator = new MaxSummaryCalculator();
                    break;
                case 2:
                    this.calculator = new SumSummaryCalculator();
                    break;
                case 3:
                    this.calculator = new AverageSummaryCalculator();
                    break;
                case 4:
                    this.calculator = new CountSummaryCalculator();
                    break;
            }
        }
        get calculator() {
            return this.b;
        }
        set calculator(a) {
            this.b = a;
        }
        equals(a) {
            let b = a;
            if (b == null) {
                return super.equals(a);
            }
            return b.propertyName == this.propertyName && b.operand == this.operand;
        }
        getHashCode() {
            return Base.getHashCodeStatic(this.propertyName) * 17 + this.operand;
        }
        m() {
            this.h = true;
        }
        e() {
            if (this.provideCalculator != null) {
                let a = new ProvideCalculatorEventArgs();
                this.provideCalculator(this, a);
                return a.a;
            }
            return null;
        }
        d() {
            switch (this.f) {
                case 0: return new MinSummaryCalculator();
                case 1: return new MaxSummaryCalculator();
                case 2: return new SumSummaryCalculator();
                case 3: return new AverageSummaryCalculator();
                case 4: return new CountSummaryCalculator();
                case 5:
                    let a = this.e();
                    if (a == null) {
                        throw new ArgumentNullException(2, "Calculator", "No custom calculator was provided.");
                    }
                    return a;
            }
            return null;
        }
    }
    SummaryDescription.$t = /*@__PURE__*/ markType(SummaryDescription, 'SummaryDescription');
    return SummaryDescription;
})();
/**
 * @hidden
 */
export let SummaryDescriptionCollection = /*@__PURE__*/ (() => {
    class SummaryDescriptionCollection extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.f = new SyncableObservableCollection$1(SummaryDescription.$);
        }
        g() {
            return this.f;
        }
        get syncTarget() {
            return this.d;
        }
        set syncTarget(a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.d = null;
                return;
            }
            this.d = a;
            this.f.syncTarget = this.d.f;
        }
        add(a) {
            return this.f.add(a);
        }
        insert(a, b) {
            this.f.add1(a, b);
        }
        clear() {
            this.f.clear();
        }
        get(a) {
            return this.f.get(a);
        }
        indexOf(a) {
            return this.f.indexOf(a);
        }
        remove(a) {
            return this.f.remove1(a);
        }
        removeAt(a) {
            return this.f.remove(a);
        }
        set(a, b) {
            return this.f.set(a, b);
        }
        size() {
            return this.f.size();
        }
        n(a) {
            this.f.addListener(a);
        }
        q(a) {
            this.f.removeListener(a);
        }
        get onChanged() {
            return this.f.f;
        }
        set onChanged(a) {
            this.f.f = a;
        }
        get k() {
            return this.f.all;
        }
    }
    SummaryDescriptionCollection.$t = /*@__PURE__*/ markType(SummaryDescriptionCollection, 'SummaryDescriptionCollection');
    return SummaryDescriptionCollection;
})();
/**
 * @hidden
 */
export let ProvideCalculatorEventArgs = /*@__PURE__*/ (() => {
    class ProvideCalculatorEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    ProvideCalculatorEventArgs.$t = /*@__PURE__*/ markType(ProvideCalculatorEventArgs, 'ProvideCalculatorEventArgs');
    return ProvideCalculatorEventArgs;
})();
//# sourceMappingURL=IDataSourceDataProvider_combined.js.map
