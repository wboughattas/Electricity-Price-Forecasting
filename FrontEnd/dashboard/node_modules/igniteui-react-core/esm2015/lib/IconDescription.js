/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let IconDescription = /*@__PURE__*/ (() => {
    class IconDescription extends Description {
        constructor() {
            super();
            this.v = null;
            this.z = null;
            this.w = null;
            this.x = null;
            this.y = null;
            this.j = 0;
            this.k = 0;
            this.ab = null;
            this.al = null;
            this.ak = null;
            this.af = null;
            this.ag = null;
            this.aj = null;
            this.m = 0;
            this.n = 0;
            this.ac = null;
            this.l = 0;
            this.ad = null;
            this.ae = null;
            this.ah = null;
            this.ai = null;
            this.t = 0;
            this.aa = null;
            this.g = false;
            this.f = false;
        }
        get_type() {
            return "Icon";
        }
        get type() {
            return this.get_type();
        }
        get actualFill() {
            return this.v;
        }
        set actualFill(a) {
            this.v = a;
            this.e("ActualFill");
        }
        get actualTextColor() {
            return this.z;
        }
        set actualTextColor(a) {
            this.z = a;
            this.e("ActualTextColor");
        }
        get actualHoverFill() {
            return this.w;
        }
        set actualHoverFill(a) {
            this.w = a;
            this.e("ActualHoverFill");
        }
        get actualHoverStroke() {
            return this.x;
        }
        set actualHoverStroke(a) {
            this.x = a;
            this.e("ActualHoverStroke");
        }
        get actualStroke() {
            return this.y;
        }
        set actualStroke(a) {
            this.y = a;
            this.e("ActualStroke");
        }
        get actualHoverStrokeThickness() {
            return this.j;
        }
        set actualHoverStrokeThickness(a) {
            this.j = a;
            this.e("ActualHoverStrokeThickness");
        }
        get actualStrokeThickness() {
            return this.k;
        }
        set actualStrokeThickness(a) {
            this.k = a;
            this.e("ActualStrokeThickness");
        }
        get fill() {
            return this.ab;
        }
        set fill(a) {
            this.ab = a;
            this.e("Fill");
        }
        get textColor() {
            return this.al;
        }
        set textColor(a) {
            this.al = a;
            this.e("TextColor");
        }
        get svgPath() {
            return this.ak;
        }
        set svgPath(a) {
            this.ak = a;
            this.e("SvgPath");
        }
        get hoverFill() {
            return this.af;
        }
        set hoverFill(a) {
            this.af = a;
            this.e("HoverFill");
        }
        get hoverStroke() {
            return this.ag;
        }
        set hoverStroke(a) {
            this.ag = a;
            this.e("HoverStroke");
        }
        get stroke() {
            return this.aj;
        }
        set stroke(a) {
            this.aj = a;
            this.e("Stroke");
        }
        get hoverStrokeThickness() {
            return this.m;
        }
        set hoverStrokeThickness(a) {
            this.m = a;
            this.e("HoverStrokeThickness");
        }
        get strokeThickness() {
            return this.n;
        }
        set strokeThickness(a) {
            this.n = a;
            this.e("StrokeThickness");
        }
        get fontFamily() {
            return this.ac;
        }
        set fontFamily(a) {
            this.ac = a;
            this.e("FontFamily");
        }
        get fontSize() {
            return this.l;
        }
        set fontSize(a) {
            this.l = a;
            this.e("FontSize");
        }
        get fontStyle() {
            return this.ad;
        }
        set fontStyle(a) {
            this.ad = a;
            this.e("FontStyle");
        }
        get fontWeight() {
            return this.ae;
        }
        set fontWeight(a) {
            this.ae = a;
            this.e("FontWeight");
        }
        get hoverTextColor() {
            return this.ah;
        }
        set hoverTextColor(a) {
            this.ah = a;
            this.e("HoverTextColor");
        }
        get id() {
            return this.ai;
        }
        set id(a) {
            this.ai = a;
            this.e("Id");
        }
        get tabIndex() {
            return this.t;
        }
        set tabIndex(a) {
            this.t = a;
            this.e("TabIndex");
        }
        get ariaLabel() {
            return this.aa;
        }
        set ariaLabel(a) {
            this.aa = a;
            this.e("AriaLabel");
        }
        get isHover() {
            return this.g;
        }
        set isHover(a) {
            this.g = a;
            this.e("IsHover");
        }
        get disabled() {
            return this.f;
        }
        set disabled(a) {
            this.f = a;
            this.e("Disabled");
        }
    }
    IconDescription.$t = /*@__PURE__*/ markType(IconDescription, 'IconDescription', Description.$);
    return IconDescription;
})();
//# sourceMappingURL=IconDescription.js.map
