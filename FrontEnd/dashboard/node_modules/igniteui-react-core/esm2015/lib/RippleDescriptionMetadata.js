/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { RippleDescription } from "./RippleDescription";
/**
 * @hidden
 */
export let RippleDescriptionMetadata = /*@__PURE__*/ (() => {
    class RippleDescriptionMetadata extends Base {
        static b(a) {
            if (RippleDescriptionMetadata.a == null) {
                RippleDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                RippleDescriptionMetadata.c(a, RippleDescriptionMetadata.a);
            }
        }
        static c(a, b) {
            b.item("EventSourceRef", "(w:EventSource,wf:EventSource)DataRef");
            b.item("RippleColor", "Brush");
            b.item("HoverColor", "Brush");
            b.item("ActualHoverColor", "Brush");
            b.item("ActualRippleColor", "Brush");
            b.item("RippleDuration", "Number:double");
            b.item("IsDisabled", "Boolean");
            b.item("IsCentered", "Boolean");
            b.item("IsHoverEnabled", "Boolean");
        }
        static d(a) {
            RippleDescriptionMetadata.b(a);
            a.n("Ripple", () => new RippleDescription());
            a.m("Ripple", RippleDescriptionMetadata.a);
        }
    }
    RippleDescriptionMetadata.$t = /*@__PURE__*/ markType(RippleDescriptionMetadata, 'RippleDescriptionMetadata');
    RippleDescriptionMetadata.a = null;
    return RippleDescriptionMetadata;
})();
//# sourceMappingURL=RippleDescriptionMetadata.js.map
