/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { CellKeyDescriptionMetadata } from "./CellKeyDescriptionMetadata";
import { PrimaryKeyValueDescriptionMetadata } from "./PrimaryKeyValueDescriptionMetadata";
import { SectionHeaderDescriptionMetadata } from "./SectionHeaderDescriptionMetadata";
import { SummaryRowRootDescriptionMetadata } from "./SummaryRowRootDescriptionMetadata";
import { SummaryRowSectionDescriptionMetadata } from "./SummaryRowSectionDescriptionMetadata";
import { RowSeparatorDescriptionMetadata } from "./RowSeparatorDescriptionMetadata";
import { HeaderRowSeparatorDescriptionMetadata } from "./HeaderRowSeparatorDescriptionMetadata";
import { HeaderSeparatorDescriptionMetadata } from "./HeaderSeparatorDescriptionMetadata";
import { ColumnResizingSeparatorDescriptionMetadata } from "./ColumnResizingSeparatorDescriptionMetadata";
import { ColumnMovingSeparatorDescriptionMetadata } from "./ColumnMovingSeparatorDescriptionMetadata";
import { PinnedAreaSeparatorDescriptionMetadata } from "./PinnedAreaSeparatorDescriptionMetadata";
import { GridAnimationSettingsDescriptionMetadata } from "./GridAnimationSettingsDescriptionMetadata";
import { GridCellPositionDescriptionMetadata } from "./GridCellPositionDescriptionMetadata";
import { GridFilterExpressionsEventArgsDescriptionMetadata } from "./GridFilterExpressionsEventArgsDescriptionMetadata";
import { GridSortDescriptionsChangedEventArgsDescriptionMetadata } from "./GridSortDescriptionsChangedEventArgsDescriptionMetadata";
import { GridGroupDescriptionsChangedEventArgsDescriptionMetadata } from "./GridGroupDescriptionsChangedEventArgsDescriptionMetadata";
import { ColumnHiddenChangedEventArgsDescriptionMetadata } from "./ColumnHiddenChangedEventArgsDescriptionMetadata";
import { ColumnPinnedChangedEventArgsDescriptionMetadata } from "./ColumnPinnedChangedEventArgsDescriptionMetadata";
import { GridCellValueChangingEventArgsDescriptionMetadata } from "./GridCellValueChangingEventArgsDescriptionMetadata";
import { GridDataCommittedEventArgsDescriptionMetadata } from "./GridDataCommittedEventArgsDescriptionMetadata";
import { GridDataCommittingEventArgsDescriptionMetadata } from "./GridDataCommittingEventArgsDescriptionMetadata";
import { GridSizeChangedEventArgsDescriptionMetadata } from "./GridSizeChangedEventArgsDescriptionMetadata";
import { GridColumnsChangedEventArgsDescriptionMetadata } from "./GridColumnsChangedEventArgsDescriptionMetadata";
import { GridColumnsAutoGeneratedEventArgsDescriptionMetadata } from "./GridColumnsAutoGeneratedEventArgsDescriptionMetadata";
import { GridSelectedItemsChangedEventArgsDescriptionMetadata } from "./GridSelectedItemsChangedEventArgsDescriptionMetadata";
import { GridSelectedKeysChangedEventArgsDescriptionMetadata } from "./GridSelectedKeysChangedEventArgsDescriptionMetadata";
import { GridSelectedCellsChangedEventArgsDescriptionMetadata } from "./GridSelectedCellsChangedEventArgsDescriptionMetadata";
import { GridActiveCellChangedEventArgsDescriptionMetadata } from "./GridActiveCellChangedEventArgsDescriptionMetadata";
import { GridSelectedCellRangesChangedEventArgsDescriptionMetadata } from "./GridSelectedCellRangesChangedEventArgsDescriptionMetadata";
import { GridColumnWidthChangedEventArgsDescriptionMetadata } from "./GridColumnWidthChangedEventArgsDescriptionMetadata";
import { GridCellEditStartedEventArgsDescriptionMetadata } from "./GridCellEditStartedEventArgsDescriptionMetadata";
import { GridCellEditEndedEventArgsDescriptionMetadata } from "./GridCellEditEndedEventArgsDescriptionMetadata";
import { GridRowEditStartedEventArgsDescriptionMetadata } from "./GridRowEditStartedEventArgsDescriptionMetadata";
import { GridRowEditEndedEventArgsDescriptionMetadata } from "./GridRowEditEndedEventArgsDescriptionMetadata";
import { DataGridDescription } from "./DataGridDescription";
import { GridCellEventArgsDescription } from "./GridCellEventArgsDescription";
/**
 * @hidden
 */
export let DataGridDescriptionMetadata = /*@__PURE__*/ (() => {
    class DataGridDescriptionMetadata extends Base {
        static e(a, b) {
            b.item("_qualifiedName", "String:Infragistics.Controls.Grids.XamDataGrid");
            b.item("Width", "(w:Width/DimensionTransform)String");
            b.item("Height", "(w:Height/DimensionTransform)String");
            b.item("Background", "(wf:BackColor/ColorTransform)Brush");
            CellKeyDescriptionMetadata.d(a);
            PrimaryKeyValueDescriptionMetadata.d(a);
        }
        static b(a) {
            if (DataGridDescriptionMetadata.a == null) {
                DataGridDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                DataGridDescriptionMetadata.c(a, DataGridDescriptionMetadata.a);
                SectionHeaderDescriptionMetadata.d(a);
                SummaryRowRootDescriptionMetadata.d(a);
                SummaryRowSectionDescriptionMetadata.d(a);
                RowSeparatorDescriptionMetadata.d(a);
                HeaderRowSeparatorDescriptionMetadata.d(a);
                HeaderSeparatorDescriptionMetadata.d(a);
                ColumnResizingSeparatorDescriptionMetadata.d(a);
                ColumnMovingSeparatorDescriptionMetadata.d(a);
                PinnedAreaSeparatorDescriptionMetadata.d(a);
                GridAnimationSettingsDescriptionMetadata.d(a);
                GridCellPositionDescriptionMetadata.d(a);
                GridFilterExpressionsEventArgsDescriptionMetadata.d(a);
                GridCellEventArgsDescriptionMetadata.d(a);
                GridSortDescriptionsChangedEventArgsDescriptionMetadata.d(a);
                GridGroupDescriptionsChangedEventArgsDescriptionMetadata.d(a);
                ColumnHiddenChangedEventArgsDescriptionMetadata.d(a);
                ColumnPinnedChangedEventArgsDescriptionMetadata.d(a);
                GridCellValueChangingEventArgsDescriptionMetadata.d(a);
                GridDataCommittedEventArgsDescriptionMetadata.d(a);
                GridDataCommittingEventArgsDescriptionMetadata.d(a);
                GridSizeChangedEventArgsDescriptionMetadata.d(a);
                GridColumnsChangedEventArgsDescriptionMetadata.d(a);
                GridColumnsAutoGeneratedEventArgsDescriptionMetadata.d(a);
                GridSelectedItemsChangedEventArgsDescriptionMetadata.d(a);
                GridSelectedKeysChangedEventArgsDescriptionMetadata.d(a);
                GridSelectedCellsChangedEventArgsDescriptionMetadata.d(a);
                GridActiveCellChangedEventArgsDescriptionMetadata.d(a);
                GridSelectedCellRangesChangedEventArgsDescriptionMetadata.d(a);
                GridColumnWidthChangedEventArgsDescriptionMetadata.d(a);
                GridCellEditStartedEventArgsDescriptionMetadata.d(a);
                GridCellEditEndedEventArgsDescriptionMetadata.d(a);
                GridRowEditStartedEventArgsDescriptionMetadata.d(a);
                GridRowEditEndedEventArgsDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("ColumnResizingMode", "ExportedType:string:ColumnResizingMode");
            b.item("ColumnMovingMode", "ExportedType:string:ColumnMovingMode");
            b.item("IsRowHoverEnabled", "Boolean");
            b.item("RowHoverBackground", "Brush");
            b.item("EditRowBorder", "Brush");
            b.item("EditRowBorderWidthBottom", "(w:EditRowBorderWidth.Bottom,wf:EditRowBorderWidthBottom)Number:double");
            b.item("EditRowBorderWidthLeft", "(w:EditRowBorderWidth.Left,wf:EditRowBorderWidthLeft)Number:double");
            b.item("EditRowBorderWidthRight", "(w:EditRowBorderWidth.Right,wf:EditRowBorderWidthRight)Number:double");
            b.item("EditRowBorderWidthTop", "(w:EditRowBorderWidth.Top,wf:EditRowBorderWidthTop)Number:double");
            b.item("SectionHeader", "ExportedType:SectionHeader");
            b.item("SummaryRowRoot", "ExportedType:SummaryRowRoot");
            b.item("SummaryRowSection", "ExportedType:SummaryRowSection");
            b.item("RowSeparator", "ExportedType:RowSeparator");
            b.item("HeaderRowSeparator", "ExportedType:HeaderRowSeparator");
            b.item("HeaderSeparator", "ExportedType:HeaderSeparator");
            b.item("ColumnResizingSeparator", "ExportedType:ColumnResizingSeparator");
            b.item("ColumnMovingSeparator", "ExportedType:ColumnMovingSeparator");
            b.item("PinnedAreaSeparator", "ExportedType:PinnedAreaSeparator");
            b.item("AutoGenerateDesiredProperties", "Array:string");
            b.item("DataSourceDesiredProperties", "Array:string");
            b.item("Density", "ExportedType:string:ControlDisplayDensity");
            b.item("ActualRowHeight", "Number:int");
            b.item("RowHeight", "Number:int");
            b.item("DefaultColumnMinWidth", "Number:double");
            b.item("ActualHeaderHeight", "Number:int");
            b.item("HeaderHeight", "Number:int");
            b.item("DataSourceRef", "(w:ItemsSource,wf:ItemsSource)DataRef::object");
            b.item("DataSource", "(w:ItemsSource,wf:ItemsSource)ExportedType:BaseDataSource:BaseDataSource");
            b.item("HeaderClickAction", "ExportedType:string:HeaderClickAction");
            b.item("EditMode", "ExportedType:string:EditModeType");
            b.item("EditModeClickAction", "ExportedType:string:EditModeClickAction");
            b.item("AutoGenerateColumns", "Boolean");
            b.item("RowSeparatorHeight", "Number:int");
            b.item("IsPlaceholderRenderingEnabled", "Boolean");
            b.item("ColumnAddingAnimationMode", "ExportedType:string:ColumnShowingAnimationMode");
            b.item("ColumnPropertyUpdatingAnimationMode", "ExportedType:string:ColumnPropertyUpdatingAnimationMode");
            b.item("CellDataLoadedAnimationMode", "ExportedType:string:CellDataLoadedAnimationMode");
            b.item("RowSelectionAnimationMode", "ExportedType:string:RowSelectionAnimationMode");
            b.item("RowHoverAnimationMode", "ExportedType:string:RowHoverAnimationMode");
            b.item("CellSelectionAnimationMode", "ExportedType:string:CellSelectionAnimationMode");
            b.item("AnimationSettings", "ExportedType:GridAnimationSettings");
            b.item("ColumnResizingAnimationMode", "ExportedType:string:ColumnResizingAnimationMode");
            b.item("ColumnShowingAnimationMode", "ExportedType:string:ColumnShowingAnimationMode");
            b.item("ColumnMovingAnimationMode", "ExportedType:string:ColumnMovingAnimationMode");
            b.item("ColumnHidingAnimationMode", "ExportedType:string:ColumnHidingAnimationMode");
            b.item("ColumnExchangingAnimationMode", "ExportedType:string:ColumnExchangingAnimationMode");
            b.item("SelectionMode", "ExportedType:string:GridSelectionMode");
            b.item("ActivationMode", "ExportedType:string:GridActivationMode");
            b.item("SelectionBehavior", "ExportedType:string:GridSelectionBehavior");
            b.item("SelectedItems", "Collection:object:GridSelectedItemsCollection:Object");
            b.item("SelectedKeys", "Collection:PrimaryKeyValue:GridSelectedKeysCollection:PrimaryKeyValue");
            b.item("SelectedCells", "Collection:CellKey:GridSelectedCellsCollection:CellKey");
            b.item("SelectedCellRanges", "Collection:CellRange:GridSelectedCellRangesCollection:CellRange");
            b.item("PinnedItems", "Collection:object:GridSelectedItemsCollection:Object");
            b.item("PinnedKeys", "Collection:PrimaryKeyValue:GridSelectedKeysCollection:PrimaryKeyValue");
            b.item("IsColumnOptionsEnabled", "Boolean");
            b.item("IsGroupRowSticky", "Boolean");
            b.item("IsHeaderSeparatorVisible", "Boolean");
            b.item("CellSelectedBackground", "Brush");
            b.item("SectionHeaderSelectedBackground", "Brush");
            b.item("SummaryRootBackground", "Brush");
            b.item("SummarySectionBackground", "Brush");
            b.item("PinnedRowOpacity", "Number:double");
            b.item("EditFontFamily", "(w:EditFontFamily/FontFamilyTransform,wf:EditFontFamily,web:editTextStyle/FontFamilyTransform)String");
            b.item("EditFontSize", "(w:EditFontSize,wf:EditFontSize,web:editTextStyle/FontSizeTransform)Number:double");
            b.item("EditFontStyle", "(w:EditFontStyle/FontStyleTransform,wf:EditFontFamily/FontStyleTransform,web:editTextStyle/FontStyleTransform)String");
            b.item("EditFontWeight", "(w:EditFontWeight/FontWeightTransform,wf:EditFontFamily/FontWeightTransform,web:editTextStyle/FontWeightTransform)String");
            b.item("EditOpacity", "Number:double");
            b.item("DeletedTextColor", "Brush");
            b.item("StickyRowBackground", "Brush");
            b.item("PinnedRowBackground", "Brush");
            b.item("LastStickyRowBackground", "Brush");
            b.item("ActiveCell", "ExportedType:GridCellPosition");
            b.item("CellBackground", "Brush");
            b.item("CellTextColor", "Brush");
            b.item("HeaderSortIndicatorColor", "Brush");
            b.item("HeaderSortIndicatorStyle", "ExportedType:string:SortIndicatorStyle");
            b.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
            b.item("CellFontSize", "(w:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
            b.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
            b.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
            b.item("SectionHeaderBackground", "Brush");
            b.item("SectionHeaderTextColor", "Brush");
            b.item("SectionHeaderFontFamily", "(w:SectionHeaderFontFamily/FontFamilyTransform,wf:SectionHeaderFontFamily,web:sectionHeaderTextStyle/FontFamilyTransform)String");
            b.item("SectionHeaderFontSize", "(w:SectionHeaderFontSize,wf:SectionHeaderFontSize,web:sectionHeaderTextStyle/FontSizeTransform)Number:double");
            b.item("SectionHeaderFontStyle", "(w:SectionHeaderFontStyle/FontStyleTransform,wf:SectionHeaderFontFamily/FontStyleTransform,web:sectionHeaderTextStyle/FontStyleTransform)String");
            b.item("SectionHeaderFontWeight", "(w:SectionHeaderFontWeight/FontWeightTransform,wf:SectionHeaderFontFamily/FontWeightTransform,web:sectionHeaderTextStyle/FontWeightTransform)String");
            b.item("SummaryRootLabelFontFamily", "(w:SummaryRootLabelFontFamily/FontFamilyTransform,wf:SummaryRootLabelFontFamily,web:summaryRootLabelTextStyle/FontFamilyTransform)String");
            b.item("SummaryRootLabelFontSize", "(w:SummaryRootLabelFontSize,wf:SummaryRootLabelFontSize,web:summaryRootLabelTextStyle/FontSizeTransform)Number:double");
            b.item("SummaryRootLabelFontStyle", "(w:SummaryRootLabelFontStyle/FontStyleTransform,wf:SummaryRootLabelFontFamily/FontStyleTransform,web:summaryRootLabelTextStyle/FontStyleTransform)String");
            b.item("SummaryRootLabelFontWeight", "(w:SummaryRootLabelFontWeight/FontWeightTransform,wf:SummaryRootLabelFontFamily/FontWeightTransform,web:summaryRootLabelTextStyle/FontWeightTransform)String");
            b.item("SummarySectionLabelFontFamily", "(w:SummarySectionLabelFontFamily/FontFamilyTransform,wf:SummarySectionLabelFontFamily,web:summarySectionLabelTextStyle/FontFamilyTransform)String");
            b.item("SummarySectionLabelFontSize", "(w:SummarySectionLabelFontSize,wf:SummarySectionLabelFontSize,web:summarySectionLabelTextStyle/FontSizeTransform)Number:double");
            b.item("SummarySectionLabelFontStyle", "(w:SummarySectionLabelFontStyle/FontStyleTransform,wf:SummarySectionLabelFontFamily/FontStyleTransform,web:summarySectionLabelTextStyle/FontStyleTransform)String");
            b.item("SummarySectionLabelFontWeight", "(w:SummarySectionLabelFontWeight/FontWeightTransform,wf:SummarySectionLabelFontFamily/FontWeightTransform,web:summarySectionLabelTextStyle/FontWeightTransform)String");
            b.item("SummaryRootValueTextColor", "Brush");
            b.item("SummaryRootValueFontFamily", "(w:SummaryRootValueFontFamily/FontFamilyTransform,wf:SummaryRootValueFontFamily,web:summaryRootValueTextStyle/FontFamilyTransform)String");
            b.item("SummaryRootValueFontSize", "(w:SummaryRootValueFontSize,wf:SummaryRootValueFontSize,web:summaryRootValueTextStyle/FontSizeTransform)Number:double");
            b.item("SummaryRootValueFontStyle", "(w:SummaryRootValueFontStyle/FontStyleTransform,wf:SummaryRootValueFontFamily/FontStyleTransform,web:summaryRootValueTextStyle/FontStyleTransform)String");
            b.item("SummaryRootValueFontWeight", "(w:SummaryRootValueFontWeight/FontWeightTransform,wf:SummaryRootValueFontFamily/FontWeightTransform,web:summaryRootValueTextStyle/FontWeightTransform)String");
            b.item("SummarySectionValueFontFamily", "(w:SummarySectionValueFontFamily/FontFamilyTransform,wf:SummarySectionValueFontFamily,web:summarySectionValueTextStyle/FontFamilyTransform)String");
            b.item("SummarySectionValueFontSize", "(w:SummarySectionValueFontSize,wf:SummarySectionValueFontSize,web:summarySectionValueTextStyle/FontSizeTransform)Number:double");
            b.item("SummarySectionValueFontStyle", "(w:SummarySectionValueFontStyle/FontStyleTransform,wf:SummarySectionValueFontFamily/FontStyleTransform,web:summarySectionValueTextStyle/FontStyleTransform)String");
            b.item("SummarySectionValueFontWeight", "(w:SummarySectionValueFontWeight/FontWeightTransform,wf:SummarySectionValueFontFamily/FontWeightTransform,web:summarySectionValueTextStyle/FontWeightTransform)String");
            b.item("SummarySectionValueTextColor", "Brush");
            b.item("SummaryRootLabelTextColor", "Brush");
            b.item("SummarySectionLabelTextColor", "Brush");
            b.item("SummaryRootSelectedBackground", "Brush");
            b.item("SummarySectionSelectedBackground", "Brush");
            b.item("PinnedAreaSeparatorWidth", "Number:int");
            b.item("HeaderSeparatorWidth", "Number:int");
            b.item("HeaderSeparatorBackground", "Brush");
            b.item("HeaderBackground", "Brush");
            b.item("HeaderTextColor", "Brush");
            b.item("HeaderFontFamily", "(w:HeaderFontFamily/FontFamilyTransform,wf:HeaderFontFamily,web:headerTextStyle/FontFamilyTransform)String");
            b.item("HeaderFontSize", "(w:HeaderFontSize,wf:HeaderFontSize,web:headerTextStyle/FontSizeTransform)Number:double");
            b.item("HeaderFontStyle", "(w:HeaderFontStyle/FontStyleTransform,wf:HeaderFontFamily/FontStyleTransform,web:headerTextStyle/FontStyleTransform)String");
            b.item("HeaderFontWeight", "(w:HeaderFontWeight/FontWeightTransform,wf:HeaderFontFamily/FontWeightTransform,web:headerTextStyle/FontWeightTransform)String");
            b.item("RowSeparatorBackground", "Brush");
            b.item("HeaderRowSeparatorBackground", "Brush");
            b.item("RowSeparatorStickyRowBackground", "Brush");
            b.item("RowSeparatorLastStickyRowBackground", "Brush");
            b.item("RowSeparatorPinnedRowBackground", "Brush");
            b.item("ColumnResizingSeparatorWidth", "Number:int");
            b.item("ColumnMovingSeparatorWidth", "Number:int");
            b.item("ColumnResizingSeparatorBackground", "Brush");
            b.item("ColumnMovingSeparatorBackground", "Brush");
            b.item("ShiftSectionContent", "Boolean");
            b.item("ColumnOptionsIconAlignment", "ExportedType:string:ColumnOptionsIconAlignment");
            b.item("ColumnOptionsIconColor", "Brush");
            b.item("ColumnOptionsIconBehavior", "ExportedType:string:ColumnOptionsIconBehavior");
            b.item("Border", "Brush");
            b.item("BorderWidthBottom", "(w:BorderWidth.Bottom,wf:BorderWidthBottom)Number:double");
            b.item("BorderWidthLeft", "(w:BorderWidth.Left,wf:BorderWidthLeft)Number:double");
            b.item("BorderWidthRight", "(w:BorderWidth.Right,wf:BorderWidthRight)Number:double");
            b.item("BorderWidthTop", "(w:BorderWidth.Top,wf:BorderWidthTop)Number:double");
            b.item("NotifyOnAllSelectionChanges", "Boolean");
            b.item("CornerRadiusBottomRight", "(w:CornerRadius.BottomRight,wf:CornerRadiusBottomRight)Number:double");
            b.item("CornerRadiusBottomLeft", "(w:CornerRadius.BottomLeft,wf:CornerRadiusBottomLeft)Number:double");
            b.item("CornerRadiusTopLeft", "(w:CornerRadius.TopLeft,wf:CornerRadiusTopLeft)Number:double");
            b.item("CornerRadiusTopRight", "(w:CornerRadius.TopRight,wf:CornerRadiusTopRight)Number:double");
            b.item("IsActiveCellStyleEnabled", "Boolean");
            b.item("ResponsiveStates", "Collection:ResponsiveState:ResponsiveStatesCollection:ResponsiveState");
            b.item("SortDescriptions", "Collection:ColumnSortDescription:ColumnSortDescriptionCollection:ColumnSortDescription");
            b.item("GroupDescriptions", "Collection:ColumnGroupDescription:ColumnGroupDescriptionCollection:ColumnGroupDescription");
            b.item("FilterExpressions", "Collection:FilterExpression:FilterExpressionCollection:FilterExpression");
            b.item("SummaryDescriptions", "Collection:ColumnSummaryDescription:ColumnSummaryDescriptionCollection:ColumnSummaryDescription");
            b.item("SummaryScope", "ExportedType:string:DataSourceSummaryScope");
            b.item("IsGroupCollapsable", "Boolean");
            b.item("GroupHeaderDisplayMode", "ExportedType:string:DataSourceSectionHeaderDisplayMode");
            b.item("IsGroupExpandedDefault", "Boolean");
            b.item("GroupSummaryDisplayMode", "ExportedType:string:GroupSummaryDisplayMode");
            b.item("AutoAcceptEdits", "Boolean");
            b.item("PrimaryKey", "Array:string");
            b.item("ActualPrimaryKey", "Array:string");
            b.item("ActualColumns", "Collection:Column:GridColumnCollection:Column");
            b.item("Columns", "Collection:Column:GridColumnCollection:Column");
            b.item("ReactsToSortChanges", "Boolean");
            b.item("ReactsToGroupChanges", "Boolean");
            b.item("ReactsToFilterChanges", "Boolean");
            b.item("FilterExpressionsChangingRef", "EventRef::filterExpressionsChanging");
            b.item("FilterExpressionsChangedRef", "EventRef::filterExpressionsChanged");
            b.item("CellPreviewPointerDownRef", "EventRef::cellPreviewPointerDown");
            b.item("CellPreviewPointerUpRef", "EventRef::cellPreviewPointerUp");
            b.item("CellPointerDownRef", "EventRef::cellPointerDown");
            b.item("CellPointerUpRef", "EventRef::cellPointerUp");
            b.item("CellClickedRef", "EventRef::cellClicked");
            b.item("SortDescriptionsChangedRef", "EventRef::sortDescriptionsChanged");
            b.item("GroupDescriptionsChangedRef", "EventRef::groupDescriptionsChanged");
            b.item("ColumnHiddenChangedRef", "EventRef::columnHiddenChanged");
            b.item("ColumnPinnedChangedRef", "EventRef::columnPinnedChanged");
            b.item("CellValueChangingRef", "EventRef::cellValueChanging");
            b.item("DataCommittedRef", "EventRef::dataCommitted");
            b.item("DataCommittingRef", "EventRef::dataCommitting");
            b.item("SizeChangedRef", "EventRef::sizeChanged");
            b.item("ActualColumnsChangedRef", "EventRef::actualColumnsChanged");
            b.item("ColumnsAutoGeneratedRef", "EventRef::columnsAutoGenerated");
            b.item("SelectedItemsChangedRef", "EventRef::selectedItemsChanged");
            b.item("SelectedKeysChangedRef", "EventRef::selectedKeysChanged");
            b.item("SelectedCellsChangedRef", "EventRef::selectedCellsChanged");
            b.item("ActiveCellChangedRef", "EventRef::activeCellChanged");
            b.item("SelectedCellRangesChangedRef", "EventRef::selectedCellRangesChanged");
            b.item("ColumnWidthChangedRef", "EventRef::columnWidthChanged");
            b.item("CellEditStartedRef", "EventRef::cellEditStarted");
            b.item("CellEditEndedRef", "EventRef::cellEditEnded");
            b.item("RowEditStartedRef", "EventRef::rowEditStarted");
            b.item("RowEditEndedRef", "EventRef::rowEditEnded");
            b.item("ActualPrimaryKeyChangeRef", "EventRef::actualPrimaryKeyChange");
            DataGridDescriptionMetadata.e(a, b);
        }
        static d(a) {
            DataGridDescriptionMetadata.b(a);
            a.n("DataGrid", () => new DataGridDescription());
            a.m("DataGrid", DataGridDescriptionMetadata.a);
        }
    }
    DataGridDescriptionMetadata.$t = /*@__PURE__*/ markType(DataGridDescriptionMetadata, 'DataGridDescriptionMetadata');
    DataGridDescriptionMetadata.a = null;
    return DataGridDescriptionMetadata;
})();
/**
 * @hidden
 */
export let GridCellEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class GridCellEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (GridCellEventArgsDescriptionMetadata.a == null) {
                GridCellEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                GridCellEventArgsDescriptionMetadata.c(a, GridCellEventArgsDescriptionMetadata.a);
                DataGridDescriptionMetadata.d(a);
            }
        }
        static c(a, b) {
            b.item("Grid", "ExportedType:Grid");
        }
        static d(a) {
            GridCellEventArgsDescriptionMetadata.b(a);
            a.n("GridCellEventArgs", () => new GridCellEventArgsDescription());
            a.m("GridCellEventArgs", GridCellEventArgsDescriptionMetadata.a);
        }
    }
    GridCellEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(GridCellEventArgsDescriptionMetadata, 'GridCellEventArgsDescriptionMetadata');
    GridCellEventArgsDescriptionMetadata.a = null;
    return GridCellEventArgsDescriptionMetadata;
})();
//# sourceMappingURL=DataGridDescriptionMetadata_combined.js.map
