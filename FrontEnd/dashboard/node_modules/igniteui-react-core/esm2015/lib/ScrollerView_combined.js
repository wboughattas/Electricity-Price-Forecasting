/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, runOn, delegateCombine, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, enumGetBox, Point_$type, Boolean_$type } from "./type";
import { IScrollerView_$type } from "./IScrollerView";
import { CanvasGestureDOMEventProxy } from "./CanvasGestureDOMEventProxy";
import { Brush } from "./Brush";
import { DOMExecutionContext } from "./DOMExecutionContext";
import { DoubleAnimator } from "./DoubleAnimator";
import { Rect } from "./Rect";
import { ScrollbarStyle_$type } from "./ScrollbarStyle";
import { truncate, isNaN_ } from "./number";
import { List$1 } from "./List$1";
import { EasingFunctions } from "./EasingFunctions";
import { ScrollerScrollingEventArgs } from "./ScrollerScrollingEventArgs";
/**
 * @hidden
 */
export let ScrollerView = /*@__PURE__*/ (() => {
    class ScrollerView extends Base {
        constructor(a) {
            super();
            this.c = null;
            this.ab = null;
            this.af = null;
            this.b = null;
            this.aa = null;
            this.a = null;
            this.ae = null;
            this.ac = null;
            this.ad = null;
            this.ag = null;
            this.e = false;
            this.d = null;
            this.i = false;
            this.h = false;
            this.w = 0;
            this.t = 0;
            this.x = -1;
            this.u = -1;
            this.g = false;
            this.f = false;
            this.v = 0;
            this.s = 0;
            this.c = a;
        }
        getDefaultScrollbarBrush() {
            return ((() => {
                let $ret = new Brush();
                $ret.fill = "#666666";
                return $ret;
            })());
        }
        provideContainer(a) {
            if (a == null) {
                if (this.ab != null) {
                    this.ab = null;
                }
                if (this.a != null) {
                    this.a.ak = null;
                    this.a.aq();
                }
                return;
            }
            this.ab = a;
            this.c.executionContext = new DOMExecutionContext(this.ab);
            let b = Math.round(this.ab.rootWrapper.width());
            let c = Math.round(this.ab.rootWrapper.height());
            this.ae = this.ab.rootWrapper;
            this.ae.setStyleProperty("position", "relative");
            this.af = this.ab.createElement("div");
            this.af.setStyleProperty("position", "relative");
            this.af.setStyleProperty("width", "100%");
            this.af.setStyleProperty("height", "100%");
            this.af.setStyleProperty("overflow", "hidden");
            this.ae.append(this.af);
            this.ad = this.ab.createElement("div");
            this.ad.setStyleProperty("position", "absolute");
            this.ad.setStyleProperty("height", this.c.scrollbarSpan + "px");
            this.ad.setStyleProperty("width", this.c.minScrollbarSize + "px");
            this.ad.setStyleProperty("background-color", this.c.scrollbarBrush._fill);
            this.ad.setStyleProperty("display", "none");
            this.ad.setStyleProperty("border-radius", "5px");
            this.ad.setStyleProperty("z-index", "10000");
            this.ad.setStyleProperty("bottom", "0px");
            this.ae.append(this.ad);
            this.ag = this.ab.createElement("div");
            this.ag.setStyleProperty("position", "absolute");
            this.ag.setStyleProperty("width", this.c.scrollbarSpan + "px");
            this.ag.setStyleProperty("height", this.c.minScrollbarSize + "px");
            this.ag.setStyleProperty("background-color", this.c.scrollbarBrush._fill);
            this.ag.setStyleProperty("display", "none");
            this.ag.setStyleProperty("border-radius", "5px");
            this.ag.setStyleProperty("z-index", "10000");
            this.ag.setStyleProperty("right", "0px");
            this.ae.append(this.ag);
            this.updateScrollbarStatus(false);
            this.aa = this.af.getNativeElement();
            this.a = new CanvasGestureDOMEventProxy(this.ab.rootWrapper, this.ab, true);
            this.ab.rootWrapper.setProperty("tabIndex", 1000);
            this.ab.rootWrapper.setRawStyleProperty("outline", "none");
            this.a.c2 = true;
            this.a.bp = true;
            let d = this.a;
            d.onMouseWheel = delegateCombine(d.onMouseWheel, runOn(this, this.l));
            let e = this.a;
            e.onMouseWheelHorizontal = delegateCombine(e.onMouseWheelHorizontal, runOn(this, this.m));
            let f = this.a;
            f.onMouseLeave = delegateCombine(f.onMouseLeave, runOn(this, this.an));
            let g = this.a;
            g.onDragStarted = delegateCombine(g.onDragStarted, runOn(this, this.am));
            let h = this.a;
            h.onDragDelta = delegateCombine(h.onDragDelta, runOn(this, this.al));
            let i = this.a;
            i.onDragCompleted = delegateCombine(i.onDragCompleted, runOn(this, this.ak));
            let j = this.a;
            j.onFlingStarted = delegateCombine(j.onFlingStarted, runOn(this, this.j));
            let k = this.a;
            k.onContactStarted = delegateCombine(k.onContactStarted, runOn(this, this.aj));
            let l = this.a;
            l.onContactMoved = delegateCombine(l.onContactMoved, runOn(this, this.ai));
            let m = this.a;
            m.onContactCompleted = delegateCombine(m.onContactCompleted, runOn(this, this.ah));
            this.a.aa = true;
            this.a.am = runOn(this, this.r);
            let n = this.a;
            n.onKeyDown = delegateCombine(n.onKeyDown, runOn(this, this.k));
            this.a.an = (o) => {
                let e_ = o.originalEvent;
                let p = (e_.type);
                if (p == "pointerdown" && !this.a.bl(o)) {
                    return false;
                }
                return true;
            };
            this.c.dg(b, c);
            this.c.horizontalAnimation.u(this.ab);
            this.c.verticalAnimation.u(this.ab);
            this.attachNativeScroll();
        }
        k(a) {
            return this.c.an(a, (this.a.bc & 4) != 0, (this.a.bc & 2) != 0);
        }
        r(a, b, c) {
            if (this.f || this.g) {
                return true;
            }
            if (c || b) {
                return true;
            }
            if (this.n(a, b)) {
                this.c.c1();
                return true;
            }
            else if (this.c.isHorizontalActive) {
                this.c.c5();
            }
            if (this.o(a, b)) {
                this.c.c2();
                return true;
            }
            else if (this.c.isVerticalActive) {
                this.c.c6();
            }
            return false;
        }
        ah(a, b) {
            this.f = false;
            this.g = false;
            this.c.isDraggingVBar = false;
            this.c.isDraggingHBar = false;
        }
        ai(a, b) {
            if (this.g) {
                let c = a.y - this.v;
                this.v = a.y;
                this.c.df(c);
            }
            else if (this.f) {
                let d = a.x - this.s;
                this.s = a.x;
                this.c.dd(d);
            }
        }
        aj(a, b) {
            this.e = false;
            this.cancelInertia();
            let c = this.q(a, b);
            let d = this.p(a, b);
            if (c) {
                this.c.isDraggingVBar = true;
                this.g = true;
                this.v = a.y;
                this.focus();
            }
            else if (d) {
                this.c.isDraggingHBar = true;
                this.f = true;
                this.s = a.x;
                this.focus();
            }
        }
        p(a, b) {
            if (!this.h) {
                return false;
            }
            if (a.y >= this.c.viewportHeight - this.c.scrollbarSpan && a.y <= this.c.viewportHeight && a.x >= this.u - this.t / 2 && a.x <= this.u + this.t / 2) {
                return true;
            }
            return false;
        }
        q(a, b) {
            if (!this.i) {
                return false;
            }
            if (a.x >= this.c.viewportWidth - this.c.scrollbarSpan && a.x <= this.c.viewportWidth && a.y >= this.x - this.w / 2 && a.y <= this.x + this.w / 2) {
                return true;
            }
            return false;
        }
        n(a, b) {
            if (!this.h) {
                return false;
            }
            return a.y >= this.c.viewportHeight - this.c.scrollbarSpan - 40 && a.y <= this.c.viewportHeight;
        }
        o(a, b) {
            if (!this.i) {
                return false;
            }
            return a.x >= this.c.viewportWidth - this.c.scrollbarSpan - 40 && a.x <= this.c.viewportWidth;
        }
        j(a, b, c) {
            this.e = true;
            return true;
        }
        onViewportHeightChanged(a) {
            this.a.bf = new Rect(0, 0, 0, this.c.viewportWidth, this.c.viewportHeight);
        }
        onViewportWidthChanged(a) {
            this.a.bf = new Rect(0, 0, 0, this.c.viewportWidth, this.c.viewportHeight);
        }
        onContentHeightChanged(a) {
            if (this.ac != null) {
                this.ac.setStyleProperty("height", a + "px");
            }
        }
        onContentWidthChanged(a) {
            if (this.ac != null) {
                this.ac.setStyleProperty("width", a + "px");
            }
        }
        cancelInertia() {
        }
        ak(a) {
            if (this.f || this.g) {
                return;
            }
            this.e = false;
            this.c.da(a);
        }
        al(a) {
            if (this.f || this.g) {
                return;
            }
            this.c.db(a);
        }
        updateScrollTop(a) {
            this.aa.scrollTop = truncate(a);
        }
        am(a) {
            if (this.f || this.g) {
                return;
            }
            this.e = false;
            this.c.dc(a);
        }
        getInitialScrollLeft() {
            return this.aa.scrollLeft;
        }
        getInitialScrollTop() {
            return this.aa.scrollTop;
        }
        l(a, b) {
            this.e = false;
            this.cancelInertia();
            return this.c.ap(a, 0, b);
        }
        m(a, b) {
            this.e = false;
            this.cancelInertia();
            return this.c.ap(a, b, 0);
        }
        an(a) {
            if (this.c.horizontalScrollbarStatus > 0) {
                this.c.c5();
            }
            if (this.c.verticalScrollbarStatus > 0) {
                this.c.c6();
            }
        }
        updateScrollLeft(a) {
            this.aa.scrollLeft = truncate(a);
        }
        provideContent(a) {
            this.ac = a;
            this.af.append(this.ac);
        }
        requestWork(a) {
            if (this.ab == null) {
                return;
            }
            if (this.d == null) {
                this.d = this.ab.getRequestAnimationFrame();
            }
            if (this.e) {
                a();
            }
            else {
                this.d(() => a());
            }
        }
        hideVScrollbar() {
            if (this.i) {
                this.i = false;
                this.ag.setStyleProperty("display", "none");
            }
        }
        hideHScrollbar() {
            if (this.h) {
                this.h = false;
                this.ad.setStyleProperty("display", "none");
            }
        }
        updateVScrollbar(a, b) {
            let c = false;
            if (!this.i) {
                c = true;
                this.i = true;
                this.ag.setStyleProperty("display", "block");
            }
            if (a != this.x || c) {
                this.x = a;
                if (this.i) {
                    this.ag.setRawYPosition(a - b / 2);
                }
            }
            if (b != this.w || c) {
                this.w = b;
                if (this.i) {
                    this.ag.setRawSize(this.z(), b);
                }
            }
        }
        updateHScrollbar(a, b) {
            let c = false;
            if (!this.h) {
                c = true;
                this.h = true;
                this.ad.setStyleProperty("display", "block");
            }
            if (a != this.u || c) {
                this.u = a;
                if (this.h) {
                    this.ad.setRawXPosition(a - b / 2);
                }
            }
            if (b != this.t || c) {
                this.t = b;
                if (this.h) {
                    this.ad.setRawSize(b, this.y());
                }
            }
        }
        updateScrollbarStatus(a) {
            if (this.ad != null && this.ag != null) {
                switch (this.c.scrollbarStyle) {
                    case 0:
                        if (a) {
                            this.ad.setStyleProperty("opacity", "1");
                            this.ag.setStyleProperty("opacity", "1");
                            this.ad.setRawSize(this.t, this.y());
                            this.ag.setRawSize(this.z(), this.w);
                        }
                        break;
                    case 1:
                        if (a) {
                            this.ad.setRawSize(this.t, this.y());
                            this.ag.setRawSize(this.z(), this.w);
                        }
                        this.ad.setStyleProperty("opacity", this.c.horizontalScrollbarStatus.toString());
                        this.ag.setStyleProperty("opacity", this.c.verticalScrollbarStatus.toString());
                        break;
                    case 2:
                        if (a) {
                            this.ad.setStyleProperty("opacity", "1");
                            this.ag.setStyleProperty("opacity", "1");
                        }
                        this.ad.setRawSize(this.t, this.y());
                        this.ag.setRawSize(this.z(), this.w);
                        break;
                }
            }
        }
        y() {
            if (this.c.scrollbarStyle == 2) {
                return this.c.horizontalScrollbarStatus * (this.c.scrollbarSpan - 2) + 2;
            }
            return this.c.scrollbarSpan;
        }
        z() {
            if (this.c.scrollbarStyle == 2) {
                return this.c.verticalScrollbarStatus * (this.c.scrollbarSpan - 2) + 2;
            }
            return this.c.scrollbarSpan;
        }
        focus() {
            this.ab.rootWrapper.focus(true);
        }
        onDetachedFromUI() {
            if (this.a != null) {
                this.a.bb(this.ab.rootWrapper, "");
            }
        }
        onAttachedToUI() {
            if (this.a != null) {
                this.a.ap(this.ab.rootWrapper, "");
            }
        }
        attachNativeScroll() {
            let a = this.af.getNativeElement();
            a.addEventListener("scroll", runOn(this, this.onNativeScroll));
        }
        detachNativeScroll() {
            let a = this.af.getNativeElement();
            a.removeEventListener("scroll", runOn(this, this.onNativeScroll));
        }
        onNativeScroll(a) {
            let b = this.aa.scrollTop - this.c.scrollTop;
            let c = this.aa.scrollLeft - this.c.scrollLeft;
            this.c.scrollTo(this.aa.scrollLeft, this.aa.scrollTop);
        }
    }
    ScrollerView.$t = /*@__PURE__*/ markType(ScrollerView, 'ScrollerView', Base.$, [IScrollerView_$type]);
    return ScrollerView;
})();
/**
 * @hidden
 */
export let Scroller = /*@__PURE__*/ (() => {
    class Scroller extends Base {
        constructor() {
            super();
            this.bf = 49;
            this._keyboardListener = null;
            this.a7 = NaN;
            this.a1 = 49;
            this.az = NaN;
            this.be = 48;
            this.a6 = NaN;
            this.a0 = 48;
            this.ay = NaN;
            this.a4 = 0;
            this.a8 = 20;
            this.bb = 8;
            this.bh = 0;
            this.dv = null;
            this.x = false;
            this.a3 = 0;
            this.bj = 0;
            this.bi = 0;
            this.bd = 0;
            this.bc = 0;
            this.c = null;
            this.v = true;
            this.aa = false;
            this.a2 = 0;
            this.ax = 0;
            this.e = 0;
            this.a5 = 0;
            this.bg = 0;
            this.j = null;
            this.k = null;
            this.bs = 0;
            this.b3 = 0;
            this.bt = 0;
            this.b4 = 0;
            this._executionContext = null;
            this._isDraggingVBar = false;
            this._isDraggingHBar = false;
            this.s = false;
            this.q = false;
            this.r = false;
            this.dx = null;
            this.p = false;
            this.propertyChanged = null;
            this.onScrolling = null;
            this.onScrollStart = null;
            this.onScrollStop = null;
            this._isScrolling = false;
            this.a9 = 0;
            this.ba = 0;
            this.w = false;
            this.aw = new List$1(Boolean_$type, 0);
            this.b9 = 500;
            this.ca = 0;
            this.cb = 0;
            this.o = false;
            this.z = false;
            this.n = false;
            this.y = false;
            this.t = true;
            this.u = true;
            this.dv = this.view.getDefaultScrollbarBrush();
            this.j = new DoubleAnimator(0, 1, 400);
            this.k = new DoubleAnimator(0, 1, 400);
            this.j.b = EasingFunctions.cubicEase;
            this.k.b = EasingFunctions.cubicEase;
            let a = this.j;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.cz));
            let b = this.k;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.c0));
        }
        get smallVerticalChange() {
            return this.bf;
        }
        set smallVerticalChange(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.de("SmallVerticalChange", b, this.bf);
            }
        }
        get keyboardListener() {
            return this._keyboardListener;
        }
        set keyboardListener(a) {
            this._keyboardListener = a;
        }
        get largeVerticalChange() {
            return this.a7;
        }
        set largeVerticalChange(a) {
            let b = this.a7;
            this.a7 = a;
            if (b != this.a7) {
                this.de("LargeVerticalChange", b, this.a7);
            }
        }
        get bo() {
            return this.a1;
        }
        set bo(a) {
            let b = this.a1;
            this.a1 = a;
            if (b != this.a1) {
                this.de("ActualSmallVerticalChange", b, this.a1);
            }
        }
        get bm() {
            return this.az;
        }
        set bm(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.de("ActualLargeVerticalChange", b, this.az);
            }
        }
        get smallHorizontalChange() {
            return this.be;
        }
        set smallHorizontalChange(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.de("SmallHorizontalChange", b, this.be);
            }
        }
        get largeHorizontalChange() {
            return this.a6;
        }
        set largeHorizontalChange(a) {
            let b = this.a6;
            this.a6 = a;
            if (b != this.a6) {
                this.de("LargeHorizontalChange", b, this.a6);
            }
        }
        get bn() {
            return this.a0;
        }
        set bn(a) {
            let b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.de("ActualSmallHorizontalChange", b, this.a0);
            }
        }
        get bl() {
            return this.ay;
        }
        set bl(a) {
            let b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.de("ActualLargeHorizontalChange", b, this.ay);
            }
        }
        get contentWidth() {
            return this.a4;
        }
        set contentWidth(a) {
            let b = this.a4;
            this.a4 = a;
            if (b != this.a4) {
                this.de("ContentWidth", b, this.a4);
            }
        }
        get minScrollbarSize() {
            return this.a8;
        }
        set minScrollbarSize(a) {
            let b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.de("MinScrollbarSize", b, this.a8);
            }
        }
        get scrollbarSpan() {
            return this.bb;
        }
        set scrollbarSpan(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.de("ScrollbarSpan", b, this.bb);
            }
        }
        an(a, b, c) {
            switch (a) {
                case 11: return this.aq(b, c);
                case 10: return this.ar(b, c);
                case 17: return this.ah(b, c);
                case 15: return this.au(b, c);
                case 14: return this.ao(b, c);
                case 16: return this.as(b, c);
                case 13: return this.am(b, c);
                case 12: return this.ai(b, c);
                case 2: return this.at(b, c);
                case 3: return this.aj(b, c);
                case 8: return this.ak();
                case 57: return this.al();
            }
            return false;
        }
        al() {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onF2()) {
                    return true;
                }
            }
            return false;
        }
        ak() {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onEscape()) {
                    return true;
                }
            }
            return false;
        }
        at(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onTab(a, b)) {
                    return true;
                }
            }
            return false;
        }
        ai(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onEnd(a, b)) {
                    return true;
                }
            }
            return false;
        }
        am(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onHome(a, b)) {
                    return true;
                }
            }
            return false;
        }
        as(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onRightArrow(a, b)) {
                    return true;
                }
            }
            if (this.scrollLeft + this.viewportWidth >= this.contentWidth) {
                return false;
            }
            this.dl(this.bn, 0);
            return true;
        }
        ao(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onLeftArrow(a, b)) {
                    return true;
                }
            }
            if (this.scrollLeft <= 0) {
                return false;
            }
            this.dl(this.bn * -1, 0);
            return true;
        }
        au(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onUpArrow(a, b)) {
                    return true;
                }
            }
            if (this.scrollTop <= 0) {
                return false;
            }
            this.dl(0, this.bo * -1);
            return true;
        }
        ah(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onDownArrow(a, b)) {
                    return true;
                }
            }
            if (this.scrollTop + this.viewportHeight >= this.contentHeight) {
                return false;
            }
            this.dl(0, this.bo);
            return true;
        }
        ar(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onPageUp(a, b)) {
                    return true;
                }
            }
            if (this.scrollTop < 0) {
                return false;
            }
            this.dl(0, this.bm * -1);
            return true;
        }
        aq(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onPageDown(a, b)) {
                    return true;
                }
            }
            if (this.scrollTop + this.viewportHeight >= this.contentHeight) {
                return false;
            }
            this.dl(0, this.bm);
            return true;
        }
        aj(a, b) {
            if (this.keyboardListener != null) {
                if (this.keyboardListener.onEnter(a, b)) {
                    return true;
                }
            }
            return false;
        }
        get verticalTrackStartInset() {
            return this.bh;
        }
        set verticalTrackStartInset(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.de("VerticalTrackStartInset", b, this.bh);
            }
        }
        get scrollbarBrush() {
            return this.dv;
        }
        set scrollbarBrush(a) {
            let b = this.dv;
            this.dv = a;
            if (b != this.dv) {
                this.de("ScrollbarBrush", b, this.dv);
            }
        }
        de(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.dh(a, b, c);
        }
        get av() {
            return this.x;
        }
        set av(a) {
            this.x = a;
            if (!this.x) {
                this.view.updateScrollTop(this.scrollTop);
                this.view.updateScrollLeft(this.scrollLeft);
            }
        }
        dh(a, b, c) {
            switch (a) {
                case "ContentWidth":
                    this.view.onContentWidthChanged(this.contentWidth);
                    let d = c;
                    let e = b;
                    if (d < e && this.scrollLeft + this.viewportWidth >= d) {
                        this.dm(d - (this.scrollLeft + this.viewportWidth), 0);
                    }
                    this.ds();
                    break;
                case "ContentHeight":
                    this.view.onContentHeightChanged(this.contentHeight);
                    let f = c;
                    let g = b;
                    if (f < g && this.scrollTop > 0 && this.scrollTop + this.viewportHeight >= f) {
                        this.dm(0, f - (this.scrollTop + this.viewportHeight));
                    }
                    this.du();
                    break;
                case "ScrollTop":
                    if (!this.av) {
                        this.view.updateScrollTop(this.scrollTop);
                    }
                    break;
                case "ScrollLeft":
                    if (!this.av) {
                        this.view.updateScrollLeft(this.scrollLeft);
                    }
                    break;
                case "ViewportWidth":
                    this.view.onViewportWidthChanged(this.viewportWidth);
                    if (isNaN_(this.largeVerticalChange)) {
                        this.bl = this.viewportWidth;
                    }
                    if (this.contentWidth > 0 && this.scrollLeft + this.viewportWidth > this.contentWidth) {
                        this.dm(this.contentWidth - this.viewportWidth - this.scrollLeft, 0);
                    }
                    this.ds();
                    if (this.view.getInitialScrollLeft() != this.scrollLeft) {
                        this.view.updateScrollLeft(this.scrollLeft);
                    }
                    break;
                case "ViewportHeight":
                    this.view.onViewportHeightChanged(this.viewportHeight);
                    if (isNaN_(this.largeVerticalChange)) {
                        this.bm = this.viewportHeight;
                    }
                    this.du();
                    if (this.view.getInitialScrollTop() != this.scrollTop) {
                        this.view.updateScrollTop(this.scrollTop);
                    }
                    break;
                case "ScrollbarBrush":
                case "ScrollbarSpan":
                case "MinScrollbarSize":
                case "VerticalTrackStartInset":
                    this.du();
                    this.ds();
                    break;
                case "HorizontalScrollbarStatus":
                case "VerticalOpacity":
                    this.view.updateScrollbarStatus(false);
                    break;
                case "ScrollbarStyle":
                    this.view.updateScrollbarStatus(true);
                    break;
            }
        }
        get contentHeight() {
            return this.a3;
        }
        set contentHeight(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.de("ContentHeight", b, this.a3);
            }
        }
        df(a) {
            let b = Math.max(this.minScrollbarSize, this.actualVerticalScrollbarHeight);
            let c = this.verticalTrackStartInset + (b / 2);
            let d = this.viewportHeight - (b / 2);
            let e = a / (d - c);
            let f = e * (this.contentHeight - this.viewportHeight);
            this.dl(0, f);
        }
        dd(a) {
            let b = Math.max(this.minScrollbarSize, this.actualHorizontalScrollbarWidth);
            let c = 0 + (b / 2);
            let d = this.viewportWidth - (b / 2);
            let e = a / (d - c);
            let f = e * (this.contentWidth - this.viewportWidth);
            this.dl(f, 0);
        }
        dg(a, b, c = false) {
            let d = this.bj;
            let e = this.bi;
            this.bj = a;
            this.bi = b;
            if (c && (d != a || e != b)) {
                this.de("ViewportWidth", d, a);
                this.de("ViewportHeight", e, b);
            }
        }
        get viewportWidth() {
            return this.bj;
        }
        set viewportWidth(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.de("ViewportWidth", b, this.bj);
            }
        }
        get viewportHeight() {
            return this.bi;
        }
        set viewportHeight(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.de("ViewportHeight", b, this.bi);
            }
        }
        get scrollTop() {
            return this.bd;
        }
        set scrollTop(a) {
            let b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.de("ScrollTop", b, this.bd);
            }
        }
        get scrollLeft() {
            return this.bc;
        }
        set scrollLeft(a) {
            let b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.de("ScrollLeft", b, this.bc);
            }
        }
        get view() {
            if (this.c == null) {
                this.c = new ScrollerView(this);
            }
            return this.c;
        }
        set view(a) {
            this.c = a;
        }
        provideContainer(a) {
            this.view.provideContainer(a);
            this.bd = this.view.getInitialScrollTop();
            this.bc = this.view.getInitialScrollLeft();
            this.ds();
            this.du();
        }
        onDetachedFromUI() {
            this.view.onDetachedFromUI();
        }
        onAttachedToUI() {
            this.view.onAttachedToUI();
        }
        provideContent(a) {
            this.view.provideContent(a);
        }
        ap(a, b, c) {
            this.r = false;
            this.q = false;
            this.s = false;
            this.view.cancelInertia();
            if (this.keyboardListener != null) {
                this.keyboardListener.onWheel();
            }
            this.dl(b, c);
            return true;
        }
        get lockScrollDirection() {
            return this.v;
        }
        set lockScrollDirection(a) {
            this.v = true;
        }
        get actualVerticalScrollbarHeight() {
            return this.a2;
        }
        set actualVerticalScrollbarHeight(a) {
            let b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.de("ActualVerticalScrollbarHeight", b, this.a2);
            }
        }
        get actualHorizontalScrollbarWidth() {
            return this.ax;
        }
        set actualHorizontalScrollbarWidth(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.de("ActualHorizontalScrollbarWidth", b, this.ax);
            }
        }
        get scrollbarStyle() {
            return this.e;
        }
        set scrollbarStyle(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.de("ScrollbarStyle", enumGetBox(ScrollbarStyle_$type, b), enumGetBox(ScrollbarStyle_$type, this.e));
            }
        }
        get horizontalScrollbarStatus() {
            return this.a5;
        }
        set horizontalScrollbarStatus(a) {
            let b = this.a5;
            this.a5 = a;
            if (b != this.a5) {
                this.de("HorizontalScrollbarStatus", b, this.a5);
            }
        }
        get verticalScrollbarStatus() {
            return this.bg;
        }
        set verticalScrollbarStatus(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.de("VerticalOpacity", b, this.bg);
            }
        }
        get horizontalAnimation() {
            return this.j;
        }
        get verticalAnimation() {
            return this.k;
        }
        get executionContext() {
            return this._executionContext;
        }
        set executionContext(a) {
            this._executionContext = a;
        }
        get isVerticalActive() {
            return this.y;
        }
        get isHorizontalActive() {
            return this.n;
        }
        get isDraggingVBar() {
            return this._isDraggingVBar;
        }
        set isDraggingVBar(a) {
            this._isDraggingVBar = a;
        }
        get isDraggingHBar() {
            return this._isDraggingHBar;
        }
        set isDraggingHBar(a) {
            this._isDraggingHBar = a;
        }
        focus() {
            this.view.focus();
        }
        dc(a) {
            this.view.focus();
            this.s = false;
            this.q = false;
            this.r = false;
            this.p = true;
            this.dx = { $type: Point_$type, x: a.x, y: a.y };
        }
        db(a) {
            if (this.p) {
                let b = a.y - this.dx.y;
                let c = a.x - this.dx.x;
                if (this.lockScrollDirection && !this.r) {
                    this.r = true;
                    if (b > 0 || c > 0) {
                        if (b > c) {
                            this.s = true;
                        }
                        else {
                            this.s = true;
                        }
                    }
                }
                this.dx = { $type: Point_$type, x: a.x, y: a.y };
                this.dl(-c, -b);
            }
        }
        get isScrolling() {
            return this._isScrolling;
        }
        set isScrolling(a) {
            this._isScrolling = a;
        }
        scrollTo(a, b) {
            this.view.detachNativeScroll();
            this.a9 = a - this.scrollLeft;
            this.ba = b - this.scrollTop;
            this.dk();
        }
        dl(a, b) {
            this.view.detachNativeScroll();
            this.a9 += a;
            this.ba += b;
            this.dk();
        }
        dm(a, b) {
            this.view.detachNativeScroll();
            this.a9 += a;
            this.ba += b;
            this.dr();
        }
        dk() {
            if (this.w) {
                return;
            }
            this.w = true;
            this.view.requestWork(runOn(this, this.dr));
        }
        dr() {
            this.w = false;
            let a = this.a9;
            let b = this.ba;
            this.a9 = 0;
            this.ba = 0;
            if (this.r) {
                if (this.s) {
                    a = 0;
                }
                if (this.q) {
                    b = 0;
                }
            }
            if (a != 0) {
                this.t = false;
                this.c1();
                this.c5();
                this.t = true;
            }
            if (b != 0) {
                this.u = false;
                this.c2();
                this.c6();
                this.u = true;
            }
            let c = Math.round(this.scrollTop + b);
            let d = Math.round(this.scrollLeft + a);
            if (c < 0) {
                c = 0;
                this.view.cancelInertia();
            }
            if (d < 0) {
                d = 0;
                this.view.cancelInertia();
            }
            if (c + this.viewportHeight > this.contentHeight) {
                c = this.contentHeight - this.viewportHeight;
                if (c < 0) {
                    c = 0;
                }
                this.view.cancelInertia();
            }
            if (d + this.viewportWidth > this.contentWidth) {
                d = this.contentWidth - this.viewportWidth;
                if (d < 0) {
                    d = 0;
                }
                this.view.cancelInertia();
            }
            b = c - this.scrollTop;
            a = d - this.scrollLeft;
            if (b != 0 || a != 0) {
                try {
                    this.av = true;
                    this.aa = true;
                    this.scrollTop = c;
                    this.scrollLeft = d;
                    this.du();
                    this.ds();
                    this.aa = false;
                    if (!this.isScrolling) {
                        this.isScrolling = true;
                        if (this.onScrollStart != null) {
                            this.onScrollStart(this, ((() => {
                                let $ret = new ScrollerScrollingEventArgs();
                                $ret.deltaX = a;
                                $ret.deltaY = b;
                                return $ret;
                            })()));
                        }
                    }
                    if (this.onScrolling != null) {
                        this.onScrolling(this, ((() => {
                            let $ret = new ScrollerScrollingEventArgs();
                            $ret.deltaX = a;
                            $ret.deltaY = b;
                            return $ret;
                        })()));
                    }
                    if (this.aw.count > 0) {
                        this.aw._inner[this.aw.count - 1] = false;
                    }
                    this.aw.add(true);
                    this.executionContext.executeDelayed(() => {
                        if (this.aw._inner[0]) {
                            if (this.onScrollStop != null) {
                                this.onScrollStop(this, ((() => {
                                    let $ret = new ScrollerScrollingEventArgs();
                                    $ret.deltaX = a;
                                    $ret.deltaY = b;
                                    return $ret;
                                })()));
                            }
                            this.isScrolling = false;
                            this.view.attachNativeScroll();
                        }
                        this.aw.removeAt(0);
                    }, 50);
                }
                finally {
                    this.av = false;
                }
            }
        }
        du() {
            this.dt(this.contentHeight, this.viewportHeight, this.scrollTop, true);
        }
        ds() {
            this.dt(this.contentWidth, this.viewportWidth, this.scrollLeft, false);
        }
        dt(a, b, c, d) {
            let e = Math.round((b / a) * b);
            let f = d ? this.verticalTrackStartInset : 0;
            e = e - f;
            if (e < this.minScrollbarSize) {
                e = this.minScrollbarSize;
            }
            if (e >= (b - f)) {
                if (d) {
                    this.view.hideVScrollbar();
                }
                else {
                    this.view.hideHScrollbar();
                }
                return;
            }
            let g = f + (e / 2);
            let h = b - (e / 2);
            let i = c / (a - b);
            let j = Math.round(g + (h - g) * i);
            if (d) {
                this.actualVerticalScrollbarHeight = e;
                this.view.updateVScrollbar(j, e);
            }
            else {
                this.actualHorizontalScrollbarWidth = e;
                this.view.updateHScrollbar(j, e);
            }
        }
        da(a) {
            this.r = false;
            this.q = false;
            this.s = false;
            this.p = false;
        }
        cz(a, b) {
            this.horizontalScrollbarStatus = this.bs + this.j.o * (this.b3 - this.bs);
        }
        c0(a, b) {
            this.verticalScrollbarStatus = this.bt + this.k.o * (this.b4 - this.bt);
        }
        c1() {
            if (this.n) {
                return;
            }
            if (this.scrollbarStyle == 1 || this.scrollbarStyle == 2) {
                if (this.j.f()) {
                    this.j.w();
                }
                this.horizontalScrollbarStatus = 1;
                if (this.o && this.t) {
                    this.o = false;
                }
            }
            this.n = true;
        }
        c2() {
            if (this.y) {
                return;
            }
            if (this.scrollbarStyle == 1 || this.scrollbarStyle == 2) {
                if (this.k.f()) {
                    this.k.w();
                }
                this.verticalScrollbarStatus = 1;
                if (this.z && this.u) {
                    this.z = false;
                }
            }
            this.y = true;
        }
        c5() {
            if (!this.n || this.isDraggingHBar) {
                return;
            }
            if (this.scrollbarStyle == 1 || this.scrollbarStyle == 2) {
                this.dp();
            }
            this.n = false;
        }
        c6() {
            if (!this.y || this.isDraggingVBar) {
                return;
            }
            if (this.scrollbarStyle == 1 || this.scrollbarStyle == 2) {
                this.dq();
            }
            this.y = false;
        }
        dp() {
            if (!this.o) {
                this.o = true;
                this.ca = this.executionContext.getCurrentRelativeTime();
                this.executionContext.executeDelayed(runOn(this, this.c3), this.b9);
            }
            else {
                this.ca = this.executionContext.getCurrentRelativeTime();
            }
        }
        dq() {
            if (!this.z) {
                this.z = true;
                this.cb = this.executionContext.getCurrentRelativeTime();
                this.executionContext.executeDelayed(runOn(this, this.c4), this.b9);
            }
            else {
                this.cb = this.executionContext.getCurrentRelativeTime();
            }
        }
        c3() {
            if (!this.o) {
                return;
            }
            let a = this.executionContext.getCurrentRelativeTime();
            if (a - this.ca >= this.b9) {
                if (!this.j.f() && this.horizontalScrollbarStatus != 0) {
                    this.bs = this.horizontalScrollbarStatus;
                    this.b3 = 0;
                    this.j.v();
                }
                this.o = false;
            }
            else {
                this.executionContext.executeDelayed(runOn(this, this.c3), (this.b9 - (a - this.ca)));
            }
        }
        c4() {
            if (!this.z) {
                return;
            }
            let a = this.executionContext.getCurrentRelativeTime();
            if (a - this.cb >= this.b9) {
                if (!this.k.f() && this.verticalScrollbarStatus != 0) {
                    this.bt = this.verticalScrollbarStatus;
                    this.b4 = 0;
                    this.k.v();
                }
                this.z = false;
            }
            else {
                this.executionContext.executeDelayed(runOn(this, this.c4), (this.b9 - (a - this.cb)));
            }
        }
    }
    Scroller.$t = /*@__PURE__*/ markType(Scroller, 'Scroller', Base.$, [INotifyPropertyChanged_$type]);
    return Scroller;
})();
//# sourceMappingURL=ScrollerView_combined.js.map
