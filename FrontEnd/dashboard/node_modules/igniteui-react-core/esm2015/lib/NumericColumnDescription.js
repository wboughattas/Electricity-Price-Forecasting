/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ColumnDescription } from "./ColumnDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumericColumnDescription = /*@__PURE__*/ (() => {
    class NumericColumnDescription extends ColumnDescription {
        constructor() {
            super();
            this.e2 = null;
            this.e4 = null;
            this.e3 = null;
            this.e5 = null;
            this.er = 0;
            this.es = 0;
            this.et = 0;
            this.ep = false;
            this.e1 = null;
            this.ej = null;
            this.e0 = null;
            this.ez = null;
            this.ex = null;
            this.em = null;
            this.ey = null;
            this.ei = null;
        }
        get_type() {
            return "NumericColumn";
        }
        get negativePrefix() {
            return this.e2;
        }
        set negativePrefix(a) {
            this.e2 = a;
            this.e("NegativePrefix");
        }
        get positivePrefix() {
            return this.e4;
        }
        set positivePrefix(a) {
            this.e4 = a;
            this.e("PositivePrefix");
        }
        get negativeSuffix() {
            return this.e3;
        }
        set negativeSuffix(a) {
            this.e3 = a;
            this.e("NegativeSuffix");
        }
        get positiveSuffix() {
            return this.e5;
        }
        set positiveSuffix(a) {
            this.e5 = a;
            this.e("PositiveSuffix");
        }
        get maxFractionDigits() {
            return this.er;
        }
        set maxFractionDigits(a) {
            this.er = a;
            this.e("MaxFractionDigits");
        }
        get minFractionDigits() {
            return this.es;
        }
        set minFractionDigits(a) {
            this.es = a;
            this.e("MinFractionDigits");
        }
        get minIntegerDigits() {
            return this.et;
        }
        set minIntegerDigits(a) {
            this.et = a;
            this.e("MinIntegerDigits");
        }
        get showGroupingSeparator() {
            return this.ep;
        }
        set showGroupingSeparator(a) {
            this.ep = a;
            this.e("ShowGroupingSeparator");
        }
        get formatString() {
            return this.e1;
        }
        set formatString(a) {
            this.e1 = a;
            this.e("FormatString");
        }
        get formatSpecifiers() {
            return this.ej;
        }
        set formatSpecifiers(a) {
            this.ej = a;
            this.e("FormatSpecifiers");
        }
        get formatOverrideRef() {
            return this.e0;
        }
        set formatOverrideRef(a) {
            this.e0 = a;
            this.e("FormatOverrideRef");
        }
        get editorType() {
            return this.ez;
        }
        set editorType(a) {
            this.ez = a;
            this.e("EditorType");
        }
        get editorDataSourceRef() {
            return this.ex;
        }
        set editorDataSourceRef(a) {
            this.ex = a;
            this.e("EditorDataSourceRef");
        }
        get editorDataSource() {
            return this.em;
        }
        set editorDataSource(a) {
            this.em = a;
            this.e("EditorDataSource");
        }
        get editorTextField() {
            return this.ey;
        }
        set editorTextField(a) {
            this.ey = a;
            this.e("EditorTextField");
        }
        get editorValueField() {
            return this.ei;
        }
        set editorValueField(a) {
            this.ei = a;
            this.e("EditorValueField");
        }
    }
    NumericColumnDescription.$t = /*@__PURE__*/ markType(NumericColumnDescription, 'NumericColumnDescription', ColumnDescription.$);
    NumericColumnDescription.__canMarshalByValue1 = true;
    return NumericColumnDescription;
})();
//# sourceMappingURL=NumericColumnDescription.js.map
