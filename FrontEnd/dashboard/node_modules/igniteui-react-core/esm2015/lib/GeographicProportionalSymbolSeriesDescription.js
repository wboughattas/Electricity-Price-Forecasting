/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicMapSeriesHostDescription } from "./GeographicMapSeriesHostDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let GeographicProportionalSymbolSeriesDescription = /*@__PURE__*/ (() => {
    class GeographicProportionalSymbolSeriesDescription extends GeographicMapSeriesHostDescription {
        constructor() {
            super();
            this.cm = null;
            this.cn = null;
            this.cr = null;
            this.cq = null;
            this.co = null;
            this.cp = null;
            this.ci = 0;
            this.cs = null;
            this.b4 = null;
            this.cl = null;
            this.ck = null;
            this.b2 = null;
            this.b6 = false;
            this.b7 = false;
            this.cd = 0;
            this.cc = 0;
            this.ce = 0;
            this.b8 = false;
        }
        get_type() {
            return "GeographicProportionalSymbolSeries";
        }
        get latitudeMemberPath() {
            return this.cm;
        }
        set latitudeMemberPath(a) {
            this.cm = a;
            this.e("LatitudeMemberPath");
        }
        get longitudeMemberPath() {
            return this.cn;
        }
        set longitudeMemberPath(a) {
            this.cn = a;
            this.e("LongitudeMemberPath");
        }
        get markerType() {
            return this.cr;
        }
        set markerType(a) {
            this.cr = a;
            this.e("MarkerType");
        }
        get markerTemplateRef() {
            return this.cq;
        }
        set markerTemplateRef(a) {
            this.cq = a;
            this.e("MarkerTemplateRef");
        }
        get markerBrush() {
            return this.co;
        }
        set markerBrush(a) {
            this.co = a;
            this.e("MarkerBrush");
        }
        get markerOutline() {
            return this.cp;
        }
        set markerOutline(a) {
            this.cp = a;
            this.e("MarkerOutline");
        }
        get maximumMarkers() {
            return this.ci;
        }
        set maximumMarkers(a) {
            this.ci = a;
            this.e("MaximumMarkers");
        }
        get radiusMemberPath() {
            return this.cs;
        }
        set radiusMemberPath(a) {
            this.cs = a;
            this.e("RadiusMemberPath");
        }
        get radiusScale() {
            return this.b4;
        }
        set radiusScale(a) {
            this.b4 = a;
            this.e("RadiusScale");
        }
        get labelMemberPath() {
            return this.cl;
        }
        set labelMemberPath(a) {
            this.cl = a;
            this.e("LabelMemberPath");
        }
        get fillMemberPath() {
            return this.ck;
        }
        set fillMemberPath(a) {
            this.ck = a;
            this.e("FillMemberPath");
        }
        get fillScale() {
            return this.b2;
        }
        set fillScale(a) {
            this.b2 = a;
            this.e("FillScale");
        }
        get fillScaleUseGlobalValues() {
            return this.b6;
        }
        set fillScaleUseGlobalValues(a) {
            this.b6 = a;
            this.e("FillScaleUseGlobalValues");
        }
        get markerOutlineUsesFillScale() {
            return this.b7;
        }
        set markerOutlineUsesFillScale(a) {
            this.b7 = a;
            this.e("MarkerOutlineUsesFillScale");
        }
        get markerOutlineBrightness() {
            return this.cd;
        }
        set markerOutlineBrightness(a) {
            this.cd = a;
            this.e("MarkerOutlineBrightness");
        }
        get markerBrushBrightness() {
            return this.cc;
        }
        set markerBrushBrightness(a) {
            this.cc = a;
            this.e("MarkerBrushBrightness");
        }
        get markerThickness() {
            return this.ce;
        }
        set markerThickness(a) {
            this.ce = a;
            this.e("MarkerThickness");
        }
        get radiusScaleUseGlobalValues() {
            return this.b8;
        }
        set radiusScaleUseGlobalValues(a) {
            this.b8 = a;
            this.e("RadiusScaleUseGlobalValues");
        }
    }
    GeographicProportionalSymbolSeriesDescription.$t = /*@__PURE__*/ markType(GeographicProportionalSymbolSeriesDescription, 'GeographicProportionalSymbolSeriesDescription', GeographicMapSeriesHostDescription.$);
    return GeographicProportionalSymbolSeriesDescription;
})();
//# sourceMappingURL=GeographicProportionalSymbolSeriesDescription.js.map
