{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DataSourceSchemaChangedEventArgsDescriptionMetadata } from \"./DataSourceSchemaChangedEventArgsDescriptionMetadata\";\nimport { DataSourceRowExpansionChangedEventArgsDescriptionMetadata } from \"./DataSourceRowExpansionChangedEventArgsDescriptionMetadata\";\n/**\n * @hidden\n */\n\nvar BaseDataSourceDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(BaseDataSourceDescriptionMetadata, _super);\n\n  function BaseDataSourceDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BaseDataSourceDescriptionMetadata.b = function (a) {\n    if (BaseDataSourceDescriptionMetadata.a == null) {\n      BaseDataSourceDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      BaseDataSourceDescriptionMetadata.c(a, BaseDataSourceDescriptionMetadata.a);\n      DataSourceSchemaChangedEventArgsDescriptionMetadata.d(a);\n      DataSourceRowExpansionChangedEventArgsDescriptionMetadata.d(a);\n    }\n  };\n\n  BaseDataSourceDescriptionMetadata.c = function (a, b) {\n    b.item(\"IsReadOnly\", \"Boolean\");\n    b.item(\"IsBatchingEnabled\", \"Boolean\");\n    b.item(\"ActualCount\", \"Number:int\");\n    b.item(\"FirstVisibleIndexRequested\", \"Number:int\");\n    b.item(\"LastVisibleIndexRequested\", \"Number:int\");\n    b.item(\"DeferAutoRefresh\", \"Boolean\");\n    b.item(\"PrimaryKey\", \"Array:string\");\n    b.item(\"PropertiesRequested\", \"Array:string\");\n    b.item(\"SectionHeaderDisplayMode\", \"ExportedType:string:DataSourceSectionHeaderDisplayMode\");\n    b.item(\"IsSectionCollapsable\", \"Boolean\");\n    b.item(\"IsSectionExpandedDefault\", \"Boolean\");\n    b.item(\"IncludeSummaryRowsInSection\", \"Boolean\");\n    b.item(\"IsSectionSummaryRowsAtBottom\", \"Boolean\");\n    b.item(\"IsSectionHeaderNormalRow\", \"Boolean\");\n    b.item(\"IsSectionContentVisible\", \"Boolean\");\n    b.item(\"ShouldEmitSectionHeaders\", \"Boolean\");\n    b.item(\"ShouldEmitSectionFooters\", \"Boolean\");\n    b.item(\"ShouldEmitShiftedRows\", \"Boolean\");\n    b.item(\"SchemaChangedRef\", \"EventRef::schemaChanged\");\n    b.item(\"RowExpansionChangedRef\", \"EventRef::rowExpansionChanged\");\n  };\n\n  BaseDataSourceDescriptionMetadata.d = function (a) {\n    BaseDataSourceDescriptionMetadata.b(a);\n    a.m(\"BaseDataSource\", BaseDataSourceDescriptionMetadata.a);\n  };\n\n  BaseDataSourceDescriptionMetadata.$t = markType(BaseDataSourceDescriptionMetadata, 'BaseDataSourceDescriptionMetadata');\n  BaseDataSourceDescriptionMetadata.a = null;\n  return BaseDataSourceDescriptionMetadata;\n}(Base);\n\nexport { BaseDataSourceDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/BaseDataSourceDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,mDAAT,QAAoE,uDAApE;AACA,SAAS,yDAAT,QAA0E,6DAA1E;AAEA;;AAEG;;AACH,IAAA,iCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuD,EAAA,OAAA,CAAA,SAAA,CAAA,iCAAA,EAAA,MAAA;;AAAvD,WAAA,iCAAA,GAAA;;AAqCC;;AAlCe,EAAA,iCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,iCAAiC,CAAC,CAAlC,IAAuC,IAA3C,EAAiD;AAChD,MAAA,iCAAiC,CAAC,CAAlC,GAAsC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAtC;AACA,MAAA,iCAAiC,CAAC,CAAlC,CAAoC,CAApC,EAAuC,iCAAiC,CAAC,CAAzE;AACA,MAAA,mDAAmD,CAAC,CAApD,CAAsD,CAAtD;AACA,MAAA,yDAAyD,CAAC,CAA1D,CAA4D,CAA5D;AACA;AACD,GAPc;;AAQR,EAAA,iCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,SAArB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,SAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,YAAtB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,4BAAP,EAAqC,YAArC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,2BAAP,EAAoC,YAApC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,kBAAP,EAA2B,SAA3B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,cAArB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAA8B,cAA9B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,0BAAP,EAAmC,wDAAnC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,sBAAP,EAA+B,SAA/B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,0BAAP,EAAmC,SAAnC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,6BAAP,EAAsC,SAAtC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,8BAAP,EAAuC,SAAvC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,0BAAP,EAAmC,SAAnC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,yBAAP,EAAkC,SAAlC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,0BAAP,EAAmC,SAAnC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,0BAAP,EAAmC,SAAnC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,uBAAP,EAAgC,SAAhC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,kBAAP,EAA2B,yBAA3B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,wBAAP,EAAiC,+BAAjC;AACA,GArBM;;AAsBA,EAAA,iCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,iCAAiC,CAAC,CAAlC,CAAoC,CAApC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,gBAAJ,EAAsB,iCAAiC,CAAC,CAAxD;AACA,GAHM;;AAhCA,EAAA,iCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,iCAAD,EAAoC,mCAApC,CAAnB;AACQ,EAAA,iCAAA,CAAA,CAAA,GAAkC,IAAlC;AAmChB,SAAA,iCAAA;AAAC,CArCD,CAAuD,IAAvD,CAAA;;SAAa,iC","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DataSourceSchemaChangedEventArgsDescriptionMetadata } from \"./DataSourceSchemaChangedEventArgsDescriptionMetadata\";\nimport { DataSourceRowExpansionChangedEventArgsDescriptionMetadata } from \"./DataSourceRowExpansionChangedEventArgsDescriptionMetadata\";\n/**\n * @hidden\n */\nvar BaseDataSourceDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BaseDataSourceDescriptionMetadata, _super);\n    function BaseDataSourceDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BaseDataSourceDescriptionMetadata.b = function (a) {\n        if (BaseDataSourceDescriptionMetadata.a == null) {\n            BaseDataSourceDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            BaseDataSourceDescriptionMetadata.c(a, BaseDataSourceDescriptionMetadata.a);\n            DataSourceSchemaChangedEventArgsDescriptionMetadata.d(a);\n            DataSourceRowExpansionChangedEventArgsDescriptionMetadata.d(a);\n        }\n    };\n    BaseDataSourceDescriptionMetadata.c = function (a, b) {\n        b.item(\"IsReadOnly\", \"Boolean\");\n        b.item(\"IsBatchingEnabled\", \"Boolean\");\n        b.item(\"ActualCount\", \"Number:int\");\n        b.item(\"FirstVisibleIndexRequested\", \"Number:int\");\n        b.item(\"LastVisibleIndexRequested\", \"Number:int\");\n        b.item(\"DeferAutoRefresh\", \"Boolean\");\n        b.item(\"PrimaryKey\", \"Array:string\");\n        b.item(\"PropertiesRequested\", \"Array:string\");\n        b.item(\"SectionHeaderDisplayMode\", \"ExportedType:string:DataSourceSectionHeaderDisplayMode\");\n        b.item(\"IsSectionCollapsable\", \"Boolean\");\n        b.item(\"IsSectionExpandedDefault\", \"Boolean\");\n        b.item(\"IncludeSummaryRowsInSection\", \"Boolean\");\n        b.item(\"IsSectionSummaryRowsAtBottom\", \"Boolean\");\n        b.item(\"IsSectionHeaderNormalRow\", \"Boolean\");\n        b.item(\"IsSectionContentVisible\", \"Boolean\");\n        b.item(\"ShouldEmitSectionHeaders\", \"Boolean\");\n        b.item(\"ShouldEmitSectionFooters\", \"Boolean\");\n        b.item(\"ShouldEmitShiftedRows\", \"Boolean\");\n        b.item(\"SchemaChangedRef\", \"EventRef::schemaChanged\");\n        b.item(\"RowExpansionChangedRef\", \"EventRef::rowExpansionChanged\");\n    };\n    BaseDataSourceDescriptionMetadata.d = function (a) {\n        BaseDataSourceDescriptionMetadata.b(a);\n        a.m(\"BaseDataSource\", BaseDataSourceDescriptionMetadata.a);\n    };\n    BaseDataSourceDescriptionMetadata.$t = markType(BaseDataSourceDescriptionMetadata, 'BaseDataSourceDescriptionMetadata');\n    BaseDataSourceDescriptionMetadata.a = null;\n    return BaseDataSourceDescriptionMetadata;\n}(Base));\nexport { BaseDataSourceDescriptionMetadata };\n//# sourceMappingURL=BaseDataSourceDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}