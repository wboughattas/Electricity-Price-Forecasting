{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamRadialGauge } from './XamRadialGauge';\nimport { CollectionAdapter, brushToString, stringToBrush, toPoint, fromPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, NamePatcher, isValidProp, getModifiedProps, toSpinal, arrayFindByName } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { SweepDirection_$type } from \"igniteui-react-core\";\nimport { RadialGaugeNeedleShape_$type } from './RadialGaugeNeedleShape';\nimport { RadialGaugePivotShape_$type } from './RadialGaugePivotShape';\nimport { RadialGaugeScaleOversweepShape_$type } from './RadialGaugeScaleOversweepShape';\nimport { RadialGaugeBackingShape_$type } from './RadialGaugeBackingShape';\nimport { RadialGaugeDuplicateLabelOmissionStrategy_$type } from './RadialGaugeDuplicateLabelOmissionStrategy';\nimport { IgrFormatRadialGaugeLabelEventArgs } from './igr-format-radial-gauge-label-event-args';\nimport { IgrAlignRadialGaugeLabelEventArgs } from './igr-align-radial-gauge-label-event-args';\nimport { RadialGaugeStylingDefaults } from './RadialGaugeStylingDefaults'; //import { RadialGaugeRange } from './RadialGaugeRange';\n\nimport { XamRadialGaugeRange } from './XamRadialGaugeRange';\nimport { IgrRadialGaugeRangeCollection } from './igr-radial-gauge-range-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { IgrDoubleValueChangedEventArgs } from \"igniteui-react-core\";\n\nvar IgrRadialGauge =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrRadialGauge, _super);\n\n  function IgrRadialGauge(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.contentRanges = [];\n    /**\n    * The ranges actually present in the chart. Do not directly modify this array.\n    * This array's contents can be modified by causing Angular to reproject the child content.\n    * Or adding and removing ranges from the manual ranges collection on the ranges property.\n    */\n\n    _this.actualRanges = [];\n    _this._ranges = null;\n    _this._rangesAdapter = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._formatLabel = null;\n    _this._formatLabel_wrapped = null;\n    _this._alignLabel = null;\n    _this._alignLabel_wrapped = null;\n    _this._valueChanged = null;\n    _this._valueChanged_wrapped = null;\n    _this._actualMinimumValueChange = null;\n    _this._actualMinimumValueChange_wrapped = null;\n    _this._actualMaximumValueChange = null;\n    _this._actualMaximumValueChange_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._contentChildrenManager = new ContentChildrenManager(function (ch) {\n      return ch.key || ch.props.name;\n    }, function (ch) {\n      return ch.key || ch.props.name;\n    }, function () {\n      return _this._updateContentChildren();\n    });\n    var container = null;\n\n    if (document) {\n      container = document.createElement(\"div\");\n      container.style.display = \"block\";\n      container.style.width = \"100%\";\n      container.style.height = \"100%\";\n    }\n\n    var root;\n    root = container;\n    _this._renderer = new ReactRenderer(root, document, true, RadialGaugeStylingDefaults);\n    _this._implementation = _this.createImplementation();\n    _this._container = _this._renderer.getWrapper(container); //this._renderer.rootWrapper.append(this._container);\n    //this._container.setStyleProperty(\"display\", \"block\");\n    //this._container.setStyleProperty(\"width\", \"100%\");\n    //this._container.setStyleProperty(\"height\", \"100%\");\n\n    _this._wrapper = _this._renderer; //var root: any;\n    //root = this._container;\n    //if (this._container.nativeElement != null) {\n    //    root = this._container.nativeElement;\n    //}\n\n    var gauge = _this.i;\n    _this._gauge = gauge;\n    _this._rangesAdapter = new CollectionAdapter(_this.contentRanges, _this.i.ranges, _this.actualRanges, function (c) {\n      return c.i;\n    }, function (i) {\n      i._provideRenderer(_this._wrapper);\n\n      if (_this._container && _this._container.getNativeElement().parentElement) {\n        i._styling(_this._container.getNativeElement(), _this, _this);\n      }\n    }, function (i) {\n      i._provideRenderer(null);\n    });\n    gauge.provideContainer(_this._renderer);\n\n    _this._renderer.addSizeWatcher(function () {\n      _this._gauge.containerResized();\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(IgrRadialGauge.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n        this.containerResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.width = value;\n        this.containerResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrRadialGauge.prototype._updateContentChildren = function () {\n    this.contentRanges.length = 0;\n    var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n\n    for (var i = 0; i < contentChildrenActual.length; i++) {\n      if (XamRadialGaugeRange.$type.isAssignableFrom(contentChildrenActual[i].i.$type)) {\n        this.contentRanges.push(contentChildrenActual[i]);\n      }\n    }\n\n    if (this._rangesAdapter !== null) {\n      this._rangesAdapter.notifyContentChanged();\n    }\n  };\n\n  Object.defineProperty(IgrRadialGauge.prototype, \"ranges\", {\n    /**\n     * A collection or manually added axes for the chart.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._ranges === null) {\n        var coll = new IgrRadialGaugeRangeCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._rangesAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._ranges = coll;\n      }\n\n      return this._ranges;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrRadialGauge.prototype.render = function () {\n    // if (!this._childrenDiffer(this.props.children)) {\n    // \tlet div = React.createElement(\"div\", {\n    // \t\tref: (ref) => {\n    // \t\t\tthis._elRef = ref;\n    // \t\t},\n    // \t\tchildren: this.props.children\n    // \t});\n    // \treturn div;\n    // } else {\n    var children = this._contentChildrenManager.getChildren(this.props.children);\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-radial-gauge igr-radial-gauge\",\n      ref: this._getMainRef,\n      children: children\n    });\n    return div; //}\n  };\n\n  IgrRadialGauge.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          {\n            this[p] = this.props[p];\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this._container.getNativeElement());\n\n    this.containerResized();\n    this.initializeContent();\n  };\n\n  IgrRadialGauge.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrRadialGauge.prototype._getMainRef = function (div) {\n    this._elRef = div;\n  };\n\n  IgrRadialGauge.prototype.destroy = function () {\n    this._gauge.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrRadialGauge.prototype.createImplementation = function () {\n    return new XamRadialGauge();\n  };\n\n  IgrRadialGauge.prototype.initializeContent = function () {\n    this._styling(this._container.getNativeElement(), this);\n\n    if (this.actualRanges && this.actualRanges.length > 0) {\n      var currRange = this.actualRanges;\n\n      for (var i = 0; i < currRange.length; i++) {\n        currRange[i]._styling(this._container.getNativeElement(), this, this);\n      }\n    }\n\n    this._updateContentChildren();\n\n    this.i.containerResized();\n  };\n\n  IgrRadialGauge.prototype.componentWillUnmount = function () {\n    //this._grid.destroy();\n    this.destroy();\n  };\n\n  IgrRadialGauge.prototype.initializeProperties = function () {\n    var e_3, _a;\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  Object.defineProperty(IgrRadialGauge.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    }\n    /**\n                               * @hidden\n                               */\n    ,\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrRadialGauge._createFromInternal = function (internal) {\n    if (!internal) {\n      return null;\n    }\n\n    if (!internal.$type) {\n      return null;\n    }\n\n    var name = internal.$type.name;\n    var externalName = \"Igr\" + name;\n\n    if (!TypeRegistrar.isRegistered(externalName)) {\n      return null;\n    }\n\n    return TypeRegistrar.create(externalName);\n  };\n\n  Object.defineProperty(IgrRadialGauge.prototype, \"rangeBrushes\", {\n    /**\n    * Gets or sets a collection of brushes to be used as the palette for gauge ranges.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ah);\n    },\n    set: function (v) {\n      this.i.ah = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"rangeOutlines\", {\n    /**\n     * Gets or sets a collection of brushes to be used as the palette for gauge outlines.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ai);\n    },\n    set: function (v) {\n      this.i.ai = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"minimumValue\", {\n    /**\n     * Gets or sets the minimum value of the scale.\n    */\n    get: function () {\n      return this.i.cc;\n    },\n    set: function (v) {\n      this.i.cc = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"actualMinimumValue\", {\n    /**\n     * Gets the resolved minimum value of the scale.\n    */\n    get: function () {\n      return this.i.bs;\n    },\n    set: function (v) {\n      this.i.bs = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"maximumValue\", {\n    /**\n     * Gets or sets the maximum value of the scale.\n    */\n    get: function () {\n      return this.i.ca;\n    },\n    set: function (v) {\n      this.i.ca = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"actualMaximumValue\", {\n    /**\n     * Gets the resolved maximum value of the scale.\n    */\n    get: function () {\n      return this.i.br;\n    },\n    set: function (v) {\n      this.i.br = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"interval\", {\n    /**\n     * Gets or sets the interval to use for the scale.\n    */\n    get: function () {\n      return this.i.b6;\n    },\n    set: function (v) {\n      this.i.b6 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"centerX\", {\n    /**\n     * Gets or sets the x position of the center of the gauge with the value ranging from 0 to 1.\n    */\n    get: function () {\n      return this.i.b3;\n    },\n    set: function (v) {\n      this.i.b3 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"centerY\", {\n    /**\n     * Gets or sets the y position of the center of the gauge with the value ranging from 0 to 1.\n    */\n    get: function () {\n      return this.i.b4;\n    },\n    set: function (v) {\n      this.i.b4 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"value\", {\n    /**\n     * Gets or sets the value at which to point the needle of the gauge.\n    */\n    get: function () {\n      return this.i.dm;\n    },\n    set: function (v) {\n      this.i.dm = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleStartAngle\", {\n    /**\n     * Gets or sets the start angle for the scale in degrees.\n    */\n    get: function () {\n      return this.i.da;\n    },\n    set: function (v) {\n      this.i.da = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleEndAngle\", {\n    /**\n     * Gets or sets the end angle for the scale in degrees.\n    */\n    get: function () {\n      return this.i.c5;\n    },\n    set: function (v) {\n      this.i.c5 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleSweepDirection\", {\n    /**\n     * Gets or sets the direction in which the scale sweeps around the center from the start angle to end angle.\n    */\n    get: function () {\n      return this.i.ii;\n    },\n    set: function (v) {\n      this.i.ii = ensureEnum(SweepDirection_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"transitionDuration\", {\n    /**\n     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.\n    */\n    get: function () {\n      return this.i.dn;\n    },\n    set: function (v) {\n      this.i.dn = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"transitionEasingFunction\", {\n    /**\n     * Gets or sets the easing function used to morph the current series.\n    */\n    get: function () {\n      return this.i.a0;\n    },\n    set: function (v) {\n      this.i.a0 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleBrush\", {\n    /**\n     * Gets or sets the brush to use when rendering the fill of the needle.\n    */\n    get: function () {\n      return brushToString(this.i.ib);\n    },\n    set: function (v) {\n      this.i.ib = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleOutline\", {\n    /**\n     * Gets or sets the brush to use when rendering the outline of the needle.\n    */\n    get: function () {\n      return brushToString(this.i.ic);\n    },\n    set: function (v) {\n      this.i.ic = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleStartExtent\", {\n    /**\n     * Gets or sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cv;\n    },\n    set: function (v) {\n      this.i.cv = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleEndExtent\", {\n    /**\n     * Gets or sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cn;\n    },\n    set: function (v) {\n      this.i.cn = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleShape\", {\n    /**\n     * Gets or sets the shape to use when rendering the needle from a number of options.\n    */\n    get: function () {\n      return this.i.ar;\n    },\n    set: function (v) {\n      this.i.ar = ensureEnum(RadialGaugeNeedleShape_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleStartWidthRatio\", {\n    /**\n     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cw;\n    },\n    set: function (v) {\n      this.i.cw = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleEndWidthRatio\", {\n    /**\n     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.co;\n    },\n    set: function (v) {\n      this.i.co = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleBaseFeatureWidthRatio\", {\n    /**\n     * Gets or sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cm;\n    },\n    set: function (v) {\n      this.i.cm = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleBaseFeatureExtent\", {\n    /**\n     * Gets or sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cl;\n    },\n    set: function (v) {\n      this.i.cl = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePointFeatureWidthRatio\", {\n    /**\n     * Gets or sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cu;\n    },\n    set: function (v) {\n      this.i.cu = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePointFeatureExtent\", {\n    /**\n     * Gets or sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.ct;\n    },\n    set: function (v) {\n      this.i.ct = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotWidthRatio\", {\n    /**\n     * Gets or sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cs;\n    },\n    set: function (v) {\n      this.i.cs = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotInnerWidthRatio\", {\n    /**\n     * Gets or sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.\n    */\n    get: function () {\n      return this.i.cp;\n    },\n    set: function (v) {\n      this.i.cp = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotShape\", {\n    /**\n     * Gets or sets the shape to use for the needle cap.\n    */\n    get: function () {\n      return this.i.as;\n    },\n    set: function (v) {\n      this.i.as = ensureEnum(RadialGaugePivotShape_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleStartExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.db;\n    },\n    set: function (v) {\n      this.i.db = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotBrush\", {\n    /**\n     * Gets or sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.\n    */\n    get: function () {\n      return brushToString(this.i.id);\n    },\n    set: function (v) {\n      this.i.id = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotOutline\", {\n    /**\n     * Gets or sets the brush to use for the outlines of the needle cap.\n    */\n    get: function () {\n      return brushToString(this.i.ie);\n    },\n    set: function (v) {\n      this.i.ie = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needleStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness of the needle outline.\n    */\n    get: function () {\n      return this.i.cx;\n    },\n    set: function (v) {\n      this.i.cx = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use for the outline of the needle cap.\n    */\n    get: function () {\n      return this.i.cq;\n    },\n    set: function (v) {\n      this.i.cq = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleEndExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.c6;\n    },\n    set: function (v) {\n      this.i.c6 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"labelExtent\", {\n    /**\n     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.b7;\n    },\n    set: function (v) {\n      this.i.b7 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"labelInterval\", {\n    /**\n     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.\n    */\n    get: function () {\n      return this.i.b9;\n    },\n    set: function (v) {\n      this.i.b9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"tickStartExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.dg;\n    },\n    set: function (v) {\n      this.i.dg = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"tickEndExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.de;\n    },\n    set: function (v) {\n      this.i.de = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"tickStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use when rendering ticks.\n    */\n    get: function () {\n      return this.i.di;\n    },\n    set: function (v) {\n      this.i.di = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"tickBrush\", {\n    /**\n     * Gets or sets the brush to use for the major tickmarks.\n    */\n    get: function () {\n      return brushToString(this.i.ih);\n    },\n    set: function (v) {\n      this.i.ih = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"fontBrush\", {\n    /**\n     * Gets or sets the brush to use for the label font.\n    */\n    get: function () {\n      return brushToString(this.i.h8);\n    },\n    set: function (v) {\n      this.i.h8 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"minorTickStartExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.ch;\n    },\n    set: function (v) {\n      this.i.ch = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"minorTickEndExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n    */\n    get: function () {\n      return this.i.cf;\n    },\n    set: function (v) {\n      this.i.cf = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"minorTickStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use when rendering minor ticks.\n    */\n    get: function () {\n      return this.i.cj;\n    },\n    set: function (v) {\n      this.i.cj = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"minorTickBrush\", {\n    /**\n     * Gets or sets the brush to use for the minor tickmarks.\n    */\n    get: function () {\n      return brushToString(this.i.ia);\n    },\n    set: function (v) {\n      this.i.ia = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"minorTickCount\", {\n    /**\n     * Gets or sets the number of minor tickmarks to place between major tickmarks.\n    */\n    get: function () {\n      return this.i.ce;\n    },\n    set: function (v) {\n      this.i.ce = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleBrush\", {\n    /**\n     * Gets or sets the brush to use to fill the background of the scale.\n    */\n    get: function () {\n      return brushToString(this.i.ig);\n    },\n    set: function (v) {\n      this.i.ig = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingBrush\", {\n    /**\n     * Gets or sets the brush to use to fill the backing of the gauge.\n    */\n    get: function () {\n      return brushToString(this.i.h6);\n    },\n    set: function (v) {\n      this.i.h6 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingOutline\", {\n    /**\n     * Gets or sets the brush to use for the outline of the backing.\n    */\n    get: function () {\n      return brushToString(this.i.h7);\n    },\n    set: function (v) {\n      this.i.h7 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness of the backing outline.\n    */\n    get: function () {\n      return this.i.b1;\n    },\n    set: function (v) {\n      this.i.b1 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingOuterExtent\", {\n    /**\n     * Gets or sets the outer extent of the gauge backing.\n    */\n    get: function () {\n      return this.i.by;\n    },\n    set: function (v) {\n      this.i.by = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingOversweep\", {\n    /**\n     * Gets or sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.\n    */\n    get: function () {\n      return this.i.b0;\n    },\n    set: function (v) {\n      this.i.b0 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleOversweep\", {\n    /**\n     * Gets or sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.\n    */\n    get: function () {\n      return this.i.c8;\n    },\n    set: function (v) {\n      this.i.c8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"scaleOversweepShape\", {\n    /**\n     * Gets or sets the oversweep shape to use for the excess fill area for the scale.\n    */\n    get: function () {\n      return this.i.au;\n    },\n    set: function (v) {\n      this.i.au = ensureEnum(RadialGaugeScaleOversweepShape_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingCornerRadius\", {\n    /**\n     * Gets or sets the corner rounding radius to use for the fitted scale backings.\n    */\n    get: function () {\n      return this.i.bu;\n    },\n    set: function (v) {\n      this.i.bu = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingInnerExtent\", {\n    /**\n     * Gets or sets the inner extent of the gauge backing.\n    */\n    get: function () {\n      return this.i.bw;\n    },\n    set: function (v) {\n      this.i.bw = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"backingShape\", {\n    /**\n     * Gets or sets the type of shape to use for the backing of the gauge.\n    */\n    get: function () {\n      return this.i.am;\n    },\n    set: function (v) {\n      this.i.am = ensureEnum(RadialGaugeBackingShape_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"radiusMultiplier\", {\n    /**\n     * Gets or sets the multiplying factor to apply to the normal radius of the gauge.\n     * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.\n     * This introduces a multiplicative factor to that value.\n    */\n    get: function () {\n      return this.i.c0;\n    },\n    set: function (v) {\n      this.i.c0 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"duplicateLabelOmissionStrategy\", {\n    /**\n     * Gets or sets the strategy to use for omitting labels if the first and last label have the same value.\n    */\n    get: function () {\n      return this.i.an;\n    },\n    set: function (v) {\n      this.i.an = ensureEnum(RadialGaugeDuplicateLabelOmissionStrategy_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"isNeedleDraggingEnabled\", {\n    /**\n     * Gets or sets whether needle dragging is enabled or not.\n    */\n    get: function () {\n      return this.i.ba;\n    },\n    set: function (v) {\n      this.i.ba = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"isNeedleDraggingConstrained\", {\n    /**\n     * Gets or sets whether the needle is constrained within the minimum and maximum value range during dragging.\n    */\n    get: function () {\n      return this.i.a9;\n    },\n    set: function (v) {\n      this.i.a9 = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"font\", {\n    /**\n     * Gets or sets the font.\n    */\n    get: function () {\n      return this.i.d2;\n    },\n    set: function (v) {\n      this.i.d2 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"labelFormat\", {\n    /**\n     * Gets or sets the label composite format used when creating label values.\n    */\n    get: function () {\n      return this.i.d9;\n    },\n    set: function (v) {\n      this.i.d9 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"labelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the LabelFormat string.\n    */\n    get: function () {\n      return this.i.ag;\n    },\n    set: function (v) {\n      this.i.ag = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"animating\", {\n    /**\n     * Gets a value indicating whether the radial gauge is currently animating.\n    */\n    get: function () {\n      return this.i.a6;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"transitionProgress\", {\n    /**\n     * Gets the transition progress of the animation when the control is animating.\n    */\n    get: function () {\n      return this.i.dk;\n    },\n    set: function (v) {\n      this.i.dk = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"pixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.cz;\n    },\n    set: function (v) {\n      this.i.cz = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"actualPixelScalingRatio\", {\n    /**\n     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.bt;\n    },\n    set: function (v) {\n      this.i.bt = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrRadialGauge.prototype.findByName = function (name) {\n    if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {\n      return this.ranges.findByName(name);\n    }\n\n    if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n      return arrayFindByName(this.labelFormatSpecifiers, name);\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(IgrRadialGauge.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrRadialGauge.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrRadialGauge.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"RadialGauge\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.\n  * @param value  * The value to scale.\n  */\n\n\n  IgrRadialGauge.prototype.scaleValue = function (value) {\n    var iv = this.i.dd(value);\n    return iv;\n  };\n  /**\n   * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.\n  \r\n  * @param angle  * The angle in radians to unscale to a value.\n  */\n\n\n  IgrRadialGauge.prototype.unscaleValue = function (angle) {\n    var iv = this.i.dl(angle);\n    return iv;\n  };\n  /**\n   * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.\n  \r\n  * @param point  * The point for which to retrieve the associated value.\n  */\n\n\n  IgrRadialGauge.prototype.getValueForPoint = function (point) {\n    var iv = this.i.b5(toPoint(point));\n    return iv;\n  };\n\n  IgrRadialGauge.prototype.getPointForValue = function (value, extent) {\n    var iv = this.i.ik(value, extent);\n    return fromPoint(iv);\n  };\n\n  IgrRadialGauge.prototype.styleUpdated = function () {\n    this.i.gd();\n  };\n\n  IgrRadialGauge.prototype.needleContainsPoint = function (point, isFinger) {\n    var iv = this.i.needleContainsPoint(toPoint(point), isFinger);\n    return iv;\n  };\n  /**\n   * Called by the UI framework to provide a UI container for rendering this control.\n  \r\n  * @param container  * The UI container element.\n  */\n\n\n  IgrRadialGauge.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n\n  IgrRadialGauge.prototype.containerResized = function () {\n    this.i.containerResized();\n  };\n  /**\n   * Use to force the radial gauge to finish any deferred work before printing or evaluating its visual.\n   * This should only be called if the visual of the radial gauge needs to be synchronously saved or evaluated.\n   * Calling this method too often will hinder the performance of the radial gauge.\n  \r\n  */\n\n\n  IgrRadialGauge.prototype.flush = function () {\n    this.i.fs();\n  };\n  /**\n   * Returns visuals as a serialized string.\n  \r\n  */\n\n\n  IgrRadialGauge.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.d1();\n    return iv;\n  };\n\n  Object.defineProperty(IgrRadialGauge.prototype, \"formatLabel\", {\n    /**\n     * Event which is raised when a label of the gauge is formatted.\n     * Function takes first argument null and second argument ui.\n     * Use ui.owner to obtain reference to gauge widget.\n     * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.\n     * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.\n     * Use ui.startAngle to obtain the starting angle of gauge scale.\n     * Use ui.endAngle to obtain the ending angle of gauge scale.\n     * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.\n     * Use ui.value to obtain the value on the gauge scale associated with the label.\n     * Use ui.label to obtain the string value of the label.\n    */\n    get: function () {\n      return this._formatLabel;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._formatLabel_wrapped !== null) {\n        this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);\n        this._formatLabel_wrapped = null;\n        this._formatLabel = null;\n      }\n\n      this._formatLabel = ev;\n\n      this._formatLabel_wrapped = function (o, e) {\n        var outerArgs = new IgrFormatRadialGaugeLabelEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeFormatLabel) {\n          _this.beforeFormatLabel(_this, outerArgs);\n        }\n\n        if (_this._formatLabel) {\n          _this._formatLabel(_this, outerArgs);\n        }\n      };\n\n      this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"alignLabel\", {\n    /**\n     * Event which is raised when a label of the gauge is aligned along the scale.\n     * Function takes first argument null and second argument ui.\n     * Use ui.owner to obtain reference to gauge widget.\n     * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.\n     * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.\n     * Use ui.startAngle to obtain the starting angle of gauge scale.\n     * Use ui.endAngle to obtain the ending angle of gauge scale.\n     * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.\n     * Use ui.value to obtain the value on the gauge scale associated with the label.\n     * Use ui.label to obtain the string value of the label.\n     * Use ui.width to obtain the width of the label.\n     * Use ui.height to obtain the height of the label.\n     * Use ui.offsetX to obtain the X offset of the label on the gauge scale.\n     * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.\n    */\n    get: function () {\n      return this._alignLabel;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._alignLabel_wrapped !== null) {\n        this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);\n        this._alignLabel_wrapped = null;\n        this._alignLabel = null;\n      }\n\n      this._alignLabel = ev;\n\n      this._alignLabel_wrapped = function (o, e) {\n        var outerArgs = new IgrAlignRadialGaugeLabelEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeAlignLabel) {\n          _this.beforeAlignLabel(_this, outerArgs);\n        }\n\n        if (_this._alignLabel) {\n          _this._alignLabel(_this, outerArgs);\n        }\n      };\n\n      this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"valueChanged\", {\n    /**\n     * Occurs when the Value property changes.\n    */\n    get: function () {\n      return this._valueChanged;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._valueChanged_wrapped !== null) {\n        this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);\n        this._valueChanged_wrapped = null;\n        this._valueChanged = null;\n      }\n\n      this._valueChanged = ev;\n\n      this._valueChanged_wrapped = function (o, e) {\n        var outerArgs = new IgrDoubleValueChangedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeValueChanged) {\n          _this.beforeValueChanged(_this, outerArgs);\n        }\n\n        if (_this._valueChanged) {\n          _this._valueChanged(_this, outerArgs);\n        }\n      };\n\n      this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"actualMinimumValueChange\", {\n    get: function () {\n      return this._actualMinimumValueChange;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._actualMinimumValueChange_wrapped !== null) {\n        this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n        this._actualMinimumValueChange_wrapped = null;\n        this._actualMinimumValueChange = null;\n      }\n\n      this._actualMinimumValueChange = ev;\n\n      this._actualMinimumValueChange_wrapped = function (o, e) {\n        var ext = _this.actualMinimumValue;\n\n        if (_this.beforeActualMinimumValueChange) {\n          _this.beforeActualMinimumValueChange(_this, ext);\n        }\n\n        if (_this._actualMinimumValueChange) {\n          _this._actualMinimumValueChange(_this, ext);\n        }\n      };\n\n      this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialGauge.prototype, \"actualMaximumValueChange\", {\n    get: function () {\n      return this._actualMaximumValueChange;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._actualMaximumValueChange_wrapped !== null) {\n        this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n        this._actualMaximumValueChange_wrapped = null;\n        this._actualMaximumValueChange = null;\n      }\n\n      this._actualMaximumValueChange = ev;\n\n      this._actualMaximumValueChange_wrapped = function (o, e) {\n        var ext = _this.actualMaximumValue;\n\n        if (_this.beforeActualMaximumValueChange) {\n          _this.beforeActualMaximumValueChange(_this, ext);\n        }\n\n        if (_this._actualMaximumValueChange) {\n          _this._actualMaximumValueChange(_this, ext);\n        }\n      };\n\n      this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrRadialGauge;\n}(React.Component);\n\nexport { IgrRadialGauge };","map":{"version":3,"sources":["../../../../src/igniteui-gauges/lib/igr-radial-gauge.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamRadialGauge } from './XamRadialGauge';\nimport { CollectionAdapter, brushToString, stringToBrush, toPoint, fromPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, NamePatcher, isValidProp, getModifiedProps, toSpinal, arrayFindByName } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { SweepDirection_$type } from \"igniteui-react-core\";\nimport { RadialGaugeNeedleShape_$type } from './RadialGaugeNeedleShape';\nimport { RadialGaugePivotShape_$type } from './RadialGaugePivotShape';\nimport { RadialGaugeScaleOversweepShape_$type } from './RadialGaugeScaleOversweepShape';\nimport { RadialGaugeBackingShape_$type } from './RadialGaugeBackingShape';\nimport { RadialGaugeDuplicateLabelOmissionStrategy_$type } from './RadialGaugeDuplicateLabelOmissionStrategy';\nimport { IgrFormatRadialGaugeLabelEventArgs } from './igr-format-radial-gauge-label-event-args';\nimport { IgrAlignRadialGaugeLabelEventArgs } from './igr-align-radial-gauge-label-event-args';\nimport { RadialGaugeStylingDefaults } from './RadialGaugeStylingDefaults';\n//import { RadialGaugeRange } from './RadialGaugeRange';\nimport { XamRadialGaugeRange } from './XamRadialGaugeRange';\nimport { IgrRadialGaugeRangeCollection } from './igr-radial-gauge-range-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { IgrDoubleValueChangedEventArgs } from \"igniteui-react-core\";\nvar IgrRadialGauge = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrRadialGauge, _super);\n    function IgrRadialGauge(props) {\n        var _this = _super.call(this, props) || this;\n        _this.contentRanges = [];\n        /**\n        * The ranges actually present in the chart. Do not directly modify this array.\n        * This array's contents can be modified by causing Angular to reproject the child content.\n        * Or adding and removing ranges from the manual ranges collection on the ranges property.\n        */\n        _this.actualRanges = [];\n        _this._ranges = null;\n        _this._rangesAdapter = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._formatLabel = null;\n        _this._formatLabel_wrapped = null;\n        _this._alignLabel = null;\n        _this._alignLabel_wrapped = null;\n        _this._valueChanged = null;\n        _this._valueChanged_wrapped = null;\n        _this._actualMinimumValueChange = null;\n        _this._actualMinimumValueChange_wrapped = null;\n        _this._actualMaximumValueChange = null;\n        _this._actualMaximumValueChange_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });\n        var container = null;\n        if (document) {\n            container = document.createElement(\"div\");\n            container.style.display = \"block\";\n            container.style.width = \"100%\";\n            container.style.height = \"100%\";\n        }\n        var root;\n        root = container;\n        _this._renderer = new ReactRenderer(root, document, true, RadialGaugeStylingDefaults);\n        _this._implementation = _this.createImplementation();\n        _this._container = _this._renderer.getWrapper(container);\n        //this._renderer.rootWrapper.append(this._container);\n        //this._container.setStyleProperty(\"display\", \"block\");\n        //this._container.setStyleProperty(\"width\", \"100%\");\n        //this._container.setStyleProperty(\"height\", \"100%\");\n        _this._wrapper = _this._renderer;\n        //var root: any;\n        //root = this._container;\n        //if (this._container.nativeElement != null) {\n        //    root = this._container.nativeElement;\n        //}\n        var gauge = _this.i;\n        _this._gauge = gauge;\n        _this._rangesAdapter = new CollectionAdapter(_this.contentRanges, _this.i.ranges, _this.actualRanges, function (c) { return c.i; }, function (i) {\n            i._provideRenderer(_this._wrapper);\n            if (_this._container && _this._container.getNativeElement().parentElement) {\n                i._styling(_this._container.getNativeElement(), _this, _this);\n            }\n        }, function (i) { i._provideRenderer(null); });\n        gauge.provideContainer(_this._renderer);\n        _this._renderer.addSizeWatcher(function () {\n            _this._gauge.containerResized();\n        });\n        return _this;\n    }\n    Object.defineProperty(IgrRadialGauge.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this.containerResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.width = value;\n                this.containerResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrRadialGauge.prototype._updateContentChildren = function () {\n        this.contentRanges.length = 0;\n        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n        for (var i = 0; i < contentChildrenActual.length; i++) {\n            if ((XamRadialGaugeRange.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {\n                this.contentRanges.push(contentChildrenActual[i]);\n            }\n        }\n        if (this._rangesAdapter !== null) {\n            this._rangesAdapter.notifyContentChanged();\n        }\n    };\n    Object.defineProperty(IgrRadialGauge.prototype, \"ranges\", {\n        /**\n         * A collection or manually added axes for the chart.\n        */\n        get: function () {\n            var _this = this;\n            if (this._ranges === null) {\n                var coll = new IgrRadialGaugeRangeCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._rangesAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._ranges = coll;\n            }\n            return this._ranges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrRadialGauge.prototype.render = function () {\n        // if (!this._childrenDiffer(this.props.children)) {\n        // \tlet div = React.createElement(\"div\", {\n        // \t\tref: (ref) => {\n        // \t\t\tthis._elRef = ref;\n        // \t\t},\n        // \t\tchildren: this.props.children\n        // \t});\n        // \treturn div;\n        // } else {\n        var children = this._contentChildrenManager.getChildren(this.props.children);\n        var div = React.createElement(\"div\", {\n            className: \"ig-radial-gauge igr-radial-gauge\",\n            ref: this._getMainRef,\n            children: children\n        });\n        return div;\n        //}\n    };\n    IgrRadialGauge.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    {\n                        this[p] = this.props[p];\n                    }\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this._container.getNativeElement());\n        this.containerResized();\n        this.initializeContent();\n    };\n    IgrRadialGauge.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrRadialGauge.prototype._getMainRef = function (div) {\n        this._elRef = div;\n    };\n    IgrRadialGauge.prototype.destroy = function () {\n        this._gauge.destroy();\n        this._wrapper.destroy();\n    };\n    IgrRadialGauge.prototype.createImplementation = function () {\n        return new XamRadialGauge();\n    };\n    IgrRadialGauge.prototype.initializeContent = function () {\n        this._styling(this._container.getNativeElement(), this);\n        if (this.actualRanges && this.actualRanges.length > 0) {\n            var currRange = this.actualRanges;\n            for (var i = 0; i < currRange.length; i++) {\n                currRange[i]._styling(this._container.getNativeElement(), this, this);\n            }\n        }\n        this._updateContentChildren();\n        this.i.containerResized();\n    };\n    IgrRadialGauge.prototype.componentWillUnmount = function () {\n        //this._grid.destroy();\n        this.destroy();\n    };\n    IgrRadialGauge.prototype.initializeProperties = function () {\n        var e_3, _a;\n        try {\n            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_3_1) {\n            e_3 = { error: e_3_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_3)\n                    throw e_3.error;\n            }\n        }\n    };\n    Object.defineProperty(IgrRadialGauge.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        } /**\n                                     * @hidden\n                                     */,\n        enumerable: true,\n        configurable: true\n    });\n    IgrRadialGauge._createFromInternal = function (internal) {\n        if (!internal) {\n            return null;\n        }\n        if (!internal.$type) {\n            return null;\n        }\n        var name = internal.$type.name;\n        var externalName = \"Igr\" + name;\n        if (!TypeRegistrar.isRegistered(externalName)) {\n            return null;\n        }\n        return TypeRegistrar.create(externalName);\n    };\n    Object.defineProperty(IgrRadialGauge.prototype, \"rangeBrushes\", {\n        /**\n     * Gets or sets a collection of brushes to be used as the palette for gauge ranges.\n    */\n        get: function () {\n            return fromBrushCollection(this.i.ah);\n        },\n        set: function (v) {\n            this.i.ah = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"rangeOutlines\", {\n        /**\n         * Gets or sets a collection of brushes to be used as the palette for gauge outlines.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ai);\n        },\n        set: function (v) {\n            this.i.ai = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"minimumValue\", {\n        /**\n         * Gets or sets the minimum value of the scale.\n        */\n        get: function () {\n            return this.i.cc;\n        },\n        set: function (v) {\n            this.i.cc = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"actualMinimumValue\", {\n        /**\n         * Gets the resolved minimum value of the scale.\n        */\n        get: function () {\n            return this.i.bs;\n        },\n        set: function (v) {\n            this.i.bs = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"maximumValue\", {\n        /**\n         * Gets or sets the maximum value of the scale.\n        */\n        get: function () {\n            return this.i.ca;\n        },\n        set: function (v) {\n            this.i.ca = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"actualMaximumValue\", {\n        /**\n         * Gets the resolved maximum value of the scale.\n        */\n        get: function () {\n            return this.i.br;\n        },\n        set: function (v) {\n            this.i.br = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"interval\", {\n        /**\n         * Gets or sets the interval to use for the scale.\n        */\n        get: function () {\n            return this.i.b6;\n        },\n        set: function (v) {\n            this.i.b6 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"centerX\", {\n        /**\n         * Gets or sets the x position of the center of the gauge with the value ranging from 0 to 1.\n        */\n        get: function () {\n            return this.i.b3;\n        },\n        set: function (v) {\n            this.i.b3 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"centerY\", {\n        /**\n         * Gets or sets the y position of the center of the gauge with the value ranging from 0 to 1.\n        */\n        get: function () {\n            return this.i.b4;\n        },\n        set: function (v) {\n            this.i.b4 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"value\", {\n        /**\n         * Gets or sets the value at which to point the needle of the gauge.\n        */\n        get: function () {\n            return this.i.dm;\n        },\n        set: function (v) {\n            this.i.dm = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleStartAngle\", {\n        /**\n         * Gets or sets the start angle for the scale in degrees.\n        */\n        get: function () {\n            return this.i.da;\n        },\n        set: function (v) {\n            this.i.da = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleEndAngle\", {\n        /**\n         * Gets or sets the end angle for the scale in degrees.\n        */\n        get: function () {\n            return this.i.c5;\n        },\n        set: function (v) {\n            this.i.c5 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleSweepDirection\", {\n        /**\n         * Gets or sets the direction in which the scale sweeps around the center from the start angle to end angle.\n        */\n        get: function () {\n            return this.i.ii;\n        },\n        set: function (v) {\n            this.i.ii = ensureEnum(SweepDirection_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"transitionDuration\", {\n        /**\n         * Gets or sets the number of milliseconds over which changes to the gauge should be animated.\n        */\n        get: function () {\n            return this.i.dn;\n        },\n        set: function (v) {\n            this.i.dn = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"transitionEasingFunction\", {\n        /**\n         * Gets or sets the easing function used to morph the current series.\n        */\n        get: function () {\n            return this.i.a0;\n        },\n        set: function (v) {\n            this.i.a0 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleBrush\", {\n        /**\n         * Gets or sets the brush to use when rendering the fill of the needle.\n        */\n        get: function () {\n            return brushToString(this.i.ib);\n        },\n        set: function (v) {\n            this.i.ib = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleOutline\", {\n        /**\n         * Gets or sets the brush to use when rendering the outline of the needle.\n        */\n        get: function () {\n            return brushToString(this.i.ic);\n        },\n        set: function (v) {\n            this.i.ic = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleStartExtent\", {\n        /**\n         * Gets or sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cv;\n        },\n        set: function (v) {\n            this.i.cv = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleEndExtent\", {\n        /**\n         * Gets or sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cn;\n        },\n        set: function (v) {\n            this.i.cn = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleShape\", {\n        /**\n         * Gets or sets the shape to use when rendering the needle from a number of options.\n        */\n        get: function () {\n            return this.i.ar;\n        },\n        set: function (v) {\n            this.i.ar = ensureEnum(RadialGaugeNeedleShape_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleStartWidthRatio\", {\n        /**\n         * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cw;\n        },\n        set: function (v) {\n            this.i.cw = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleEndWidthRatio\", {\n        /**\n         * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.co;\n        },\n        set: function (v) {\n            this.i.co = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleBaseFeatureWidthRatio\", {\n        /**\n         * Gets or sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cm;\n        },\n        set: function (v) {\n            this.i.cm = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleBaseFeatureExtent\", {\n        /**\n         * Gets or sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cl;\n        },\n        set: function (v) {\n            this.i.cl = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePointFeatureWidthRatio\", {\n        /**\n         * Gets or sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cu;\n        },\n        set: function (v) {\n            this.i.cu = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePointFeatureExtent\", {\n        /**\n         * Gets or sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.ct;\n        },\n        set: function (v) {\n            this.i.ct = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotWidthRatio\", {\n        /**\n         * Gets or sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cs;\n        },\n        set: function (v) {\n            this.i.cs = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotInnerWidthRatio\", {\n        /**\n         * Gets or sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.\n        */\n        get: function () {\n            return this.i.cp;\n        },\n        set: function (v) {\n            this.i.cp = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotShape\", {\n        /**\n         * Gets or sets the shape to use for the needle cap.\n        */\n        get: function () {\n            return this.i.as;\n        },\n        set: function (v) {\n            this.i.as = ensureEnum(RadialGaugePivotShape_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleStartExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.db;\n        },\n        set: function (v) {\n            this.i.db = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotBrush\", {\n        /**\n         * Gets or sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.\n        */\n        get: function () {\n            return brushToString(this.i.id);\n        },\n        set: function (v) {\n            this.i.id = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotOutline\", {\n        /**\n         * Gets or sets the brush to use for the outlines of the needle cap.\n        */\n        get: function () {\n            return brushToString(this.i.ie);\n        },\n        set: function (v) {\n            this.i.ie = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needleStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness of the needle outline.\n        */\n        get: function () {\n            return this.i.cx;\n        },\n        set: function (v) {\n            this.i.cx = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"needlePivotStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use for the outline of the needle cap.\n        */\n        get: function () {\n            return this.i.cq;\n        },\n        set: function (v) {\n            this.i.cq = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleEndExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.c6;\n        },\n        set: function (v) {\n            this.i.c6 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"labelExtent\", {\n        /**\n         * Gets or sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.b7;\n        },\n        set: function (v) {\n            this.i.b7 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"labelInterval\", {\n        /**\n         * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.\n        */\n        get: function () {\n            return this.i.b9;\n        },\n        set: function (v) {\n            this.i.b9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"tickStartExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.dg;\n        },\n        set: function (v) {\n            this.i.dg = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"tickEndExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.de;\n        },\n        set: function (v) {\n            this.i.de = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"tickStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use when rendering ticks.\n        */\n        get: function () {\n            return this.i.di;\n        },\n        set: function (v) {\n            this.i.di = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"tickBrush\", {\n        /**\n         * Gets or sets the brush to use for the major tickmarks.\n        */\n        get: function () {\n            return brushToString(this.i.ih);\n        },\n        set: function (v) {\n            this.i.ih = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"fontBrush\", {\n        /**\n         * Gets or sets the brush to use for the label font.\n        */\n        get: function () {\n            return brushToString(this.i.h8);\n        },\n        set: function (v) {\n            this.i.h8 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"minorTickStartExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.ch;\n        },\n        set: function (v) {\n            this.i.ch = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"minorTickEndExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.\n        */\n        get: function () {\n            return this.i.cf;\n        },\n        set: function (v) {\n            this.i.cf = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"minorTickStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use when rendering minor ticks.\n        */\n        get: function () {\n            return this.i.cj;\n        },\n        set: function (v) {\n            this.i.cj = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"minorTickBrush\", {\n        /**\n         * Gets or sets the brush to use for the minor tickmarks.\n        */\n        get: function () {\n            return brushToString(this.i.ia);\n        },\n        set: function (v) {\n            this.i.ia = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"minorTickCount\", {\n        /**\n         * Gets or sets the number of minor tickmarks to place between major tickmarks.\n        */\n        get: function () {\n            return this.i.ce;\n        },\n        set: function (v) {\n            this.i.ce = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleBrush\", {\n        /**\n         * Gets or sets the brush to use to fill the background of the scale.\n        */\n        get: function () {\n            return brushToString(this.i.ig);\n        },\n        set: function (v) {\n            this.i.ig = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingBrush\", {\n        /**\n         * Gets or sets the brush to use to fill the backing of the gauge.\n        */\n        get: function () {\n            return brushToString(this.i.h6);\n        },\n        set: function (v) {\n            this.i.h6 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingOutline\", {\n        /**\n         * Gets or sets the brush to use for the outline of the backing.\n        */\n        get: function () {\n            return brushToString(this.i.h7);\n        },\n        set: function (v) {\n            this.i.h7 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness of the backing outline.\n        */\n        get: function () {\n            return this.i.b1;\n        },\n        set: function (v) {\n            this.i.b1 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingOuterExtent\", {\n        /**\n         * Gets or sets the outer extent of the gauge backing.\n        */\n        get: function () {\n            return this.i.by;\n        },\n        set: function (v) {\n            this.i.by = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingOversweep\", {\n        /**\n         * Gets or sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.\n        */\n        get: function () {\n            return this.i.b0;\n        },\n        set: function (v) {\n            this.i.b0 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleOversweep\", {\n        /**\n         * Gets or sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.\n        */\n        get: function () {\n            return this.i.c8;\n        },\n        set: function (v) {\n            this.i.c8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"scaleOversweepShape\", {\n        /**\n         * Gets or sets the oversweep shape to use for the excess fill area for the scale.\n        */\n        get: function () {\n            return this.i.au;\n        },\n        set: function (v) {\n            this.i.au = ensureEnum(RadialGaugeScaleOversweepShape_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingCornerRadius\", {\n        /**\n         * Gets or sets the corner rounding radius to use for the fitted scale backings.\n        */\n        get: function () {\n            return this.i.bu;\n        },\n        set: function (v) {\n            this.i.bu = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingInnerExtent\", {\n        /**\n         * Gets or sets the inner extent of the gauge backing.\n        */\n        get: function () {\n            return this.i.bw;\n        },\n        set: function (v) {\n            this.i.bw = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"backingShape\", {\n        /**\n         * Gets or sets the type of shape to use for the backing of the gauge.\n        */\n        get: function () {\n            return this.i.am;\n        },\n        set: function (v) {\n            this.i.am = ensureEnum(RadialGaugeBackingShape_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"radiusMultiplier\", {\n        /**\n         * Gets or sets the multiplying factor to apply to the normal radius of the gauge.\n         * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.\n         * This introduces a multiplicative factor to that value.\n        */\n        get: function () {\n            return this.i.c0;\n        },\n        set: function (v) {\n            this.i.c0 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"duplicateLabelOmissionStrategy\", {\n        /**\n         * Gets or sets the strategy to use for omitting labels if the first and last label have the same value.\n        */\n        get: function () {\n            return this.i.an;\n        },\n        set: function (v) {\n            this.i.an = ensureEnum(RadialGaugeDuplicateLabelOmissionStrategy_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"isNeedleDraggingEnabled\", {\n        /**\n         * Gets or sets whether needle dragging is enabled or not.\n        */\n        get: function () {\n            return this.i.ba;\n        },\n        set: function (v) {\n            this.i.ba = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"isNeedleDraggingConstrained\", {\n        /**\n         * Gets or sets whether the needle is constrained within the minimum and maximum value range during dragging.\n        */\n        get: function () {\n            return this.i.a9;\n        },\n        set: function (v) {\n            this.i.a9 = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"font\", {\n        /**\n         * Gets or sets the font.\n        */\n        get: function () {\n            return this.i.d2;\n        },\n        set: function (v) {\n            this.i.d2 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"labelFormat\", {\n        /**\n         * Gets or sets the label composite format used when creating label values.\n        */\n        get: function () {\n            return this.i.d9;\n        },\n        set: function (v) {\n            this.i.d9 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"labelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the LabelFormat string.\n        */\n        get: function () {\n            return this.i.ag;\n        },\n        set: function (v) {\n            this.i.ag = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"animating\", {\n        /**\n         * Gets a value indicating whether the radial gauge is currently animating.\n        */\n        get: function () {\n            return this.i.a6;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"transitionProgress\", {\n        /**\n         * Gets the transition progress of the animation when the control is animating.\n        */\n        get: function () {\n            return this.i.dk;\n        },\n        set: function (v) {\n            this.i.dk = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"pixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.cz;\n        },\n        set: function (v) {\n            this.i.cz = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"actualPixelScalingRatio\", {\n        /**\n         * Gets the actual pixel scaling ratio used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.bt;\n        },\n        set: function (v) {\n            this.i.bt = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrRadialGauge.prototype.findByName = function (name) {\n        if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {\n            return this.ranges.findByName(name);\n        }\n        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n            return arrayFindByName(this.labelFormatSpecifiers, name);\n        }\n        return null;\n    };\n    Object.defineProperty(IgrRadialGauge.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrRadialGauge.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrRadialGauge.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"RadialGauge\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.\n\r\n* @param value  * The value to scale.\n*/\n    IgrRadialGauge.prototype.scaleValue = function (value) {\n        var iv = this.i.dd(value);\n        return (iv);\n    };\n    /**\n     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.\n    \r\n    * @param angle  * The angle in radians to unscale to a value.\n    */\n    IgrRadialGauge.prototype.unscaleValue = function (angle) {\n        var iv = this.i.dl(angle);\n        return (iv);\n    };\n    /**\n     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.\n    \r\n    * @param point  * The point for which to retrieve the associated value.\n    */\n    IgrRadialGauge.prototype.getValueForPoint = function (point) {\n        var iv = this.i.b5(toPoint(point));\n        return (iv);\n    };\n    IgrRadialGauge.prototype.getPointForValue = function (value, extent) {\n        var iv = this.i.ik(value, extent);\n        return fromPoint(iv);\n    };\n    IgrRadialGauge.prototype.styleUpdated = function () {\n        this.i.gd();\n    };\n    IgrRadialGauge.prototype.needleContainsPoint = function (point, isFinger) {\n        var iv = this.i.needleContainsPoint(toPoint(point), isFinger);\n        return (iv);\n    };\n    /**\n     * Called by the UI framework to provide a UI container for rendering this control.\n    \r\n    * @param container  * The UI container element.\n    */\n    IgrRadialGauge.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    IgrRadialGauge.prototype.containerResized = function () {\n        this.i.containerResized();\n    };\n    /**\n     * Use to force the radial gauge to finish any deferred work before printing or evaluating its visual.\n     * This should only be called if the visual of the radial gauge needs to be synchronously saved or evaluated.\n     * Calling this method too often will hinder the performance of the radial gauge.\n    \r\n    */\n    IgrRadialGauge.prototype.flush = function () {\n        this.i.fs();\n    };\n    /**\n     * Returns visuals as a serialized string.\n    \r\n    */\n    IgrRadialGauge.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.d1();\n        return (iv);\n    };\n    Object.defineProperty(IgrRadialGauge.prototype, \"formatLabel\", {\n        /**\n         * Event which is raised when a label of the gauge is formatted.\n         * Function takes first argument null and second argument ui.\n         * Use ui.owner to obtain reference to gauge widget.\n         * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.\n         * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.\n         * Use ui.startAngle to obtain the starting angle of gauge scale.\n         * Use ui.endAngle to obtain the ending angle of gauge scale.\n         * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.\n         * Use ui.value to obtain the value on the gauge scale associated with the label.\n         * Use ui.label to obtain the string value of the label.\n        */\n        get: function () {\n            return this._formatLabel;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._formatLabel_wrapped !== null) {\n                this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);\n                this._formatLabel_wrapped = null;\n                this._formatLabel = null;\n            }\n            this._formatLabel = ev;\n            this._formatLabel_wrapped = function (o, e) {\n                var outerArgs = new IgrFormatRadialGaugeLabelEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeFormatLabel) {\n                    _this.beforeFormatLabel(_this, outerArgs);\n                }\n                if (_this._formatLabel) {\n                    _this._formatLabel(_this, outerArgs);\n                }\n            };\n            this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"alignLabel\", {\n        /**\n         * Event which is raised when a label of the gauge is aligned along the scale.\n         * Function takes first argument null and second argument ui.\n         * Use ui.owner to obtain reference to gauge widget.\n         * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.\n         * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.\n         * Use ui.startAngle to obtain the starting angle of gauge scale.\n         * Use ui.endAngle to obtain the ending angle of gauge scale.\n         * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.\n         * Use ui.value to obtain the value on the gauge scale associated with the label.\n         * Use ui.label to obtain the string value of the label.\n         * Use ui.width to obtain the width of the label.\n         * Use ui.height to obtain the height of the label.\n         * Use ui.offsetX to obtain the X offset of the label on the gauge scale.\n         * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.\n        */\n        get: function () {\n            return this._alignLabel;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._alignLabel_wrapped !== null) {\n                this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);\n                this._alignLabel_wrapped = null;\n                this._alignLabel = null;\n            }\n            this._alignLabel = ev;\n            this._alignLabel_wrapped = function (o, e) {\n                var outerArgs = new IgrAlignRadialGaugeLabelEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeAlignLabel) {\n                    _this.beforeAlignLabel(_this, outerArgs);\n                }\n                if (_this._alignLabel) {\n                    _this._alignLabel(_this, outerArgs);\n                }\n            };\n            this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"valueChanged\", {\n        /**\n         * Occurs when the Value property changes.\n        */\n        get: function () {\n            return this._valueChanged;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._valueChanged_wrapped !== null) {\n                this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);\n                this._valueChanged_wrapped = null;\n                this._valueChanged = null;\n            }\n            this._valueChanged = ev;\n            this._valueChanged_wrapped = function (o, e) {\n                var outerArgs = new IgrDoubleValueChangedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeValueChanged) {\n                    _this.beforeValueChanged(_this, outerArgs);\n                }\n                if (_this._valueChanged) {\n                    _this._valueChanged(_this, outerArgs);\n                }\n            };\n            this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"actualMinimumValueChange\", {\n        get: function () {\n            return this._actualMinimumValueChange;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._actualMinimumValueChange_wrapped !== null) {\n                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n                this._actualMinimumValueChange_wrapped = null;\n                this._actualMinimumValueChange = null;\n            }\n            this._actualMinimumValueChange = ev;\n            this._actualMinimumValueChange_wrapped = function (o, e) {\n                var ext = _this.actualMinimumValue;\n                if (_this.beforeActualMinimumValueChange) {\n                    _this.beforeActualMinimumValueChange(_this, ext);\n                }\n                if (_this._actualMinimumValueChange) {\n                    _this._actualMinimumValueChange(_this, ext);\n                }\n            };\n            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialGauge.prototype, \"actualMaximumValueChange\", {\n        get: function () {\n            return this._actualMaximumValueChange;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._actualMaximumValueChange_wrapped !== null) {\n                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n                this._actualMaximumValueChange_wrapped = null;\n                this._actualMaximumValueChange = null;\n            }\n            this._actualMaximumValueChange = ev;\n            this._actualMaximumValueChange_wrapped = function (o, e) {\n                var ext = _this.actualMaximumValue;\n                if (_this.beforeActualMaximumValueChange) {\n                    _this.beforeActualMaximumValueChange(_this, ext);\n                }\n                if (_this._actualMaximumValueChange) {\n                    _this._actualMaximumValueChange(_this, ext);\n                }\n            };\n            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrRadialGauge;\n}(React.Component));\nexport { IgrRadialGauge };\n//# sourceMappingURL=igr-radial-gauge.js.map\n"]},"metadata":{},"sourceType":"module"}