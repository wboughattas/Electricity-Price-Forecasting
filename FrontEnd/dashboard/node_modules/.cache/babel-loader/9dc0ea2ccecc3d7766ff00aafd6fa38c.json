{"ast":null,"code":"import * as tslib_1 from \"tslib\"; //\n// Original version: https://github.com/mosa/Mono-Class-Libraries/blob/master/mcs/class/System.XML/System.Xml/XmlTextReader.cs\n//\n// System.Xml.XmlInputStream \n//\tencoding-specification-wise XML input stream and reader\n//\n// Author:\n//\tAtsushi Enomoto (ginga@kit.hi-ho.ne.jp)\n//\n//\t(C)2003 Atsushi Enomoto\n//\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { NonBlockingStreamReader } from \"./NonBlockingStreamReader\";\nimport { XmlInputStream } from \"./XmlInputStream\";\nimport { markType } from \"./type\";\nimport { XmlException } from \"./XmlException\";\n/**\r\n * @hidden\r\n */\n\nvar XmlStreamReader =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(XmlStreamReader, _super);\n\n  function XmlStreamReader(a) {\n    var _rest = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      _rest[_i - 1] = arguments[_i];\n    }\n\n    var _this = this;\n\n    a = a == void 0 ? 0 : a;\n\n    switch (a) {\n      case 0:\n        {\n          var c = _rest[0];\n          _this = _super.call(this, c, c.actualEncoding != null ? c.actualEncoding : XmlInputStream.strictUTF8) || this;\n          _this.ae = null;\n          _this.ae = c;\n        }\n        break;\n\n      case 1:\n        {\n          var c = _rest[0];\n          var d = [new XmlInputStream(c)];\n          {\n            var f = d[0];\n            _this = _super.call(this, f, f.actualEncoding != null ? f.actualEncoding : XmlInputStream.strictUTF8) || this;\n            _this.ae = null;\n            _this.ae = f;\n          }\n        }\n        break;\n    }\n\n    return _this;\n  }\n\n  XmlStreamReader.prototype.i = function () {\n    this.ae.close();\n  };\n\n  XmlStreamReader.prototype.c = function (a, b, c) {\n    try {\n      return _super.prototype.c.call(this, a, b, c);\n    } catch (d) {\n      throw new XmlException(3, \"invalid data.\");\n    }\n  };\n\n  XmlStreamReader.prototype.dispose1 = function (a) {\n    _super.prototype.dispose1.call(this, a);\n\n    if (a) {\n      this.i();\n    }\n  };\n\n  XmlStreamReader.$t = markType(XmlStreamReader, 'XmlStreamReader', NonBlockingStreamReader.$);\n  XmlStreamReader.ad = new XmlException(3, \"invalid data.\");\n  return XmlStreamReader;\n}(NonBlockingStreamReader);\n\nexport { XmlStreamReader };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/XmlStreamReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\r\n//\r\n// Original version: https://github.com/mosa/Mono-Class-Libraries/blob/master/mcs/class/System.XML/System.Xml/XmlTextReader.cs\r\n//\r\n// System.Xml.XmlInputStream \r\n//\tencoding-specification-wise XML input stream and reader\r\n//\r\n// Author:\r\n//\tAtsushi Enomoto (ginga@kit.hi-ho.ne.jp)\r\n//\r\n//\t(C)2003 Atsushi Enomoto\r\n//\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n// \r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n// \r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\nimport { NonBlockingStreamReader } from \"./NonBlockingStreamReader\";\r\nimport { XmlInputStream } from \"./XmlInputStream\";\r\nimport { markType } from \"./type\";\r\nimport { XmlException } from \"./XmlException\";\r\n/**\r\n * @hidden\r\n */\r\nvar XmlStreamReader = /** @class */ /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(XmlStreamReader, _super);\r\n    function XmlStreamReader(a) {\r\n        var _rest = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            _rest[_i - 1] = arguments[_i];\r\n        }\r\n        var _this = this;\r\n        a = (a == void 0) ? 0 : a;\r\n        switch (a) {\r\n            case 0:\r\n                {\r\n                    var c = _rest[0];\r\n                    _this = _super.call(this, c, c.actualEncoding != null ? c.actualEncoding : XmlInputStream.strictUTF8) || this;\r\n                    _this.ae = null;\r\n                    _this.ae = c;\r\n                }\r\n                break;\r\n            case 1:\r\n                {\r\n                    var c = _rest[0];\r\n                    var d = [new XmlInputStream(c)];\r\n                    {\r\n                        var f = d[0];\r\n                        _this = _super.call(this, f, f.actualEncoding != null ? f.actualEncoding : XmlInputStream.strictUTF8) || this;\r\n                        _this.ae = null;\r\n                        _this.ae = f;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return _this;\r\n    }\r\n    XmlStreamReader.prototype.i = function () {\r\n        this.ae.close();\r\n    };\r\n    XmlStreamReader.prototype.c = function (a, b, c) {\r\n        try {\r\n            return _super.prototype.c.call(this, a, b, c);\r\n        }\r\n        catch (d) {\r\n            throw new XmlException(3, \"invalid data.\");\r\n        }\r\n    };\r\n    XmlStreamReader.prototype.dispose1 = function (a) {\r\n        _super.prototype.dispose1.call(this, a);\r\n        if (a) {\r\n            this.i();\r\n        }\r\n    };\r\n    XmlStreamReader.$t = markType(XmlStreamReader, 'XmlStreamReader', NonBlockingStreamReader.$);\r\n    XmlStreamReader.ad = new XmlException(3, \"invalid data.\");\r\n    return XmlStreamReader;\r\n}(NonBlockingStreamReader));\r\nexport { XmlStreamReader };\r\n//# sourceMappingURL=XmlStreamReader.js.map\r\n"]},"metadata":{},"sourceType":"module"}