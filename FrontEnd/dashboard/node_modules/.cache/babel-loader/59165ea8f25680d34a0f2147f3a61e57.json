{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { FragmentBaseDescriptionMetadata } from \"./FragmentBaseDescriptionMetadata\";\nimport { ColumnFragmentDescription } from \"./ColumnFragmentDescription\";\n/**\n * @hidden\n */\n\nvar ColumnFragmentDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(ColumnFragmentDescriptionMetadata, _super);\n\n  function ColumnFragmentDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ColumnFragmentDescriptionMetadata.b = function (a) {\n    if (ColumnFragmentDescriptionMetadata.a == null) {\n      ColumnFragmentDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      ColumnFragmentDescriptionMetadata.c(a, ColumnFragmentDescriptionMetadata.a);\n    }\n  };\n\n  ColumnFragmentDescriptionMetadata.c = function (a, b) {\n    FragmentBaseDescriptionMetadata.c(a, b);\n    b.item(\"RadiusX\", \"Number:double\");\n    b.item(\"RadiusY\", \"Number:double\");\n  };\n\n  ColumnFragmentDescriptionMetadata.d = function (a) {\n    ColumnFragmentDescriptionMetadata.b(a);\n    a.n(\"ColumnFragment\", function () {\n      return new ColumnFragmentDescription();\n    });\n    a.m(\"ColumnFragment\", ColumnFragmentDescriptionMetadata.a);\n  };\n\n  ColumnFragmentDescriptionMetadata.$t = markType(ColumnFragmentDescriptionMetadata, 'ColumnFragmentDescriptionMetadata');\n  ColumnFragmentDescriptionMetadata.a = null;\n  return ColumnFragmentDescriptionMetadata;\n}(Base);\n\nexport { ColumnFragmentDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/ColumnFragmentDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,+BAAT,QAAgD,mCAAhD;AACA,SAAS,yBAAT,QAA0C,6BAA1C;AAEA;;AAEG;;AACH,IAAA,iCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuD,EAAA,OAAA,CAAA,SAAA,CAAA,iCAAA,EAAA,MAAA;;AAAvD,WAAA,iCAAA,GAAA;;AAmBC;;AAhBe,EAAA,iCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,iCAAiC,CAAC,CAAlC,IAAuC,IAA3C,EAAiD;AAChD,MAAA,iCAAiC,CAAC,CAAlC,GAAsC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAtC;AACA,MAAA,iCAAiC,CAAC,CAAlC,CAAoC,CAApC,EAAuC,iCAAiC,CAAC,CAAzE;AACA;AACD,GALc;;AAMR,EAAA,iCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,+BAA+B,CAAC,CAAhC,CAAkC,CAAlC,EAAqC,CAArC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,SAAP,EAAkB,eAAlB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,SAAP,EAAkB,eAAlB;AACA,GAJM;;AAKA,EAAA,iCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,iCAAiC,CAAC,CAAlC,CAAoC,CAApC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,gBAAJ,EAAsB,YAAA;AAAM,aAAA,IAAA,yBAAA,EAAA;AAA+B,KAA3D;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,gBAAJ,EAAsB,iCAAiC,CAAC,CAAxD;AACA,GAJM;;AAbA,EAAA,iCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,iCAAD,EAAoC,mCAApC,CAAnB;AACQ,EAAA,iCAAA,CAAA,CAAA,GAAkC,IAAlC;AAiBhB,SAAA,iCAAA;AAAC,CAnBD,CAAuD,IAAvD,CAAA;;SAAa,iC","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { FragmentBaseDescriptionMetadata } from \"./FragmentBaseDescriptionMetadata\";\nimport { ColumnFragmentDescription } from \"./ColumnFragmentDescription\";\n/**\n * @hidden\n */\nvar ColumnFragmentDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ColumnFragmentDescriptionMetadata, _super);\n    function ColumnFragmentDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ColumnFragmentDescriptionMetadata.b = function (a) {\n        if (ColumnFragmentDescriptionMetadata.a == null) {\n            ColumnFragmentDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            ColumnFragmentDescriptionMetadata.c(a, ColumnFragmentDescriptionMetadata.a);\n        }\n    };\n    ColumnFragmentDescriptionMetadata.c = function (a, b) {\n        FragmentBaseDescriptionMetadata.c(a, b);\n        b.item(\"RadiusX\", \"Number:double\");\n        b.item(\"RadiusY\", \"Number:double\");\n    };\n    ColumnFragmentDescriptionMetadata.d = function (a) {\n        ColumnFragmentDescriptionMetadata.b(a);\n        a.n(\"ColumnFragment\", function () { return new ColumnFragmentDescription(); });\n        a.m(\"ColumnFragment\", ColumnFragmentDescriptionMetadata.a);\n    };\n    ColumnFragmentDescriptionMetadata.$t = markType(ColumnFragmentDescriptionMetadata, 'ColumnFragmentDescriptionMetadata');\n    ColumnFragmentDescriptionMetadata.a = null;\n    return ColumnFragmentDescriptionMetadata;\n}(Base));\nexport { ColumnFragmentDescriptionMetadata };\n//# sourceMappingURL=ColumnFragmentDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}