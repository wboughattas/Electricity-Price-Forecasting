{"ast":null,"code":"import { delegateCombine, delegateRemove } from './type';\nimport { ItfConverter as ItfConverter_internal } from \"./ItfConverter\";\nimport { IgrAsyncCompletedEventArgs } from './igr-async-completed-event-args';\nimport { Uri } from './Uri';\n/**\n * Class for converting Itf files into enumerable triangulations.\n*/\n\nvar IgrTriangulationDataSource =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function IgrTriangulationDataSource() {\n    //@@ZoneRunner\n    this._importCompleted = null;\n    this._importCompleted_wrapped = null;\n    this._implementation = this.createImplementation();\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  }\n\n  IgrTriangulationDataSource.prototype.createImplementation = function () {\n    return new ItfConverter_internal();\n  };\n\n  Object.defineProperty(IgrTriangulationDataSource.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrTriangulationDataSource.prototype.onImplementationCreated = function () {};\n\n  IgrTriangulationDataSource.prototype._provideImplementation = function (i) {\n    this._implementation = i;\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  };\n\n  Object.defineProperty(IgrTriangulationDataSource.prototype, \"source\", {\n    /**\n     * Gets the string path specifying the location of the Itf file.\n    */\n    get: function () {\n      if (this.i.source == null) return null;\n      return this.i.source.value;\n    },\n\n    /**\n     * Sets the string path specifying the location of the Itf file.\n    */\n    set: function (v) {\n      if (v == null) {\n        this.i.source = null;\n      } else {\n        this.i.source = new Uri(0, v);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n  * Gets the point data.\n  */\n\n  IgrTriangulationDataSource.prototype.getPointData = function () {\n    var iv = this.i.getPointData();\n    return iv._inner;\n  };\n  /**\n  * Gets the triangle data.\n  */\n\n\n  IgrTriangulationDataSource.prototype.getTriangleData = function () {\n    var iv = this.i.getTriangleData();\n    return iv._inner;\n  };\n\n  IgrTriangulationDataSource.prototype.findByName = function (name) {\n    return null;\n  };\n\n  Object.defineProperty(IgrTriangulationDataSource.prototype, \"importCompleted\", {\n    /**\n     * Event raised when the import operation has completed\n    */\n    get: function () {\n      return this._importCompleted;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._importCompleted_wrapped !== null) {\n        this.i.importCompleted = delegateRemove(this.i.importCompleted, this._importCompleted_wrapped);\n        this._importCompleted_wrapped = null;\n        this._importCompleted = null;\n      }\n\n      this._importCompleted = ev;\n\n      this._importCompleted_wrapped = function (o, e) {\n        var outerArgs = new IgrAsyncCompletedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeImportCompleted) {\n          _this.beforeImportCompleted(_this, outerArgs);\n        }\n\n        if (_this._importCompleted) {\n          _this._importCompleted(_this, outerArgs);\n        }\n      };\n\n      this.i.importCompleted = delegateCombine(this.i.importCompleted, this._importCompleted_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrTriangulationDataSource;\n}();\n\nexport { IgrTriangulationDataSource };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/igr-triangulation-data-source.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { delegateCombine, delegateRemove } from './type';\nimport { ItfConverter as ItfConverter_internal } from \"./ItfConverter\";\nimport { IgrAsyncCompletedEventArgs } from './igr-async-completed-event-args';\nimport { Uri } from './Uri';\n/**\n * Class for converting Itf files into enumerable triangulations.\n*/\nvar IgrTriangulationDataSource = /** @class */ /*@__PURE__*/ (function () {\n    function IgrTriangulationDataSource() {\n        //@@ZoneRunner\n        this._importCompleted = null;\n        this._importCompleted_wrapped = null;\n        this._implementation = this.createImplementation();\n        this._implementation.externalObject = this;\n        this.onImplementationCreated();\n    }\n    IgrTriangulationDataSource.prototype.createImplementation = function () {\n        return new ItfConverter_internal();\n    };\n    Object.defineProperty(IgrTriangulationDataSource.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrTriangulationDataSource.prototype.onImplementationCreated = function () {\n    };\n    IgrTriangulationDataSource.prototype._provideImplementation = function (i) {\n        this._implementation = i;\n        this._implementation.externalObject = this;\n        this.onImplementationCreated();\n    };\n    Object.defineProperty(IgrTriangulationDataSource.prototype, \"source\", {\n        /**\n         * Gets the string path specifying the location of the Itf file.\n        */\n        get: function () {\n            if (this.i.source == null)\n                return null;\n            return this.i.source.value;\n        },\n        /**\n         * Sets the string path specifying the location of the Itf file.\n        */\n        set: function (v) {\n            if (v == null) {\n                this.i.source = null;\n            }\n            else {\n                this.i.source = new Uri(0, v);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n    * Gets the point data.\n    */\n    IgrTriangulationDataSource.prototype.getPointData = function () {\n        var iv = this.i.getPointData();\n        return iv._inner;\n    };\n    /**\n    * Gets the triangle data.\n    */\n    IgrTriangulationDataSource.prototype.getTriangleData = function () {\n        var iv = this.i.getTriangleData();\n        return iv._inner;\n    };\n    IgrTriangulationDataSource.prototype.findByName = function (name) {\n        return null;\n    };\n    Object.defineProperty(IgrTriangulationDataSource.prototype, \"importCompleted\", {\n        /**\n         * Event raised when the import operation has completed\n        */\n        get: function () {\n            return this._importCompleted;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._importCompleted_wrapped !== null) {\n                this.i.importCompleted = delegateRemove(this.i.importCompleted, this._importCompleted_wrapped);\n                this._importCompleted_wrapped = null;\n                this._importCompleted = null;\n            }\n            this._importCompleted = ev;\n            this._importCompleted_wrapped = function (o, e) {\n                var outerArgs = new IgrAsyncCompletedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeImportCompleted) {\n                    _this.beforeImportCompleted(_this, outerArgs);\n                }\n                if (_this._importCompleted) {\n                    _this._importCompleted(_this, outerArgs);\n                }\n            };\n            this.i.importCompleted = delegateCombine(this.i.importCompleted, this._importCompleted_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrTriangulationDataSource;\n}());\nexport { IgrTriangulationDataSource };\n//# sourceMappingURL=igr-triangulation-data-source.js.map\n"]},"metadata":{},"sourceType":"module"}