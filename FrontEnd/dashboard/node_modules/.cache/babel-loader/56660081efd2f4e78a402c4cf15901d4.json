{"ast":null,"code":"/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\nimport { markEnum } from \"./type\";\n/**\r\n * Indentifies the function type for a filter function expression.\r\n */\n\nexport var FilterExpressionFunctionType = /*@__PURE__*/function (FilterExpressionFunctionType) {\n  /**\r\n   * Determines if a string contains another.\r\n   */\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Contains\"] = 0] = \"Contains\";\n  /**\r\n   * Determines if a string ends with another.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"EndsWith\"] = 1] = \"EndsWith\";\n  /**\r\n   * Determines if a string starts with another.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"StartsWith\"] = 2] = \"StartsWith\";\n  /**\r\n   * Gets the length of a string.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Length\"] = 3] = \"Length\";\n  /**\r\n   * Gets the index of a string within another.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"IndexOf\"] = 4] = \"IndexOf\";\n  /**\r\n   * Replaces instances of a string within another with a separate string.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Replace\"] = 5] = \"Replace\";\n  /**\r\n   * Gets the substring of a string based on start index and optionally length.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Substring\"] = 6] = \"Substring\";\n  /**\r\n   * Gets the lowercase representation of a string.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToLower\"] = 7] = \"ToLower\";\n  /**\r\n   * Gets the uppercase representation of a string.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToUpper\"] = 8] = \"ToUpper\";\n  /**\r\n   * Trims the starting and ending whitespace from a string.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Trim\"] = 9] = \"Trim\";\n  /**\r\n   * Concatenates strings together.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Concat\"] = 10] = \"Concat\";\n  /**\r\n   * Gets the day from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Day\"] = 11] = \"Day\";\n  /**\r\n   * Gets the hour from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Hour\"] = 12] = \"Hour\";\n  /**\r\n   * Gets the minute from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Minute\"] = 13] = \"Minute\";\n  /**\r\n   * Gets the month from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Month\"] = 14] = \"Month\";\n  /**\r\n   * Gets teh second from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Second\"] = 15] = \"Second\";\n  /**\r\n   * Gets the year from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Year\"] = 16] = \"Year\";\n  /**\r\n   * Rounds a numeric value.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Round\"] = 17] = \"Round\";\n  /**\r\n   * Floors a numeric value.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Floor\"] = 18] = \"Floor\";\n  /**\r\n   * Ceilings a numeric value.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Ceiling\"] = 19] = \"Ceiling\";\n  /**\r\n   * Gets the date from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Date\"] = 20] = \"Date\";\n  /**\r\n   * Gets the time from a date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Time\"] = 21] = \"Time\";\n  /**\r\n   * Gets the current date/time.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Now\"] = 22] = \"Now\";\n  /**\r\n   * Gets whether the value matches a certain type.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"IsOf\"] = 23] = \"IsOf\";\n  /**\r\n   * Gets a value cast to a specific type.\r\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Cast\"] = 24] = \"Cast\";\n  return FilterExpressionFunctionType;\n}({});\n/**\r\n * @hidden\r\n */\n\nexport var FilterExpressionFunctionType_$type = /*@__PURE__*/markEnum('FilterExpressionFunctionType', 'Contains,0|EndsWith,1|StartsWith,2|Length,3|IndexOf,4|Replace,5|Substring,6|ToLower,7|ToUpper,8|Trim,9|Concat,10|Day,11|Hour,12|Minute,13|Month,14|Second,15|Year,16|Round,17|Floor,18|Ceiling,19|Date,20|Time,21|Now,22|IsOf,23|Cast,24');","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/FilterExpressionFunctionType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\r\nimport { markEnum } from \"./type\";\r\n/**\r\n * Indentifies the function type for a filter function expression.\r\n */\r\nexport var FilterExpressionFunctionType = /*@__PURE__*/ (function (FilterExpressionFunctionType) {\r\n    /**\r\n     * Determines if a string contains another.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Contains\"] = 0] = \"Contains\";\r\n    /**\r\n     * Determines if a string ends with another.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"EndsWith\"] = 1] = \"EndsWith\";\r\n    /**\r\n     * Determines if a string starts with another.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"StartsWith\"] = 2] = \"StartsWith\";\r\n    /**\r\n     * Gets the length of a string.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Length\"] = 3] = \"Length\";\r\n    /**\r\n     * Gets the index of a string within another.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"IndexOf\"] = 4] = \"IndexOf\";\r\n    /**\r\n     * Replaces instances of a string within another with a separate string.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Replace\"] = 5] = \"Replace\";\r\n    /**\r\n     * Gets the substring of a string based on start index and optionally length.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Substring\"] = 6] = \"Substring\";\r\n    /**\r\n     * Gets the lowercase representation of a string.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToLower\"] = 7] = \"ToLower\";\r\n    /**\r\n     * Gets the uppercase representation of a string.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToUpper\"] = 8] = \"ToUpper\";\r\n    /**\r\n     * Trims the starting and ending whitespace from a string.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Trim\"] = 9] = \"Trim\";\r\n    /**\r\n     * Concatenates strings together.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Concat\"] = 10] = \"Concat\";\r\n    /**\r\n     * Gets the day from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Day\"] = 11] = \"Day\";\r\n    /**\r\n     * Gets the hour from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Hour\"] = 12] = \"Hour\";\r\n    /**\r\n     * Gets the minute from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Minute\"] = 13] = \"Minute\";\r\n    /**\r\n     * Gets the month from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Month\"] = 14] = \"Month\";\r\n    /**\r\n     * Gets teh second from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Second\"] = 15] = \"Second\";\r\n    /**\r\n     * Gets the year from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Year\"] = 16] = \"Year\";\r\n    /**\r\n     * Rounds a numeric value.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Round\"] = 17] = \"Round\";\r\n    /**\r\n     * Floors a numeric value.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Floor\"] = 18] = \"Floor\";\r\n    /**\r\n     * Ceilings a numeric value.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Ceiling\"] = 19] = \"Ceiling\";\r\n    /**\r\n     * Gets the date from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Date\"] = 20] = \"Date\";\r\n    /**\r\n     * Gets the time from a date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Time\"] = 21] = \"Time\";\r\n    /**\r\n     * Gets the current date/time.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Now\"] = 22] = \"Now\";\r\n    /**\r\n     * Gets whether the value matches a certain type.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"IsOf\"] = 23] = \"IsOf\";\r\n    /**\r\n     * Gets a value cast to a specific type.\r\n     */\r\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Cast\"] = 24] = \"Cast\";\r\n    return FilterExpressionFunctionType;\r\n})({});\r\n/**\r\n * @hidden\r\n */\r\nexport var FilterExpressionFunctionType_$type = /*@__PURE__*/ markEnum('FilterExpressionFunctionType', 'Contains,0|EndsWith,1|StartsWith,2|Length,3|IndexOf,4|Replace,5|Substring,6|ToLower,7|ToUpper,8|Trim,9|Concat,10|Day,11|Hour,12|Minute,13|Month,14|Second,15|Year,16|Round,17|Floor,18|Ceiling,19|Date,20|Time,21|Now,22|IsOf,23|Cast,24');\r\n//# sourceMappingURL=FilterExpressionFunctionType.js.map\r\n"]},"metadata":{},"sourceType":"module"}