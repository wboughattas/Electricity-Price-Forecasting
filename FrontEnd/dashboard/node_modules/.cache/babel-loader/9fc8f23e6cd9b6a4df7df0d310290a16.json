{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { ColumnExchangerDescription } from \"./ColumnExchangerDescription\";\n/**\n * @hidden\n */\n\nvar ColumnExchangerDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(ColumnExchangerDescriptionMetadata, _super);\n\n  function ColumnExchangerDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ColumnExchangerDescriptionMetadata.b = function (a) {\n    if (ColumnExchangerDescriptionMetadata.a == null) {\n      ColumnExchangerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      ColumnExchangerDescriptionMetadata.c(a, ColumnExchangerDescriptionMetadata.a);\n    }\n  };\n\n  ColumnExchangerDescriptionMetadata.c = function (a, b) {\n    b.item(\"TargetIndex\", \"Number:int\");\n  };\n\n  ColumnExchangerDescriptionMetadata.d = function (a) {\n    ColumnExchangerDescriptionMetadata.b(a);\n    a.n(\"ColumnExchanger\", function () {\n      return new ColumnExchangerDescription();\n    });\n    a.m(\"ColumnExchanger\", ColumnExchangerDescriptionMetadata.a);\n  };\n\n  ColumnExchangerDescriptionMetadata.$t = markType(ColumnExchangerDescriptionMetadata, 'ColumnExchangerDescriptionMetadata');\n  ColumnExchangerDescriptionMetadata.a = null;\n  return ColumnExchangerDescriptionMetadata;\n}(Base);\n\nexport { ColumnExchangerDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/ColumnExchangerDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,0BAAT,QAA2C,8BAA3C;AAEA;;AAEG;;AACH,IAAA,kCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwD,EAAA,OAAA,CAAA,SAAA,CAAA,kCAAA,EAAA,MAAA;;AAAxD,WAAA,kCAAA,GAAA;;AAiBC;;AAde,EAAA,kCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,kCAAkC,CAAC,CAAnC,IAAwC,IAA5C,EAAkD;AACjD,MAAA,kCAAkC,CAAC,CAAnC,GAAuC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAvC;AACA,MAAA,kCAAkC,CAAC,CAAnC,CAAqC,CAArC,EAAwC,kCAAkC,CAAC,CAA3E;AACA;AACD,GALc;;AAMR,EAAA,kCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,YAAtB;AACA,GAFM;;AAGA,EAAA,kCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,kCAAkC,CAAC,CAAnC,CAAqC,CAArC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,iBAAJ,EAAuB,YAAA;AAAM,aAAA,IAAA,0BAAA,EAAA;AAAgC,KAA7D;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,iBAAJ,EAAuB,kCAAkC,CAAC,CAA1D;AACA,GAJM;;AAXA,EAAA,kCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,kCAAD,EAAqC,oCAArC,CAAnB;AACQ,EAAA,kCAAA,CAAA,CAAA,GAAkC,IAAlC;AAehB,SAAA,kCAAA;AAAC,CAjBD,CAAwD,IAAxD,CAAA;;SAAa,kC","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { ColumnExchangerDescription } from \"./ColumnExchangerDescription\";\n/**\n * @hidden\n */\nvar ColumnExchangerDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ColumnExchangerDescriptionMetadata, _super);\n    function ColumnExchangerDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ColumnExchangerDescriptionMetadata.b = function (a) {\n        if (ColumnExchangerDescriptionMetadata.a == null) {\n            ColumnExchangerDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            ColumnExchangerDescriptionMetadata.c(a, ColumnExchangerDescriptionMetadata.a);\n        }\n    };\n    ColumnExchangerDescriptionMetadata.c = function (a, b) {\n        b.item(\"TargetIndex\", \"Number:int\");\n    };\n    ColumnExchangerDescriptionMetadata.d = function (a) {\n        ColumnExchangerDescriptionMetadata.b(a);\n        a.n(\"ColumnExchanger\", function () { return new ColumnExchangerDescription(); });\n        a.m(\"ColumnExchanger\", ColumnExchangerDescriptionMetadata.a);\n    };\n    ColumnExchangerDescriptionMetadata.$t = markType(ColumnExchangerDescriptionMetadata, 'ColumnExchangerDescriptionMetadata');\n    ColumnExchangerDescriptionMetadata.a = null;\n    return ColumnExchangerDescriptionMetadata;\n}(Base));\nexport { ColumnExchangerDescriptionMetadata };\n//# sourceMappingURL=ColumnExchangerDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}