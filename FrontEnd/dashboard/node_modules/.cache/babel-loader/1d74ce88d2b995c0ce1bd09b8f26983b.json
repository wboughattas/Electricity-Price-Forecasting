{"ast":null,"code":"import { TransactionType_$type } from \"./TransactionType\";\nimport { ensureEnum } from \"./componentUtil\";\n/**\n * Represents the final state of items with all transactions combined.\n*/\n\nvar IgrTransactionState =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function IgrTransactionState() {}\n\n  Object.defineProperty(IgrTransactionState.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrTransactionState.prototype.onImplementationCreated = function () {};\n\n  IgrTransactionState.prototype._provideImplementation = function (i) {\n    this._implementation = i;\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  };\n\n  Object.defineProperty(IgrTransactionState.prototype, \"id\", {\n    /**\n     * Gets or sets the ID for the state.  I.e. an items primary key.\n    */\n    get: function () {\n      return this.i.id;\n    },\n    set: function (v) {\n      this.i.id = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTransactionState.prototype, \"transactionType\", {\n    /**\n     * Gets or sets how this state was created.\n    */\n    get: function () {\n      return this.i.transactionType;\n    },\n    set: function (v) {\n      this.i.transactionType = ensureEnum(TransactionType_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTransactionState.prototype, \"value\", {\n    /**\n     * Gets or sets the final value with all transaction deltas combined.\n    */\n    get: function () {\n      return this.i.value;\n    },\n    set: function (v) {\n      this.i.value = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrTransactionState.prototype, \"version\", {\n    /**\n     * Gets or sets the version data for this item. Used for concurrency.\n    */\n    get: function () {\n      return this.i.version;\n    },\n    set: function (v) {\n      this.i.version = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrTransactionState.prototype.findByName = function (name) {\n    return null;\n  };\n\n  return IgrTransactionState;\n}();\n\nexport { IgrTransactionState };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/igr-transaction-state.ts"],"names":[],"mappings":"AAKA,SAA0B,qBAA1B,QAAuD,mBAAvD;AAEA,SAAS,UAAT,QAA2B,iBAA3B;AAEA;;AAEE;;AACF,IAAA,mBAAA;AAAA;;AAAA;AAAA,YAAA;AAYC,WAAA,mBAAA,GAAA,CACC;;AAPD,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,GAAX,EAAY;AAHgB;;AAEG;SAC/B,YAAA;AACC,aAAO,KAAK,eAAZ;AACA,KAFW;oBAAA;;AAAA,GAAZ;;AAGQ,EAAA,mBAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,YAAA,CAEC,CAFO;;AAKE,EAAA,mBAAA,CAAA,SAAA,CAAA,sBAAA,GAAV,UAAiC,CAAjC,EAAuC;AACnC,SAAK,eAAL,GAAuB,CAAvB;AACC,SAAK,eAAL,CAA6B,cAA7B,GAA8C,IAA9C;AACL,SAAK,uBAAL;AACC,GAJS;;AAQV,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,IAAJ,EAAM;AAHN;;AAEE;SACF,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,EAAd;AACA,KAFK;SAGN,UAAO,CAAP,EAAa;AACZ,WAAK,CAAL,CAAO,EAAP,GAAY,CAAZ;AACA,KALK;oBAAA;;AAAA,GAAN;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AAHnB;;AAEE;SACF,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,eAAd;AACA,KAFkB;SAGnB,UAAoB,CAApB,EAAsC;AACrC,WAAK,CAAL,CAAO,eAAP,GAAyB,UAAU,CAAkB,qBAAlB,EAAyC,CAAzC,CAAnC;AACA,KALkB;oBAAA;;AAAA,GAAnB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;AAEE;SACF,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,KAAd;AACA,KAFQ;SAGT,UAAU,CAAV,EAAgB;AACf,WAAK,CAAL,CAAO,KAAP,GAAe,CAAf;AACA,KALQ;oBAAA;;AAAA,GAAT;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;AAEE;SACF,YAAA;AACC,aAAO,KAAK,CAAL,CAAO,OAAd;AACA,KAFU;SAGX,UAAY,CAAZ,EAAkB;AACjB,WAAK,CAAL,CAAO,OAAP,GAAiB,CAAjB;AACA,KALU;oBAAA;;AAAA,GAAX;;AAOW,EAAA,mBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA8B;AAG1B,WAAO,IAAP;AACH,GAJM;;AAKZ,SAAA,mBAAA;AAAC,CA7DD,EAAA","sourceRoot":"","sourcesContent":["import { TransactionType_$type } from \"./TransactionType\";\nimport { ensureEnum } from \"./componentUtil\";\n/**\n * Represents the final state of items with all transactions combined.\n*/\nvar IgrTransactionState = /** @class */ /*@__PURE__*/ (function () {\n    function IgrTransactionState() {\n    }\n    Object.defineProperty(IgrTransactionState.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrTransactionState.prototype.onImplementationCreated = function () {\n    };\n    IgrTransactionState.prototype._provideImplementation = function (i) {\n        this._implementation = i;\n        this._implementation.externalObject = this;\n        this.onImplementationCreated();\n    };\n    Object.defineProperty(IgrTransactionState.prototype, \"id\", {\n        /**\n         * Gets or sets the ID for the state.  I.e. an items primary key.\n        */\n        get: function () {\n            return this.i.id;\n        },\n        set: function (v) {\n            this.i.id = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTransactionState.prototype, \"transactionType\", {\n        /**\n         * Gets or sets how this state was created.\n        */\n        get: function () {\n            return this.i.transactionType;\n        },\n        set: function (v) {\n            this.i.transactionType = ensureEnum(TransactionType_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTransactionState.prototype, \"value\", {\n        /**\n         * Gets or sets the final value with all transaction deltas combined.\n        */\n        get: function () {\n            return this.i.value;\n        },\n        set: function (v) {\n            this.i.value = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrTransactionState.prototype, \"version\", {\n        /**\n         * Gets or sets the version data for this item. Used for concurrency.\n        */\n        get: function () {\n            return this.i.version;\n        },\n        set: function (v) {\n            this.i.version = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrTransactionState.prototype.findByName = function (name) {\n        return null;\n    };\n    return IgrTransactionState;\n}());\nexport { IgrTransactionState };\n//# sourceMappingURL=igr-transaction-state.js.map\n"]},"metadata":{},"sourceType":"module"}