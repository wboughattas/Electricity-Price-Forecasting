{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, Point_$type, markType } from \"./type\";\nimport { isNaN_, isInfinity } from \"./number\";\n/**\n * @hidden\n */\n\nvar CoreGeometryUtil =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(CoreGeometryUtil, _super);\n\n  function CoreGeometryUtil() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CoreGeometryUtil.a = function (a) {\n    if (isNaN_(a) || isInfinity(a)) {\n      return a;\n    }\n\n    while (a > 360) {\n      a -= 360;\n    }\n\n    while (a < 0) {\n      a += 360;\n    }\n\n    return a;\n  };\n\n  CoreGeometryUtil.b = function (a, b, c, d, e) {\n    var f = {\n      $type: Point_$type,\n      x: (a.x + b.x) / 2,\n      y: (a.y + b.y) / 2\n    };\n    var g = b.x - a.x;\n    var h = b.y - a.y;\n    var i = Math.sqrt(g * g + h * h);\n    var j = h;\n    var k = g * -1;\n\n    if (e == d) {\n      j = h * -1;\n      k = g;\n    }\n\n    var l = Math.max(Math.abs(j), Math.abs(k));\n    j = j / l;\n    k = k / l;\n    var m = Math.sqrt(j * j + k * k);\n    var n = j / m;\n    var o = k / m;\n    var p = i / 2;\n    var q = Math.sqrt(c * c - p * p);\n\n    if (isNaN_(q)) {\n      q = 0;\n    }\n\n    var r = q * n;\n    var s = q * o;\n    var t = {\n      $type: Point_$type,\n      x: f.x + r,\n      y: f.y + s\n    };\n    return t;\n  };\n\n  CoreGeometryUtil.$t = markType(CoreGeometryUtil, 'CoreGeometryUtil');\n  return CoreGeometryUtil;\n}(Base);\n\nexport { CoreGeometryUtil };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/CoreGeometryUtil.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAsB,WAAtB,EAAyC,QAAzC,QAAoE,QAApE;AACA,SAAS,MAAT,EAAiB,UAAjB,QAAmC,UAAnC;AAEA;;AAEG;;AACH,IAAA,gBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,EAAA,MAAA;;AAAtC,WAAA,gBAAA,GAAA;;AAyCC;;AAvCO,EAAA,gBAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkB;AACjB,QAAI,MAAM,CAAC,CAAD,CAAN,IAAa,UAAU,CAAC,CAAD,CAA3B,EAAgC;AAC/B,aAAO,CAAP;AACA;;AACD,WAAO,CAAC,GAAG,GAAX,EAAgB;AACf,MAAA,CAAC,IAAI,GAAL;AACA;;AACD,WAAO,CAAC,GAAG,CAAX,EAAc;AACb,MAAA,CAAC,IAAI,GAAL;AACA;;AACD,WAAO,CAAP;AACA,GAXM;;AAYA,EAAA,gBAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAmB,CAAnB,EAA6B,CAA7B,EAAwC,CAAxC,EAAoD,CAApD,EAA8D;AAC7D,QAAI,CAAC,GAAiB;AAAE,MAAA,KAAK,EAAE,WAAT;AAAsB,MAAA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAT,IAAc,CAAvC;AAA0C,MAAA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAT,IAAc;AAA3D,KAAtB;AACA,QAAI,CAAC,GAAW,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAxB;AACA,QAAI,CAAC,GAAW,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAxB;AACA,QAAI,CAAC,GAAW,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,CAAtB,CAAhB;AACA,QAAI,CAAC,GAAW,CAAhB;AACA,QAAI,CAAC,GAAW,CAAC,GAAG,CAAC,CAArB;;AACA,QAAI,CAAC,IAAI,CAAT,EAAY;AACX,MAAA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAT;AACA,MAAA,CAAC,GAAG,CAAJ;AACA;;AACD,QAAI,CAAC,GAAW,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,CAAT,CAAT,EAAsB,IAAI,CAAC,GAAL,CAAS,CAAT,CAAtB,CAAhB;AACA,IAAA,CAAC,GAAG,CAAC,GAAG,CAAR;AACA,IAAA,CAAC,GAAG,CAAC,GAAG,CAAR;AACA,QAAI,CAAC,GAAW,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,CAAtB,CAAhB;AACA,QAAI,CAAC,GAAW,CAAC,GAAG,CAApB;AACA,QAAI,CAAC,GAAW,CAAC,GAAG,CAApB;AACA,QAAI,CAAC,GAAW,CAAC,GAAG,CAApB;AACA,QAAI,CAAC,GAAW,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,CAAtB,CAAhB;;AACA,QAAI,MAAM,CAAC,CAAD,CAAV,EAAe;AACd,MAAA,CAAC,GAAG,CAAJ;AACA;;AACD,QAAI,CAAC,GAAW,CAAC,GAAG,CAApB;AACA,QAAI,CAAC,GAAW,CAAC,GAAG,CAApB;AACA,QAAI,CAAC,GAAiB;AAAE,MAAA,KAAK,EAAE,WAAT;AAAsB,MAAA,CAAC,EAAE,CAAC,CAAC,CAAF,GAAM,CAA/B;AAAkC,MAAA,CAAC,EAAE,CAAC,CAAC,CAAF,GAAM;AAA3C,KAAtB;AACA,WAAO,CAAP;AACA,GA1BM;;AAbA,EAAA,gBAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,gBAAD,EAAmB,kBAAnB,CAAnB;AAwCR,SAAA,gBAAA;AAAC,CAzCD,CAAsC,IAAtC,CAAA;;SAAa,gB","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, Point_$type, markType } from \"./type\";\nimport { isNaN_, isInfinity } from \"./number\";\n/**\n * @hidden\n */\nvar CoreGeometryUtil = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CoreGeometryUtil, _super);\n    function CoreGeometryUtil() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CoreGeometryUtil.a = function (a) {\n        if (isNaN_(a) || isInfinity(a)) {\n            return a;\n        }\n        while (a > 360) {\n            a -= 360;\n        }\n        while (a < 0) {\n            a += 360;\n        }\n        return a;\n    };\n    CoreGeometryUtil.b = function (a, b, c, d, e) {\n        var f = { $type: Point_$type, x: (a.x + b.x) / 2, y: (a.y + b.y) / 2 };\n        var g = b.x - a.x;\n        var h = b.y - a.y;\n        var i = Math.sqrt(g * g + h * h);\n        var j = h;\n        var k = g * -1;\n        if (e == d) {\n            j = h * -1;\n            k = g;\n        }\n        var l = Math.max(Math.abs(j), Math.abs(k));\n        j = j / l;\n        k = k / l;\n        var m = Math.sqrt(j * j + k * k);\n        var n = j / m;\n        var o = k / m;\n        var p = i / 2;\n        var q = Math.sqrt(c * c - p * p);\n        if (isNaN_(q)) {\n            q = 0;\n        }\n        var r = q * n;\n        var s = q * o;\n        var t = { $type: Point_$type, x: f.x + r, y: f.y + s };\n        return t;\n    };\n    CoreGeometryUtil.$t = markType(CoreGeometryUtil, 'CoreGeometryUtil');\n    return CoreGeometryUtil;\n}(Base));\nexport { CoreGeometryUtil };\n//# sourceMappingURL=CoreGeometryUtil.js.map\n"]},"metadata":{},"sourceType":"module"}