{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { SliceClickEventArgsDescriptionMetadata } from \"./SliceClickEventArgsDescriptionMetadata\";\nimport { HoleDimensionsChangedEventArgsDescriptionMetadata } from \"./HoleDimensionsChangedEventArgsDescriptionMetadata\";\nimport { DoughnutChartDescription } from \"./DoughnutChartDescription\";\n/**\n * @hidden\n */\n\nvar DoughnutChartDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(DoughnutChartDescriptionMetadata, _super);\n\n  function DoughnutChartDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DoughnutChartDescriptionMetadata.e = function (a, b) {\n    b.item(\"DataSourceRef\", \"(w:ItemsSource)DataRef:String\");\n    b.item(\"_qualifiedName\", \"String:Infragistics.Controls.Charts.XamDoughnutChart\");\n    b.item(\"Background\", \"(wf:BackColor/ColorTransform)Brush\");\n  };\n\n  DoughnutChartDescriptionMetadata.b = function (a) {\n    if (DoughnutChartDescriptionMetadata.a == null) {\n      DoughnutChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      DoughnutChartDescriptionMetadata.c(a, DoughnutChartDescriptionMetadata.a);\n      SliceClickEventArgsDescriptionMetadata.d(a);\n      HoleDimensionsChangedEventArgsDescriptionMetadata.d(a);\n    }\n  };\n\n  DoughnutChartDescriptionMetadata.c = function (a, b) {\n    b.item(\"AllowSliceSelection\", \"Boolean\");\n    b.item(\"IsSurfaceInteractionDisabled\", \"Boolean\");\n    b.item(\"AllowSliceExplosion\", \"Boolean\");\n    b.item(\"Series\", \"Collection:RingSeriesBase:RingSeriesCollection:RingSeriesBase\");\n    b.item(\"InnerExtent\", \"Number:double\");\n    b.item(\"SelectedSliceFill\", \"(w:SelectedStyle.Fill,wf:SelectedSliceFill)String\");\n    b.item(\"SelectedSliceStroke\", \"(w:SelectedStyle.Stroke,wf:SelectedSliceStroke)String\");\n    b.item(\"SelectedSliceStrokeThickness\", \"(w:SelectedStyle.StrokeThickness,wf:SelectedSliceStrokeThickness)Number:double\");\n    b.item(\"SelectedSliceOpacity\", \"(w:SelectedStyle.Opacity,wf:SelectedSliceOpacity)Number:double\");\n    b.item(\"PixelScalingRatio\", \"Number:double\");\n    b.item(\"ActualPixelScalingRatio\", \"Number:double\");\n    b.item(\"SliceClickRef\", \"EventRef::sliceClick\");\n    b.item(\"HoleDimensionsChangedRef\", \"EventRef::holeDimensionsChanged\");\n    DoughnutChartDescriptionMetadata.e(a, b);\n  };\n\n  DoughnutChartDescriptionMetadata.d = function (a) {\n    DoughnutChartDescriptionMetadata.b(a);\n    a.n(\"DoughnutChart\", function () {\n      return new DoughnutChartDescription();\n    });\n    a.m(\"DoughnutChart\", DoughnutChartDescriptionMetadata.a);\n  };\n\n  DoughnutChartDescriptionMetadata.$t = markType(DoughnutChartDescriptionMetadata, 'DoughnutChartDescriptionMetadata');\n  DoughnutChartDescriptionMetadata.a = null;\n  return DoughnutChartDescriptionMetadata;\n}(Base);\n\nexport { DoughnutChartDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/DoughnutChartDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,sCAAT,QAAuD,0CAAvD;AACA,SAAS,iDAAT,QAAkE,qDAAlE;AACA,SAAS,wBAAT,QAAyC,4BAAzC;AAEA;;AAEG;;AACH,IAAA,gCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsD,EAAA,OAAA,CAAA,SAAA,CAAA,gCAAA,EAAA,MAAA;;AAAtD,WAAA,gCAAA,GAAA;;AAqCC;;AAnCe,EAAA,gCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA4C,CAA5C,EAA2E;AAC1E,IAAA,CAAC,CAAC,IAAF,CAAO,eAAP,EAAwB,+BAAxB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,sDAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,YAAP,EAAqB,oCAArB;AACA,GAJc;;AAMA,EAAA,gCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,gCAAgC,CAAC,CAAjC,IAAsC,IAA1C,EAAgD;AAC/C,MAAA,gCAAgC,CAAC,CAAjC,GAAqC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAArC;AACA,MAAA,gCAAgC,CAAC,CAAjC,CAAmC,CAAnC,EAAsC,gCAAgC,CAAC,CAAvE;AACA,MAAA,sCAAsC,CAAC,CAAvC,CAAyC,CAAzC;AACA,MAAA,iDAAiD,CAAC,CAAlD,CAAoD,CAApD;AACA;AACD,GAPc;;AAQR,EAAA,gCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAA8B,SAA9B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,8BAAP,EAAuC,SAAvC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAA8B,SAA9B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,QAAP,EAAiB,+DAAjB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,eAAtB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,mDAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAA8B,uDAA9B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,8BAAP,EAAuC,gFAAvC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,sBAAP,EAA+B,gEAA/B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,eAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,yBAAP,EAAkC,eAAlC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,eAAP,EAAwB,sBAAxB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,0BAAP,EAAmC,iCAAnC;AACA,IAAA,gCAAgC,CAAC,CAAjC,CAAmC,CAAnC,EAAsC,CAAtC;AACA,GAfM;;AAgBA,EAAA,gCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,gCAAgC,CAAC,CAAjC,CAAmC,CAAnC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,eAAJ,EAAqB,YAAA;AAAM,aAAA,IAAA,wBAAA,EAAA;AAA8B,KAAzD;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,eAAJ,EAAqB,gCAAgC,CAAC,CAAtD;AACA,GAJM;;AA/BA,EAAA,gCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,gCAAD,EAAmC,kCAAnC,CAAnB;AAMQ,EAAA,gCAAA,CAAA,CAAA,GAAkC,IAAlC;AA8BhB,SAAA,gCAAA;AAAC,CArCD,CAAsD,IAAtD,CAAA;;SAAa,gC","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { SliceClickEventArgsDescriptionMetadata } from \"./SliceClickEventArgsDescriptionMetadata\";\nimport { HoleDimensionsChangedEventArgsDescriptionMetadata } from \"./HoleDimensionsChangedEventArgsDescriptionMetadata\";\nimport { DoughnutChartDescription } from \"./DoughnutChartDescription\";\n/**\n * @hidden\n */\nvar DoughnutChartDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DoughnutChartDescriptionMetadata, _super);\n    function DoughnutChartDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DoughnutChartDescriptionMetadata.e = function (a, b) {\n        b.item(\"DataSourceRef\", \"(w:ItemsSource)DataRef:String\");\n        b.item(\"_qualifiedName\", \"String:Infragistics.Controls.Charts.XamDoughnutChart\");\n        b.item(\"Background\", \"(wf:BackColor/ColorTransform)Brush\");\n    };\n    DoughnutChartDescriptionMetadata.b = function (a) {\n        if (DoughnutChartDescriptionMetadata.a == null) {\n            DoughnutChartDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            DoughnutChartDescriptionMetadata.c(a, DoughnutChartDescriptionMetadata.a);\n            SliceClickEventArgsDescriptionMetadata.d(a);\n            HoleDimensionsChangedEventArgsDescriptionMetadata.d(a);\n        }\n    };\n    DoughnutChartDescriptionMetadata.c = function (a, b) {\n        b.item(\"AllowSliceSelection\", \"Boolean\");\n        b.item(\"IsSurfaceInteractionDisabled\", \"Boolean\");\n        b.item(\"AllowSliceExplosion\", \"Boolean\");\n        b.item(\"Series\", \"Collection:RingSeriesBase:RingSeriesCollection:RingSeriesBase\");\n        b.item(\"InnerExtent\", \"Number:double\");\n        b.item(\"SelectedSliceFill\", \"(w:SelectedStyle.Fill,wf:SelectedSliceFill)String\");\n        b.item(\"SelectedSliceStroke\", \"(w:SelectedStyle.Stroke,wf:SelectedSliceStroke)String\");\n        b.item(\"SelectedSliceStrokeThickness\", \"(w:SelectedStyle.StrokeThickness,wf:SelectedSliceStrokeThickness)Number:double\");\n        b.item(\"SelectedSliceOpacity\", \"(w:SelectedStyle.Opacity,wf:SelectedSliceOpacity)Number:double\");\n        b.item(\"PixelScalingRatio\", \"Number:double\");\n        b.item(\"ActualPixelScalingRatio\", \"Number:double\");\n        b.item(\"SliceClickRef\", \"EventRef::sliceClick\");\n        b.item(\"HoleDimensionsChangedRef\", \"EventRef::holeDimensionsChanged\");\n        DoughnutChartDescriptionMetadata.e(a, b);\n    };\n    DoughnutChartDescriptionMetadata.d = function (a) {\n        DoughnutChartDescriptionMetadata.b(a);\n        a.n(\"DoughnutChart\", function () { return new DoughnutChartDescription(); });\n        a.m(\"DoughnutChart\", DoughnutChartDescriptionMetadata.a);\n    };\n    DoughnutChartDescriptionMetadata.$t = markType(DoughnutChartDescriptionMetadata, 'DoughnutChartDescriptionMetadata');\n    DoughnutChartDescriptionMetadata.a = null;\n    return DoughnutChartDescriptionMetadata;\n}(Base));\nexport { DoughnutChartDescriptionMetadata };\n//# sourceMappingURL=DoughnutChartDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}