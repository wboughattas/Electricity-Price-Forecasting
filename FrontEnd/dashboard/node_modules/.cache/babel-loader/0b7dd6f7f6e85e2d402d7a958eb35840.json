{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { GeometryData } from \"./GeometryData\";\nimport { markType } from \"./type\";\nimport { List$1 } from \"./List$1\";\nimport { PointData } from \"./PointData\";\n/**\n * @hidden\n */\n\nvar LineGeometryData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(LineGeometryData, _super);\n\n  function LineGeometryData() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._x1 = 0;\n    _this._y1 = 0;\n    _this._x2 = 0;\n    _this._y2 = 0;\n    return _this;\n  }\n\n  LineGeometryData.prototype.get_type = function () {\n    return \"Line\";\n  };\n\n  Object.defineProperty(LineGeometryData.prototype, \"type\", {\n    get: function () {\n      return this.get_type();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LineGeometryData.prototype, \"x1\", {\n    get: function () {\n      return this._x1;\n    },\n    set: function (a) {\n      this._x1 = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LineGeometryData.prototype, \"y1\", {\n    get: function () {\n      return this._y1;\n    },\n    set: function (a) {\n      this._y1 = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LineGeometryData.prototype, \"x2\", {\n    get: function () {\n      return this._x2;\n    },\n    set: function (a) {\n      this._x2 = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LineGeometryData.prototype, \"y2\", {\n    get: function () {\n      return this._y2;\n    },\n    set: function (a) {\n      this._y2 = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LineGeometryData.prototype.a = function () {\n    return \"x1: \" + this.x1 + \", y1: \" + this.y1 + \", x2: \" + this.x2 + \", y2:\" + this.y2;\n  };\n\n  LineGeometryData.prototype.scaleByViewport = function (a) {\n    this.x1 = (this.x1 - a.left) / a.width;\n    this.y1 = (this.y1 - a.top) / a.height;\n    this.x2 = (this.x2 - a.left) / a.width;\n    this.y2 = (this.y2 - a.top) / a.height;\n  };\n\n  LineGeometryData.prototype.getPointsOverride = function (a, b) {\n    var c = new List$1(PointData.$, 0);\n    a.add(c);\n    c.add(new PointData(this.x1, this.y1));\n    c.add(new PointData(this.x2, this.y2));\n  };\n\n  LineGeometryData.$t = markType(LineGeometryData, 'LineGeometryData', GeometryData.$);\n  return LineGeometryData;\n}(GeometryData);\n\nexport { LineGeometryData };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/LineGeometryData.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAqB,QAArB,QAAqC,QAArC;AAEA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,SAAT,QAA0B,aAA1B;AAGA;;AAEG;;AACH,IAAA,gBAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,EAAA,MAAA;;AAAtC,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAQS,IAAA,KAAA,CAAA,GAAA,GAAc,CAAd;AAOA,IAAA,KAAA,CAAA,GAAA,GAAc,CAAd;AAOA,IAAA,KAAA,CAAA,GAAA,GAAc,CAAd;AAOA,IAAA,KAAA,CAAA,GAAA,GAAc,CAAd;;AAsBR;;AAjDU,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAV,YAAA;AACC,WAAO,MAAP;AACA,GAFS;;AAGV,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;SAAR,YAAA;AACC,aAAO,KAAK,QAAL,EAAP;AACA,KAFO;oBAAA;;AAAA,GAAR;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,IAAJ,EAAM;SAAN,YAAA;AACC,aAAO,KAAK,GAAZ;AACA,KAFK;SAGN,UAAO,CAAP,EAAgB;AACf,WAAK,GAAL,GAAW,CAAX;AACA,KALK;oBAAA;;AAAA,GAAN;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,IAAJ,EAAM;SAAN,YAAA;AACC,aAAO,KAAK,GAAZ;AACA,KAFK;SAGN,UAAO,CAAP,EAAgB;AACf,WAAK,GAAL,GAAW,CAAX;AACA,KALK;oBAAA;;AAAA,GAAN;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,IAAJ,EAAM;SAAN,YAAA;AACC,aAAO,KAAK,GAAZ;AACA,KAFK;SAGN,UAAO,CAAP,EAAgB;AACf,WAAK,GAAL,GAAW,CAAX;AACA,KALK;oBAAA;;AAAA,GAAN;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,IAAJ,EAAM;SAAN,YAAA;AACC,aAAO,KAAK,GAAZ;AACA,KAFK;SAGN,UAAO,CAAP,EAAgB;AACf,WAAK,GAAL,GAAW,CAAX;AACA,KALK;oBAAA;;AAAA,GAAN;;AAMU,EAAA,gBAAA,CAAA,SAAA,CAAA,CAAA,GAAV,YAAA;AACC,WAAO,SAAS,KAAK,EAAd,GAAmB,QAAnB,GAA8B,KAAK,EAAnC,GAAwC,QAAxC,GAAmD,KAAK,EAAxD,GAA6D,OAA7D,GAAuE,KAAK,EAAnF;AACA,GAFS;;AAGV,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,CAAhB,EAA2B;AAC1B,SAAK,EAAL,GAAU,CAAC,KAAK,EAAL,GAAU,CAAC,CAAC,IAAb,IAAqB,CAAC,CAAC,KAAjC;AACA,SAAK,EAAL,GAAU,CAAC,KAAK,EAAL,GAAU,CAAC,CAAC,GAAb,IAAoB,CAAC,CAAC,MAAhC;AACA,SAAK,EAAL,GAAU,CAAC,KAAK,EAAL,GAAU,CAAC,CAAC,IAAb,IAAqB,CAAC,CAAC,KAAjC;AACA,SAAK,EAAL,GAAU,CAAC,KAAK,EAAL,GAAU,CAAC,CAAC,GAAb,IAAoB,CAAC,CAAC,MAAhC;AACA,GALD;;AAMA,EAAA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,CAAlB,EAAgD,CAAhD,EAAoE;AACnE,QAAI,CAAC,GAAG,IAAI,MAAJ,CAA4B,SAAU,CAAC,CAAvC,EAA0C,CAA1C,CAAR;AACA,IAAA,CAAC,CAAC,GAAF,CAAM,CAAN;AACA,IAAA,CAAC,CAAC,GAAF,CAAM,IAAI,SAAJ,CAAc,KAAK,EAAnB,EAAuB,KAAK,EAA5B,CAAN;AACA,IAAA,CAAC,CAAC,GAAF,CAAM,IAAI,SAAJ,CAAc,KAAK,EAAnB,EAAuB,KAAK,EAA5B,CAAN;AACA,GALD;;AA5CO,EAAA,gBAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,gBAAD,EAAmB,kBAAnB,EAA6C,YAAa,CAAC,CAA3D,CAAnB;AAkDR,SAAA,gBAAA;AAAC,CAnDD,CAAsC,YAAtC,CAAA;;SAAa,gB","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { GeometryData } from \"./GeometryData\";\nimport { markType } from \"./type\";\nimport { List$1 } from \"./List$1\";\nimport { PointData } from \"./PointData\";\n/**\n * @hidden\n */\nvar LineGeometryData = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(LineGeometryData, _super);\n    function LineGeometryData() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._x1 = 0;\n        _this._y1 = 0;\n        _this._x2 = 0;\n        _this._y2 = 0;\n        return _this;\n    }\n    LineGeometryData.prototype.get_type = function () {\n        return \"Line\";\n    };\n    Object.defineProperty(LineGeometryData.prototype, \"type\", {\n        get: function () {\n            return this.get_type();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineGeometryData.prototype, \"x1\", {\n        get: function () {\n            return this._x1;\n        },\n        set: function (a) {\n            this._x1 = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineGeometryData.prototype, \"y1\", {\n        get: function () {\n            return this._y1;\n        },\n        set: function (a) {\n            this._y1 = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineGeometryData.prototype, \"x2\", {\n        get: function () {\n            return this._x2;\n        },\n        set: function (a) {\n            this._x2 = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineGeometryData.prototype, \"y2\", {\n        get: function () {\n            return this._y2;\n        },\n        set: function (a) {\n            this._y2 = a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LineGeometryData.prototype.a = function () {\n        return \"x1: \" + this.x1 + \", y1: \" + this.y1 + \", x2: \" + this.x2 + \", y2:\" + this.y2;\n    };\n    LineGeometryData.prototype.scaleByViewport = function (a) {\n        this.x1 = (this.x1 - a.left) / a.width;\n        this.y1 = (this.y1 - a.top) / a.height;\n        this.x2 = (this.x2 - a.left) / a.width;\n        this.y2 = (this.y2 - a.top) / a.height;\n    };\n    LineGeometryData.prototype.getPointsOverride = function (a, b) {\n        var c = new List$1(PointData.$, 0);\n        a.add(c);\n        c.add(new PointData(this.x1, this.y1));\n        c.add(new PointData(this.x2, this.y2));\n    };\n    LineGeometryData.$t = markType(LineGeometryData, 'LineGeometryData', GeometryData.$);\n    return LineGeometryData;\n}(GeometryData));\nexport { LineGeometryData };\n//# sourceMappingURL=LineGeometryData.js.map\n"]},"metadata":{},"sourceType":"module"}