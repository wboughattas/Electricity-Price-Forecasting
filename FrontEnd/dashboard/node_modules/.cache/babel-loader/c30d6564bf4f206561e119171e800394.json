{"ast":null,"code":"import { delegateCombine, delegateRemove } from './type';\nimport { ShapefileConverter as ShapefileConverter_internal } from \"./ShapefileConverter\";\nimport { fromRect, toRect, ensureBool } from \"./componentUtil\";\nimport { IgrAsyncCompletedEventArgs } from './igr-async-completed-event-args';\nimport { IgrShapefileRecord } from './igr-shapefile-record';\nimport { IgrShapeFilterRecordEventArgs } from './igr-shape-filter-record-event-args';\n/**\r\n * Class used to convert Shapefiles into CLR objects.\r\n*/\n\nvar IgrShapeDataSource =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function IgrShapeDataSource() {\n    //@@ZoneRunner\n    this._importPending = null;\n    this._importPending_wrapped = null;\n    this._importCompleted = null;\n    this._importCompleted_wrapped = null;\n    this._filter = null;\n    this._filter_wrapped = null;\n    this._implementation = this.createImplementation();\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  }\n\n  IgrShapeDataSource.prototype.createImplementation = function () {\n    return new ShapefileConverter_internal();\n  };\n\n  Object.defineProperty(IgrShapeDataSource.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrShapeDataSource.prototype.onImplementationCreated = function () {};\n\n  IgrShapeDataSource.prototype._provideImplementation = function (i) {\n    this._implementation = i;\n    this._implementation.externalObject = this;\n    this.onImplementationCreated();\n  }; //   private _databaseSource: string;\n  ///**\n  // * Gets the string Uri path of the .dbf portion of the Shapefile\n  //*/\n  //   get databaseSource(): string {\n  //       return this._databaseSource;\n  //   }\n  ///**\n  // * Sets the string Uri path of the .dbf portion of the Shapefile\n  //*/\n  //   set databaseSource(v: string) {\n  //       this._databaseSource = v;\n  //   }\n  //   private _shapefileSource: string;\n  ///**\n  // * Gets the string Uri path of the .shp portion of the Shapefile\n  //*/\n  //   get shapefileSource(): string {\n  //       return this._shapefileSource;\n  //   }\n  ///**\n  // * Sets the string Uri path of the .shp portion of the Shapefile\n  //*/\n  //   set shapefileSource(v: string) {\n  //       this._shapefileSource = v;\n  //   }\n\n\n  IgrShapeDataSource.prototype.dataBind = function () {//this.i.shapefileSource = null;\n    //this.i.databaseSource = null;\n    //if (this._shapefileSource && this._databaseSource) {\n    //    this.i.shapefileSource = new Uri(0, this._shapefileSource);\n    //    this.i.databaseSource = new Uri(0, this._databaseSource);\n    //}\n  };\n  /**\r\n  * Gets the point data.\r\n  */\n\n\n  IgrShapeDataSource.prototype.getPointData = function () {\n    var list = this.i.getPointData();\n    var ret = [];\n\n    for (var i = 0; i < list.count; i++) {\n      var shapeRecord = list.item(i);\n\n      if (!shapeRecord.externalObject) {\n        var e = new IgrShapefileRecord();\n        e._implementation = shapeRecord;\n        shapeRecord.externalObject = e;\n      }\n\n      ret.push(shapeRecord.externalObject);\n    }\n\n    return ret;\n  };\n\n  Object.defineProperty(IgrShapeDataSource.prototype, \"name\", {\n    get: function () {\n      return this.i.name;\n    },\n    set: function (v) {\n      this.i.name = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"worldRect\", {\n    /**\r\n     * Gets the world bounding rectangle, as read from the header of the Shapefile.\r\n    */\n    get: function () {\n      return fromRect(this.i.worldRect);\n    },\n    set: function (v) {\n      this.i.worldRect = toRect(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"computedWorldRect\", {\n    /**\r\n     * Gets the world bounding rectangle, based on the filtered shapes\r\n    */\n    get: function () {\n      return fromRect(this.i.computedWorldRect);\n    },\n    set: function (v) {\n      this.i.computedWorldRect = toRect(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"shapeType\", {\n    /**\r\n     * Gets the shape type, as read from the header of the Shapefile.\r\n    */\n    get: function () {\n      return this.i.shapeType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"shapeHeader\", {\n    /**\r\n     * Gets the header of the Shapefile.\r\n    */\n    get: function () {\n      return this.i.shapeHeader;\n    },\n    set: function (v) {\n      this.i.shapeHeader = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"deferImportCompleted\", {\n    /**\r\n     * The Uri of the .shp portion of the Shapefile.\r\n    */\n    get: function () {\n      return this.i.deferImportCompleted;\n    },\n    set: function (v) {\n      this.i.deferImportCompleted = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"shapefileSource\", {\n    /**\r\n     * The Uri of the .shp portion of the Shapefile.\r\n    */\n    get: function () {\n      return this.i.shapefileSource;\n    },\n    set: function (v) {\n      this.i.shapefileSource = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"databaseSource\", {\n    /**\r\n     * The Uri of the .dbf portion of the Shapefile.\r\n    */\n    get: function () {\n      return this.i.databaseSource;\n    },\n    set: function (v) {\n      this.i.databaseSource = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"count\", {\n    /**\r\n     * The total number of ShapefileRecords in the collection.\r\n    */\n    get: function () {\n      return this.i.count;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrShapeDataSource.prototype.findByName = function (name) {\n    return null;\n  };\n\n  IgrShapeDataSource.prototype.getWorldBounds = function (useComputed) {\n    var iv = this.i.getWorldBounds(useComputed);\n    return fromRect(iv);\n  };\n\n  IgrShapeDataSource.prototype.setWorldBounds = function (setComputed, bounds) {\n    this.i.setWorldBounds(setComputed, toRect(bounds));\n  };\n\n  IgrShapeDataSource.prototype.sendImportCompleted = function () {\n    this.i.sendImportCompleted();\n  };\n\n  IgrShapeDataSource.prototype.getRecordsCount = function () {\n    var iv = this.i.getRecordsCount();\n    return iv;\n  };\n\n  IgrShapeDataSource.prototype.getRecord = function (index) {\n    var iv = this.i.getRecord(index);\n    return iv == null ? null : iv.externalObject;\n  };\n\n  IgrShapeDataSource.prototype.getRecordBounds = function (index) {\n    var iv = this.i.getRecordBounds(index);\n    return fromRect(iv);\n  };\n\n  IgrShapeDataSource.prototype.getRecordFieldNames = function (index) {\n    var iv = this.i.getRecordFieldNames(index);\n    return iv;\n  };\n\n  IgrShapeDataSource.prototype.getRecordValue = function (index, fieldName) {\n    var iv = this.i.getRecordValue(index, fieldName);\n    return iv;\n  };\n\n  IgrShapeDataSource.prototype.removeRecord = function (index) {\n    this.i.removeRecord(index);\n  };\n\n  IgrShapeDataSource.prototype.shiftAllShapes = function (offsetX, offsetY) {\n    this.i.shiftAllShapes(offsetX, offsetY);\n  };\n\n  IgrShapeDataSource.prototype.shiftShapes = function (recordIndex, offsetX, offsetY) {\n    this.i.shiftShapes(recordIndex, offsetX, offsetY);\n  };\n\n  IgrShapeDataSource.prototype.getMaxLongitude = function (recordIndex, useLargestShape, fromLongitude, toLongitude) {\n    var iv = this.i.getMaxLongitude(recordIndex, useLargestShape, fromLongitude, toLongitude);\n    return iv;\n  };\n\n  IgrShapeDataSource.prototype.setRecordValue = function (index, fieldName, value) {\n    this.i.setRecordValue(index, fieldName, value);\n  };\n\n  IgrShapeDataSource.prototype.getRecordValues = function (fieldName) {\n    var iv = this.i.getRecordValues(fieldName);\n    return iv;\n  };\n\n  IgrShapeDataSource.prototype.setRecordValues = function (fieldName, values) {\n    this.i.setRecordValues(fieldName, values);\n  };\n\n  IgrShapeDataSource.prototype.getLargestShapeBoundsForRecord = function (index) {\n    var iv = this.i.getLargestShapeBoundsForRecord(index);\n    return fromRect(iv);\n  };\n\n  Object.defineProperty(IgrShapeDataSource.prototype, \"importPending\", {\n    /**\r\n     * Event raised when the Shapefile has been imported from both the ShapefileSource and DatabaseSource Uris.\r\n    */\n    get: function () {\n      return this._importPending;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._importPending_wrapped !== null) {\n        this.i.importPending = delegateRemove(this.i.importPending, this._importPending_wrapped);\n        this._importPending_wrapped = null;\n        this._importPending = null;\n      }\n\n      this._importPending = ev;\n\n      this._importPending_wrapped = function (o, e) {\n        var outerArgs = new IgrAsyncCompletedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeImportPending) {\n          _this.beforeImportPending(_this, outerArgs);\n        }\n\n        if (_this._importPending) {\n          _this._importPending(_this, outerArgs);\n        }\n      };\n\n      this.i.importPending = delegateCombine(this.i.importPending, this._importPending_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"importCompleted\", {\n    /**\r\n     * Event raised when the Shapefile has been imported from both the ShapefileSource and DatabaseSource Uris.\r\n    */\n    get: function () {\n      return this._importCompleted;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._importCompleted_wrapped !== null) {\n        this.i.importCompleted = delegateRemove(this.i.importCompleted, this._importCompleted_wrapped);\n        this._importCompleted_wrapped = null;\n        this._importCompleted = null;\n      }\n\n      this._importCompleted = ev;\n\n      this._importCompleted_wrapped = function (o, e) {\n        var outerArgs = new IgrAsyncCompletedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeImportCompleted) {\n          _this.beforeImportCompleted(_this, outerArgs);\n        }\n\n        if (_this._importCompleted) {\n          _this._importCompleted(_this, outerArgs);\n        }\n      };\n\n      this.i.importCompleted = delegateCombine(this.i.importCompleted, this._importCompleted_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrShapeDataSource.prototype, \"filter\", {\n    get: function () {\n      return this._filter;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._filter_wrapped !== null) {\n        this.i.filter = delegateRemove(this.i.filter, this._filter_wrapped);\n        this._filter_wrapped = null;\n        this._filter = null;\n      }\n\n      this._filter = ev;\n\n      this._filter_wrapped = function (o, e) {\n        var outerArgs = new IgrShapeFilterRecordEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeFilter) {\n          _this.beforeFilter(_this, outerArgs);\n        }\n\n        if (_this._filter) {\n          _this._filter(_this, outerArgs);\n        }\n      };\n\n      this.i.filter = delegateCombine(this.i.filter, this._filter_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrShapeDataSource;\n}();\n\nexport { IgrShapeDataSource };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/igr-shape-data-source.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { delegateCombine, delegateRemove } from './type';\r\nimport { ShapefileConverter as ShapefileConverter_internal } from \"./ShapefileConverter\";\r\nimport { fromRect, toRect, ensureBool } from \"./componentUtil\";\r\nimport { IgrAsyncCompletedEventArgs } from './igr-async-completed-event-args';\r\nimport { IgrShapefileRecord } from './igr-shapefile-record';\r\nimport { IgrShapeFilterRecordEventArgs } from './igr-shape-filter-record-event-args';\r\n/**\r\n * Class used to convert Shapefiles into CLR objects.\r\n*/\r\nvar IgrShapeDataSource = /** @class */ /*@__PURE__*/ (function () {\r\n    function IgrShapeDataSource() {\r\n        //@@ZoneRunner\r\n        this._importPending = null;\r\n        this._importPending_wrapped = null;\r\n        this._importCompleted = null;\r\n        this._importCompleted_wrapped = null;\r\n        this._filter = null;\r\n        this._filter_wrapped = null;\r\n        this._implementation = this.createImplementation();\r\n        this._implementation.externalObject = this;\r\n        this.onImplementationCreated();\r\n    }\r\n    IgrShapeDataSource.prototype.createImplementation = function () {\r\n        return new ShapefileConverter_internal();\r\n    };\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"i\", {\r\n        get: function () {\r\n            return this._implementation;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    IgrShapeDataSource.prototype.onImplementationCreated = function () {\r\n    };\r\n    IgrShapeDataSource.prototype._provideImplementation = function (i) {\r\n        this._implementation = i;\r\n        this._implementation.externalObject = this;\r\n        this.onImplementationCreated();\r\n    };\r\n    //   private _databaseSource: string;\r\n    ///**\r\n    // * Gets the string Uri path of the .dbf portion of the Shapefile\r\n    //*/\r\n    //   get databaseSource(): string {\r\n    //       return this._databaseSource;\r\n    //   }\r\n    ///**\r\n    // * Sets the string Uri path of the .dbf portion of the Shapefile\r\n    //*/\r\n    //   set databaseSource(v: string) {\r\n    //       this._databaseSource = v;\r\n    //   }\r\n    //   private _shapefileSource: string;\r\n    ///**\r\n    // * Gets the string Uri path of the .shp portion of the Shapefile\r\n    //*/\r\n    //   get shapefileSource(): string {\r\n    //       return this._shapefileSource;\r\n    //   }\r\n    ///**\r\n    // * Sets the string Uri path of the .shp portion of the Shapefile\r\n    //*/\r\n    //   set shapefileSource(v: string) {\r\n    //       this._shapefileSource = v;\r\n    //   }\r\n    IgrShapeDataSource.prototype.dataBind = function () {\r\n        //this.i.shapefileSource = null;\r\n        //this.i.databaseSource = null;\r\n        //if (this._shapefileSource && this._databaseSource) {\r\n        //    this.i.shapefileSource = new Uri(0, this._shapefileSource);\r\n        //    this.i.databaseSource = new Uri(0, this._databaseSource);\r\n        //}\r\n    };\r\n    /**\r\n    * Gets the point data.\r\n    */\r\n    IgrShapeDataSource.prototype.getPointData = function () {\r\n        var list = this.i.getPointData();\r\n        var ret = [];\r\n        for (var i = 0; i < list.count; i++) {\r\n            var shapeRecord = list.item(i);\r\n            if (!shapeRecord.externalObject) {\r\n                var e = new IgrShapefileRecord();\r\n                e._implementation = shapeRecord;\r\n                shapeRecord.externalObject = e;\r\n            }\r\n            ret.push(shapeRecord.externalObject);\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"name\", {\r\n        get: function () {\r\n            return this.i.name;\r\n        },\r\n        set: function (v) {\r\n            this.i.name = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"worldRect\", {\r\n        /**\r\n         * Gets the world bounding rectangle, as read from the header of the Shapefile.\r\n        */\r\n        get: function () {\r\n            return fromRect(this.i.worldRect);\r\n        },\r\n        set: function (v) {\r\n            this.i.worldRect = toRect(v);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"computedWorldRect\", {\r\n        /**\r\n         * Gets the world bounding rectangle, based on the filtered shapes\r\n        */\r\n        get: function () {\r\n            return fromRect(this.i.computedWorldRect);\r\n        },\r\n        set: function (v) {\r\n            this.i.computedWorldRect = toRect(v);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"shapeType\", {\r\n        /**\r\n         * Gets the shape type, as read from the header of the Shapefile.\r\n        */\r\n        get: function () {\r\n            return this.i.shapeType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"shapeHeader\", {\r\n        /**\r\n         * Gets the header of the Shapefile.\r\n        */\r\n        get: function () {\r\n            return this.i.shapeHeader;\r\n        },\r\n        set: function (v) {\r\n            this.i.shapeHeader = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"deferImportCompleted\", {\r\n        /**\r\n         * The Uri of the .shp portion of the Shapefile.\r\n        */\r\n        get: function () {\r\n            return this.i.deferImportCompleted;\r\n        },\r\n        set: function (v) {\r\n            this.i.deferImportCompleted = ensureBool(v);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"shapefileSource\", {\r\n        /**\r\n         * The Uri of the .shp portion of the Shapefile.\r\n        */\r\n        get: function () {\r\n            return this.i.shapefileSource;\r\n        },\r\n        set: function (v) {\r\n            this.i.shapefileSource = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"databaseSource\", {\r\n        /**\r\n         * The Uri of the .dbf portion of the Shapefile.\r\n        */\r\n        get: function () {\r\n            return this.i.databaseSource;\r\n        },\r\n        set: function (v) {\r\n            this.i.databaseSource = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"count\", {\r\n        /**\r\n         * The total number of ShapefileRecords in the collection.\r\n        */\r\n        get: function () {\r\n            return this.i.count;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    IgrShapeDataSource.prototype.findByName = function (name) {\r\n        return null;\r\n    };\r\n    IgrShapeDataSource.prototype.getWorldBounds = function (useComputed) {\r\n        var iv = this.i.getWorldBounds(useComputed);\r\n        return fromRect(iv);\r\n    };\r\n    IgrShapeDataSource.prototype.setWorldBounds = function (setComputed, bounds) {\r\n        this.i.setWorldBounds(setComputed, toRect(bounds));\r\n    };\r\n    IgrShapeDataSource.prototype.sendImportCompleted = function () {\r\n        this.i.sendImportCompleted();\r\n    };\r\n    IgrShapeDataSource.prototype.getRecordsCount = function () {\r\n        var iv = this.i.getRecordsCount();\r\n        return (iv);\r\n    };\r\n    IgrShapeDataSource.prototype.getRecord = function (index) {\r\n        var iv = this.i.getRecord(index);\r\n        return (iv == null ? null : iv.externalObject);\r\n    };\r\n    IgrShapeDataSource.prototype.getRecordBounds = function (index) {\r\n        var iv = this.i.getRecordBounds(index);\r\n        return fromRect(iv);\r\n    };\r\n    IgrShapeDataSource.prototype.getRecordFieldNames = function (index) {\r\n        var iv = this.i.getRecordFieldNames(index);\r\n        return (iv);\r\n    };\r\n    IgrShapeDataSource.prototype.getRecordValue = function (index, fieldName) {\r\n        var iv = this.i.getRecordValue(index, fieldName);\r\n        return (iv);\r\n    };\r\n    IgrShapeDataSource.prototype.removeRecord = function (index) {\r\n        this.i.removeRecord(index);\r\n    };\r\n    IgrShapeDataSource.prototype.shiftAllShapes = function (offsetX, offsetY) {\r\n        this.i.shiftAllShapes(offsetX, offsetY);\r\n    };\r\n    IgrShapeDataSource.prototype.shiftShapes = function (recordIndex, offsetX, offsetY) {\r\n        this.i.shiftShapes(recordIndex, offsetX, offsetY);\r\n    };\r\n    IgrShapeDataSource.prototype.getMaxLongitude = function (recordIndex, useLargestShape, fromLongitude, toLongitude) {\r\n        var iv = this.i.getMaxLongitude(recordIndex, useLargestShape, fromLongitude, toLongitude);\r\n        return (iv);\r\n    };\r\n    IgrShapeDataSource.prototype.setRecordValue = function (index, fieldName, value) {\r\n        this.i.setRecordValue(index, fieldName, value);\r\n    };\r\n    IgrShapeDataSource.prototype.getRecordValues = function (fieldName) {\r\n        var iv = this.i.getRecordValues(fieldName);\r\n        return (iv);\r\n    };\r\n    IgrShapeDataSource.prototype.setRecordValues = function (fieldName, values) {\r\n        this.i.setRecordValues(fieldName, values);\r\n    };\r\n    IgrShapeDataSource.prototype.getLargestShapeBoundsForRecord = function (index) {\r\n        var iv = this.i.getLargestShapeBoundsForRecord(index);\r\n        return fromRect(iv);\r\n    };\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"importPending\", {\r\n        /**\r\n         * Event raised when the Shapefile has been imported from both the ShapefileSource and DatabaseSource Uris.\r\n        */\r\n        get: function () {\r\n            return this._importPending;\r\n        },\r\n        set: function (ev) {\r\n            var _this = this;\r\n            if (this._importPending_wrapped !== null) {\r\n                this.i.importPending = delegateRemove(this.i.importPending, this._importPending_wrapped);\r\n                this._importPending_wrapped = null;\r\n                this._importPending = null;\r\n            }\r\n            this._importPending = ev;\r\n            this._importPending_wrapped = function (o, e) {\r\n                var outerArgs = new IgrAsyncCompletedEventArgs();\r\n                outerArgs._provideImplementation(e);\r\n                if (_this.beforeImportPending) {\r\n                    _this.beforeImportPending(_this, outerArgs);\r\n                }\r\n                if (_this._importPending) {\r\n                    _this._importPending(_this, outerArgs);\r\n                }\r\n            };\r\n            this.i.importPending = delegateCombine(this.i.importPending, this._importPending_wrapped);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"importCompleted\", {\r\n        /**\r\n         * Event raised when the Shapefile has been imported from both the ShapefileSource and DatabaseSource Uris.\r\n        */\r\n        get: function () {\r\n            return this._importCompleted;\r\n        },\r\n        set: function (ev) {\r\n            var _this = this;\r\n            if (this._importCompleted_wrapped !== null) {\r\n                this.i.importCompleted = delegateRemove(this.i.importCompleted, this._importCompleted_wrapped);\r\n                this._importCompleted_wrapped = null;\r\n                this._importCompleted = null;\r\n            }\r\n            this._importCompleted = ev;\r\n            this._importCompleted_wrapped = function (o, e) {\r\n                var outerArgs = new IgrAsyncCompletedEventArgs();\r\n                outerArgs._provideImplementation(e);\r\n                if (_this.beforeImportCompleted) {\r\n                    _this.beforeImportCompleted(_this, outerArgs);\r\n                }\r\n                if (_this._importCompleted) {\r\n                    _this._importCompleted(_this, outerArgs);\r\n                }\r\n            };\r\n            this.i.importCompleted = delegateCombine(this.i.importCompleted, this._importCompleted_wrapped);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IgrShapeDataSource.prototype, \"filter\", {\r\n        get: function () {\r\n            return this._filter;\r\n        },\r\n        set: function (ev) {\r\n            var _this = this;\r\n            if (this._filter_wrapped !== null) {\r\n                this.i.filter = delegateRemove(this.i.filter, this._filter_wrapped);\r\n                this._filter_wrapped = null;\r\n                this._filter = null;\r\n            }\r\n            this._filter = ev;\r\n            this._filter_wrapped = function (o, e) {\r\n                var outerArgs = new IgrShapeFilterRecordEventArgs();\r\n                outerArgs._provideImplementation(e);\r\n                if (_this.beforeFilter) {\r\n                    _this.beforeFilter(_this, outerArgs);\r\n                }\r\n                if (_this._filter) {\r\n                    _this._filter(_this, outerArgs);\r\n                }\r\n            };\r\n            this.i.filter = delegateCombine(this.i.filter, this._filter_wrapped);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return IgrShapeDataSource;\r\n}());\r\nexport { IgrShapeDataSource };\r\n//# sourceMappingURL=igr-shape-data-source.js.map\r\n"]},"metadata":{},"sourceType":"module"}