{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { StackedSplineSeriesDescriptionMetadata } from \"./StackedSplineSeriesDescriptionMetadata\";\nimport { Stacked100SplineSeriesDescription } from \"./Stacked100SplineSeriesDescription\";\n/**\n * @hidden\n */\n\nvar Stacked100SplineSeriesDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(Stacked100SplineSeriesDescriptionMetadata, _super);\n\n  function Stacked100SplineSeriesDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Stacked100SplineSeriesDescriptionMetadata.b = function (a) {\n    if (Stacked100SplineSeriesDescriptionMetadata.a == null) {\n      Stacked100SplineSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      Stacked100SplineSeriesDescriptionMetadata.c(a, Stacked100SplineSeriesDescriptionMetadata.a);\n    }\n  };\n\n  Stacked100SplineSeriesDescriptionMetadata.c = function (a, b) {\n    StackedSplineSeriesDescriptionMetadata.c(a, b);\n  };\n\n  Stacked100SplineSeriesDescriptionMetadata.d = function (a) {\n    Stacked100SplineSeriesDescriptionMetadata.b(a);\n    a.n(\"Stacked100SplineSeries\", function () {\n      return new Stacked100SplineSeriesDescription();\n    });\n    a.m(\"Stacked100SplineSeries\", Stacked100SplineSeriesDescriptionMetadata.a);\n  };\n\n  Stacked100SplineSeriesDescriptionMetadata.$t = markType(Stacked100SplineSeriesDescriptionMetadata, 'Stacked100SplineSeriesDescriptionMetadata');\n  Stacked100SplineSeriesDescriptionMetadata.a = null;\n  return Stacked100SplineSeriesDescriptionMetadata;\n}(Base);\n\nexport { Stacked100SplineSeriesDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/Stacked100SplineSeriesDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,sCAAT,QAAuD,0CAAvD;AACA,SAAS,iCAAT,QAAkD,qCAAlD;AAEA;;AAEG;;AACH,IAAA,yCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+D,EAAA,OAAA,CAAA,SAAA,CAAA,yCAAA,EAAA,MAAA;;AAA/D,WAAA,yCAAA,GAAA;;AAiBC;;AAde,EAAA,yCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,yCAAyC,CAAC,CAA1C,IAA+C,IAAnD,EAAyD;AACxD,MAAA,yCAAyC,CAAC,CAA1C,GAA8C,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAA9C;AACA,MAAA,yCAAyC,CAAC,CAA1C,CAA4C,CAA5C,EAA+C,yCAAyC,CAAC,CAAzF;AACA;AACD,GALc;;AAMR,EAAA,yCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,sCAAsC,CAAC,CAAvC,CAAyC,CAAzC,EAA4C,CAA5C;AACA,GAFM;;AAGA,EAAA,yCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,yCAAyC,CAAC,CAA1C,CAA4C,CAA5C;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,wBAAJ,EAA8B,YAAA;AAAM,aAAA,IAAA,iCAAA,EAAA;AAAuC,KAA3E;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,wBAAJ,EAA8B,yCAAyC,CAAC,CAAxE;AACA,GAJM;;AAXA,EAAA,yCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,yCAAD,EAA4C,2CAA5C,CAAnB;AACQ,EAAA,yCAAA,CAAA,CAAA,GAAkC,IAAlC;AAehB,SAAA,yCAAA;AAAC,CAjBD,CAA+D,IAA/D,CAAA;;SAAa,yC","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { StackedSplineSeriesDescriptionMetadata } from \"./StackedSplineSeriesDescriptionMetadata\";\nimport { Stacked100SplineSeriesDescription } from \"./Stacked100SplineSeriesDescription\";\n/**\n * @hidden\n */\nvar Stacked100SplineSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Stacked100SplineSeriesDescriptionMetadata, _super);\n    function Stacked100SplineSeriesDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Stacked100SplineSeriesDescriptionMetadata.b = function (a) {\n        if (Stacked100SplineSeriesDescriptionMetadata.a == null) {\n            Stacked100SplineSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            Stacked100SplineSeriesDescriptionMetadata.c(a, Stacked100SplineSeriesDescriptionMetadata.a);\n        }\n    };\n    Stacked100SplineSeriesDescriptionMetadata.c = function (a, b) {\n        StackedSplineSeriesDescriptionMetadata.c(a, b);\n    };\n    Stacked100SplineSeriesDescriptionMetadata.d = function (a) {\n        Stacked100SplineSeriesDescriptionMetadata.b(a);\n        a.n(\"Stacked100SplineSeries\", function () { return new Stacked100SplineSeriesDescription(); });\n        a.m(\"Stacked100SplineSeries\", Stacked100SplineSeriesDescriptionMetadata.a);\n    };\n    Stacked100SplineSeriesDescriptionMetadata.$t = markType(Stacked100SplineSeriesDescriptionMetadata, 'Stacked100SplineSeriesDescriptionMetadata');\n    Stacked100SplineSeriesDescriptionMetadata.a = null;\n    return Stacked100SplineSeriesDescriptionMetadata;\n}(Base));\nexport { Stacked100SplineSeriesDescriptionMetadata };\n//# sourceMappingURL=Stacked100SplineSeriesDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}