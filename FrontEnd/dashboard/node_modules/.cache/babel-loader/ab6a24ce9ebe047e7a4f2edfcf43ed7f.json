{"ast":null,"code":"/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { CellInfoDescriptionMetadata } from \"./CellInfoDescriptionMetadata\";\nimport { NumericCellInfoDescription } from \"./NumericCellInfoDescription\";\n/**\r\n * @hidden\r\n */\n\nvar NumericCellInfoDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(NumericCellInfoDescriptionMetadata, _super);\n\n  function NumericCellInfoDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NumericCellInfoDescriptionMetadata.b = function (a) {\n    if (NumericCellInfoDescriptionMetadata.a == null) {\n      NumericCellInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      NumericCellInfoDescriptionMetadata.c(a, NumericCellInfoDescriptionMetadata.a);\n    }\n  };\n\n  NumericCellInfoDescriptionMetadata.c = function (a, b) {\n    CellInfoDescriptionMetadata.c(a, b);\n    b.item(\"NumericValue\", \"Number:double\");\n    b.item(\"HasDecimalValue\", \"Boolean\");\n    b.item(\"FormatStringOverride\", \"String\");\n    b.item(\"FormatSpecifiers\", \"Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier\");\n    b.item(\"FormatOverrideRef\", \"(w:FormatOverride,wf:FormatOverride)DataRef\");\n    b.item(\"NegativePrefix\", \"String\");\n    b.item(\"PositivePrefix\", \"String\");\n    b.item(\"NegativeSuffix\", \"String\");\n    b.item(\"PositiveSuffix\", \"String\");\n    b.item(\"MaxFractionDigits\", \"Number:int\");\n    b.item(\"MinFractionDigits\", \"Number:int\");\n    b.item(\"MinIntegerDigits\", \"Number:int\");\n    b.item(\"ShowGroupingSeparator\", \"Boolean\");\n  };\n\n  NumericCellInfoDescriptionMetadata.d = function (a) {\n    NumericCellInfoDescriptionMetadata.b(a);\n    a.n(\"NumericCellInfo\", function () {\n      return new NumericCellInfoDescription();\n    });\n    a.m(\"NumericCellInfo\", NumericCellInfoDescriptionMetadata.a);\n  };\n\n  NumericCellInfoDescriptionMetadata.$t = markType(NumericCellInfoDescriptionMetadata, 'NumericCellInfoDescriptionMetadata');\n  NumericCellInfoDescriptionMetadata.a = null;\n  return NumericCellInfoDescriptionMetadata;\n}(Base);\n\nexport { NumericCellInfoDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/NumericCellInfoDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,2BAAT,QAA4C,+BAA5C;AACA,SAAS,0BAAT,QAA2C,8BAA3C;AAEA;;AAEG;;AACH,IAAA,kCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwD,EAAA,OAAA,CAAA,SAAA,CAAA,kCAAA,EAAA,MAAA;;AAAxD,WAAA,kCAAA,GAAA;;AA8BC;;AA3Be,EAAA,kCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,kCAAkC,CAAC,CAAnC,IAAwC,IAA5C,EAAkD;AACjD,MAAA,kCAAkC,CAAC,CAAnC,GAAuC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAvC;AACA,MAAA,kCAAkC,CAAC,CAAnC,CAAqC,CAArC,EAAwC,kCAAkC,CAAC,CAA3E;AACA;AACD,GALc;;AAMR,EAAA,kCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,2BAA2B,CAAC,CAA5B,CAA8B,CAA9B,EAAiC,CAAjC;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,cAAP,EAAuB,eAAvB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,iBAAP,EAA0B,SAA1B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,sBAAP,EAA+B,QAA/B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,kBAAP,EAA2B,sEAA3B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,6CAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,QAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,QAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,QAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,QAAzB;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,YAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,YAA5B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,kBAAP,EAA2B,YAA3B;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,uBAAP,EAAgC,SAAhC;AACA,GAfM;;AAgBA,EAAA,kCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,kCAAkC,CAAC,CAAnC,CAAqC,CAArC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,iBAAJ,EAAuB,YAAA;AAAM,aAAA,IAAA,0BAAA,EAAA;AAAgC,KAA7D;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,iBAAJ,EAAuB,kCAAkC,CAAC,CAA1D;AACA,GAJM;;AAxBA,EAAA,kCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,kCAAD,EAAqC,oCAArC,CAAnB;AACQ,EAAA,kCAAA,CAAA,CAAA,GAAkC,IAAlC;AA4BhB,SAAA,kCAAA;AAAC,CA9BD,CAAwD,IAAxD,CAAA;;SAAa,kC","sourceRoot":"","sourcesContent":["/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Base, String_$type, markType } from \"./type\";\r\nimport { Dictionary$2 } from \"./Dictionary$2\";\r\nimport { CellInfoDescriptionMetadata } from \"./CellInfoDescriptionMetadata\";\r\nimport { NumericCellInfoDescription } from \"./NumericCellInfoDescription\";\r\n/**\r\n * @hidden\r\n */\r\nvar NumericCellInfoDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(NumericCellInfoDescriptionMetadata, _super);\r\n    function NumericCellInfoDescriptionMetadata() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NumericCellInfoDescriptionMetadata.b = function (a) {\r\n        if (NumericCellInfoDescriptionMetadata.a == null) {\r\n            NumericCellInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\r\n            NumericCellInfoDescriptionMetadata.c(a, NumericCellInfoDescriptionMetadata.a);\r\n        }\r\n    };\r\n    NumericCellInfoDescriptionMetadata.c = function (a, b) {\r\n        CellInfoDescriptionMetadata.c(a, b);\r\n        b.item(\"NumericValue\", \"Number:double\");\r\n        b.item(\"HasDecimalValue\", \"Boolean\");\r\n        b.item(\"FormatStringOverride\", \"String\");\r\n        b.item(\"FormatSpecifiers\", \"Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier\");\r\n        b.item(\"FormatOverrideRef\", \"(w:FormatOverride,wf:FormatOverride)DataRef\");\r\n        b.item(\"NegativePrefix\", \"String\");\r\n        b.item(\"PositivePrefix\", \"String\");\r\n        b.item(\"NegativeSuffix\", \"String\");\r\n        b.item(\"PositiveSuffix\", \"String\");\r\n        b.item(\"MaxFractionDigits\", \"Number:int\");\r\n        b.item(\"MinFractionDigits\", \"Number:int\");\r\n        b.item(\"MinIntegerDigits\", \"Number:int\");\r\n        b.item(\"ShowGroupingSeparator\", \"Boolean\");\r\n    };\r\n    NumericCellInfoDescriptionMetadata.d = function (a) {\r\n        NumericCellInfoDescriptionMetadata.b(a);\r\n        a.n(\"NumericCellInfo\", function () { return new NumericCellInfoDescription(); });\r\n        a.m(\"NumericCellInfo\", NumericCellInfoDescriptionMetadata.a);\r\n    };\r\n    NumericCellInfoDescriptionMetadata.$t = markType(NumericCellInfoDescriptionMetadata, 'NumericCellInfoDescriptionMetadata');\r\n    NumericCellInfoDescriptionMetadata.a = null;\r\n    return NumericCellInfoDescriptionMetadata;\r\n}(Base));\r\nexport { NumericCellInfoDescriptionMetadata };\r\n//# sourceMappingURL=NumericCellInfoDescriptionMetadata.js.map\r\n"]},"metadata":{},"sourceType":"module"}