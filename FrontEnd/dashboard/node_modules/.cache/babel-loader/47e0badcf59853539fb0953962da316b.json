{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { GridFilterExpressionsEventArgsDescription } from \"./GridFilterExpressionsEventArgsDescription\";\n/**\n * @hidden\n */\n\nvar GridFilterExpressionsEventArgsDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(GridFilterExpressionsEventArgsDescriptionMetadata, _super);\n\n  function GridFilterExpressionsEventArgsDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridFilterExpressionsEventArgsDescriptionMetadata.b = function (a) {\n    if (GridFilterExpressionsEventArgsDescriptionMetadata.a == null) {\n      GridFilterExpressionsEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      GridFilterExpressionsEventArgsDescriptionMetadata.c(a, GridFilterExpressionsEventArgsDescriptionMetadata.a);\n    }\n  };\n\n  GridFilterExpressionsEventArgsDescriptionMetadata.c = function (a, b) {\n    b.item(\"FilterExpressions\", \"Collection:FilterExpression:FilterExpressionCollection:FilterExpression\");\n  };\n\n  GridFilterExpressionsEventArgsDescriptionMetadata.d = function (a) {\n    GridFilterExpressionsEventArgsDescriptionMetadata.b(a);\n    a.n(\"GridFilterExpressionsEventArgs\", function () {\n      return new GridFilterExpressionsEventArgsDescription();\n    });\n    a.m(\"GridFilterExpressionsEventArgs\", GridFilterExpressionsEventArgsDescriptionMetadata.a);\n  };\n\n  GridFilterExpressionsEventArgsDescriptionMetadata.$t = markType(GridFilterExpressionsEventArgsDescriptionMetadata, 'GridFilterExpressionsEventArgsDescriptionMetadata');\n  GridFilterExpressionsEventArgsDescriptionMetadata.a = null;\n  return GridFilterExpressionsEventArgsDescriptionMetadata;\n}(Base);\n\nexport { GridFilterExpressionsEventArgsDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/GridFilterExpressionsEventArgsDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,yCAAT,QAA0D,6CAA1D;AAEA;;AAEG;;AACH,IAAA,iDAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuE,EAAA,OAAA,CAAA,SAAA,CAAA,iDAAA,EAAA,MAAA;;AAAvE,WAAA,iDAAA,GAAA;;AAiBC;;AAde,EAAA,iDAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,iDAAiD,CAAC,CAAlD,IAAuD,IAA3D,EAAiE;AAChE,MAAA,iDAAiD,CAAC,CAAlD,GAAsD,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAtD;AACA,MAAA,iDAAiD,CAAC,CAAlD,CAAoD,CAApD,EAAuD,iDAAiD,CAAC,CAAzG;AACA;AACD,GALc;;AAMR,EAAA,iDAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,CAAC,CAAC,IAAF,CAAO,mBAAP,EAA4B,yEAA5B;AACA,GAFM;;AAGA,EAAA,iDAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,iDAAiD,CAAC,CAAlD,CAAoD,CAApD;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,gCAAJ,EAAsC,YAAA;AAAM,aAAA,IAAA,yCAAA,EAAA;AAA+C,KAA3F;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,gCAAJ,EAAsC,iDAAiD,CAAC,CAAxF;AACA,GAJM;;AAXA,EAAA,iDAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,iDAAD,EAAoD,mDAApD,CAAnB;AACQ,EAAA,iDAAA,CAAA,CAAA,GAAkC,IAAlC;AAehB,SAAA,iDAAA;AAAC,CAjBD,CAAuE,IAAvE,CAAA;;SAAa,iD","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { GridFilterExpressionsEventArgsDescription } from \"./GridFilterExpressionsEventArgsDescription\";\n/**\n * @hidden\n */\nvar GridFilterExpressionsEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GridFilterExpressionsEventArgsDescriptionMetadata, _super);\n    function GridFilterExpressionsEventArgsDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridFilterExpressionsEventArgsDescriptionMetadata.b = function (a) {\n        if (GridFilterExpressionsEventArgsDescriptionMetadata.a == null) {\n            GridFilterExpressionsEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            GridFilterExpressionsEventArgsDescriptionMetadata.c(a, GridFilterExpressionsEventArgsDescriptionMetadata.a);\n        }\n    };\n    GridFilterExpressionsEventArgsDescriptionMetadata.c = function (a, b) {\n        b.item(\"FilterExpressions\", \"Collection:FilterExpression:FilterExpressionCollection:FilterExpression\");\n    };\n    GridFilterExpressionsEventArgsDescriptionMetadata.d = function (a) {\n        GridFilterExpressionsEventArgsDescriptionMetadata.b(a);\n        a.n(\"GridFilterExpressionsEventArgs\", function () { return new GridFilterExpressionsEventArgsDescription(); });\n        a.m(\"GridFilterExpressionsEventArgs\", GridFilterExpressionsEventArgsDescriptionMetadata.a);\n    };\n    GridFilterExpressionsEventArgsDescriptionMetadata.$t = markType(GridFilterExpressionsEventArgsDescriptionMetadata, 'GridFilterExpressionsEventArgsDescriptionMetadata');\n    GridFilterExpressionsEventArgsDescriptionMetadata.a = null;\n    return GridFilterExpressionsEventArgsDescriptionMetadata;\n}(Base));\nexport { GridFilterExpressionsEventArgsDescriptionMetadata };\n//# sourceMappingURL=GridFilterExpressionsEventArgsDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}