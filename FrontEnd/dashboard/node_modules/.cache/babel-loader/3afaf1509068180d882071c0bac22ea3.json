{"ast":null,"code":"//\n// System.Xml.XmlResolver.cs\n//\n// Author:\n//   Jason Diamond (jason@injektilo.org)\n//   Atsushi Enomoto (atsushi@ximian.com)\n//\n// (C) 2001 Jason Diamond  http://injektilo.org/\n// Copyright (C) 2004,2009 Novell, Inc (http://www.novell.com)\n//\nimport * as tslib_1 from \"tslib\"; //\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { Base, markType } from \"./type\";\nimport { Uri } from \"./Uri\";\nimport { ArgumentNullException } from \"./ArgumentNullException\";\nimport { InvalidOperationException } from \"./InvalidOperationException\";\nimport { stringStartsWith, stringReplace } from \"./string\";\n/**\r\n * @hidden\r\n */\n\nvar XmlResolver =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(XmlResolver, _super);\n\n  function XmlResolver() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  XmlResolver.prototype.d = function (a, b) {\n    if (a == null) {\n      if (b == null) {\n        throw new ArgumentNullException(0, \"Either baseUri or relativeUri are required.\");\n      }\n\n      if (stringStartsWith(b, \"http:\") || stringStartsWith(b, \"https:\") || stringStartsWith(b, \"ftp:\") || stringStartsWith(b, \"file:\")) {\n        return new Uri(0, b);\n      }\n\n      throw new InvalidOperationException(1, b + \" not supported\");\n    }\n\n    if (b == null) {\n      return a;\n    }\n\n    return new Uri(3, a, this.c(b));\n  };\n\n  XmlResolver.prototype.c = function (a) {\n    return stringReplace(stringReplace(stringReplace(stringReplace(stringReplace(a, \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"%\", \"%25\"), \"\\\"\", \"%22\");\n  };\n\n  XmlResolver.$t = markType(XmlResolver, 'XmlResolver');\n  return XmlResolver;\n}(Base);\n\nexport { XmlResolver };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/XmlResolver.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kCAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS,IAAT,EAAqB,QAArB,QAAqC,QAArC;AAEA,SAAS,GAAT,QAAoB,OAApB;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,yBAAT,QAA0C,6BAA1C;AACA,SAAS,gBAAT,EAA2B,aAA3B,QAAgD,UAAhD;AAEA;;AAEG;;AACH,IAAA,WAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,EAAA,MAAA;;AAA1C,WAAA,WAAA,GAAA;;AAsBC;;AAlBA,EAAA,WAAA,CAAA,SAAA,CAAA,CAAA,GAAA,UAAE,CAAF,EAAU,CAAV,EAAmB;AAClB,QAAI,CAAC,IAAI,IAAT,EAAe;AACd,UAAI,CAAC,IAAI,IAAT,EAAe;AACd,cAAM,IAAI,qBAAJ,CAA0B,CAA1B,EAA6B,6CAA7B,CAAN;AACA;;AACD,UAAI,gBAAgB,CAAC,CAAD,EAAI,OAAJ,CAAhB,IAAgC,gBAAgB,CAAC,CAAD,EAAI,QAAJ,CAAhD,IAAiE,gBAAgB,CAAC,CAAD,EAAI,MAAJ,CAAjF,IAAgG,gBAAgB,CAAC,CAAD,EAAI,OAAJ,CAApH,EAAkI;AACjI,eAAO,IAAI,GAAJ,CAAQ,CAAR,EAAW,CAAX,CAAP;AACA;;AACD,YAAM,IAAI,yBAAJ,CAA8B,CAA9B,EAAiC,CAAC,GAAG,gBAArC,CAAN;AACA;;AACD,QAAI,CAAC,IAAI,IAAT,EAAe;AACd,aAAO,CAAP;AACA;;AACD,WAAO,IAAI,GAAJ,CAAQ,CAAR,EAAW,CAAX,EAAc,KAAK,CAAL,CAAO,CAAP,CAAd,CAAP;AACA,GAdD;;AAeQ,EAAA,WAAA,CAAA,SAAA,CAAA,CAAA,GAAR,UAAU,CAAV,EAAmB;AAClB,WAAO,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAd,EAA+B,GAA/B,EAAoC,KAApC,CAAd,EAA0D,GAA1D,EAA+D,KAA/D,CAAd,EAAqF,GAArF,EAA0F,KAA1F,CAAd,EAAgH,IAAhH,EAAsH,KAAtH,CAApB;AACA,GAFO;;AAlBD,EAAA,WAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,WAAD,EAAc,aAAd,CAAnB;AAqBR,SAAA,WAAA;AAAC,CAtBD,CAA0C,IAA1C,CAAA;;SAAsB,W","sourceRoot":"","sourcesContent":["//\r\n// System.Xml.XmlResolver.cs\r\n//\r\n// Author:\r\n//   Jason Diamond (jason@injektilo.org)\r\n//   Atsushi Enomoto (atsushi@ximian.com)\r\n//\r\n// (C) 2001 Jason Diamond  http://injektilo.org/\r\n// Copyright (C) 2004,2009 Novell, Inc (http://www.novell.com)\r\n//\r\nimport * as tslib_1 from \"tslib\";\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n// \r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n// \r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\nimport { Base, markType } from \"./type\";\r\nimport { Uri } from \"./Uri\";\r\nimport { ArgumentNullException } from \"./ArgumentNullException\";\r\nimport { InvalidOperationException } from \"./InvalidOperationException\";\r\nimport { stringStartsWith, stringReplace } from \"./string\";\r\n/**\r\n * @hidden\r\n */\r\nvar XmlResolver = /** @class */ /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(XmlResolver, _super);\r\n    function XmlResolver() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    XmlResolver.prototype.d = function (a, b) {\r\n        if (a == null) {\r\n            if (b == null) {\r\n                throw new ArgumentNullException(0, \"Either baseUri or relativeUri are required.\");\r\n            }\r\n            if (stringStartsWith(b, \"http:\") || stringStartsWith(b, \"https:\") || stringStartsWith(b, \"ftp:\") || stringStartsWith(b, \"file:\")) {\r\n                return new Uri(0, b);\r\n            }\r\n            throw new InvalidOperationException(1, b + \" not supported\");\r\n        }\r\n        if (b == null) {\r\n            return a;\r\n        }\r\n        return new Uri(3, a, this.c(b));\r\n    };\r\n    XmlResolver.prototype.c = function (a) {\r\n        return stringReplace(stringReplace(stringReplace(stringReplace(stringReplace(a, \"<\", \"%3C\"), \">\", \"%3E\"), \"#\", \"%23\"), \"%\", \"%25\"), \"\\\"\", \"%22\");\r\n    };\r\n    XmlResolver.$t = markType(XmlResolver, 'XmlResolver');\r\n    return XmlResolver;\r\n}(Base));\r\nexport { XmlResolver };\r\n//# sourceMappingURL=XmlResolver.js.map\r\n"]},"metadata":{},"sourceType":"module"}