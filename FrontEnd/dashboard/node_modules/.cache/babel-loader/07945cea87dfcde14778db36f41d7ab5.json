{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Numeric } from \"./Numeric\";\nimport { Number_$type, markType } from \"./type\";\nimport { Random } from \"./Random\";\nimport { List$1 } from \"./List$1\";\nimport { isNaN_, isInfinity } from \"./number\";\n/**\n * @hidden\n */\n\nvar LeastSquaresFit =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(LeastSquaresFit, _super);\n\n  function LeastSquaresFit() {\n    return _super.call(this) || this;\n  }\n\n  LeastSquaresFit.aa = function () {\n    return LeastSquaresFit.t() && LeastSquaresFit.u() && LeastSquaresFit.s() && LeastSquaresFit.w() && LeastSquaresFit.x() && LeastSquaresFit.r() && LeastSquaresFit.y() && LeastSquaresFit.z();\n  };\n\n  LeastSquaresFit.k = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\n    for (var i = 0; i < a; ++i) {\n      var j = b(i);\n      var k = c(i);\n\n      if (!isNaN_(j) && !isNaN_(k)) {\n        d += k;\n        e += j * j;\n        f += j;\n        g += j * k;\n        ++h;\n      }\n    }\n\n    if (h < 2) {\n      return null;\n    }\n\n    var l = (d * e - f * g) / (h * e - f * f);\n    var m = (h * g - f * d) / (h * e - f * f);\n    return [l, m];\n  };\n\n  LeastSquaresFit.ad = function (a, b) {\n    if (a.length != 2) {\n      return NaN;\n    }\n\n    return a[0] + a[1] * b;\n  };\n\n  LeastSquaresFit.t = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 10 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = -100; f < 100; ++f) {\n      var g = f;\n      var h = LeastSquaresFit.ad(b, g);\n\n      if (!isNaN_(h)) {\n        d.add(g);\n        e.add(h);\n      }\n    }\n\n    var i = LeastSquaresFit.k(d.count, function (j) {\n      return d._inner[j];\n    }, function (j) {\n      return e._inner[j];\n    });\n\n    for (var j = 0; j < b.length; ++j) {\n      if (Math.abs(b[j] - i[j]) > 0.0001) {}\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.l = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\n    for (var i = 0; i < a; ++i) {\n      var j = b(i);\n      var k = c(i);\n\n      if (!isNaN_(j) && !isNaN_(k) && j > 0) {\n        var l = Math.log(j);\n        d += k * l;\n        e += k;\n        f += l;\n        g += l * l;\n        ++h;\n      }\n    }\n\n    if (h < 2) {\n      return null;\n    }\n\n    var m = (h * d - e * f) / (h * g - f * f);\n    var n = (e - m * f) / h;\n    return [n, m];\n  };\n\n  LeastSquaresFit.ae = function (a, b) {\n    if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    return a[0] + a[1] * Math.log(b);\n  };\n\n  LeastSquaresFit.u = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 10 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = 1; f < 100; ++f) {\n      var g = f;\n      var h = LeastSquaresFit.ae(b, g);\n\n      if (!isNaN_(h)) {\n        d.add(g);\n        e.add(h);\n      }\n    }\n\n    var i = LeastSquaresFit.l(d.count, function (j) {\n      return d._inner[j];\n    }, function (j) {\n      return e._inner[j];\n    });\n\n    for (var j = 0; j < b.length; ++j) {\n      if (Math.abs(b[j] - i[j]) > 0.0001) {}\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.j = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\n    for (var j = 0; j < a; ++j) {\n      var k = b(j);\n      var l = c(j);\n\n      if (!isNaN_(k) && !isNaN_(l) && l > 0) {\n        var m = Math.log(l);\n        d += k * k * l;\n        e += l * m;\n        f += k * l;\n        g += k * l * m;\n        h += l;\n        ++i;\n      }\n    }\n\n    if (i < 2) {\n      return null;\n    }\n\n    var n = (d * e - f * g) / (h * d - f * f);\n    var o = (h * g - f * e) / (h * d - f * f);\n    return [Math.exp(n), o];\n  };\n\n  LeastSquaresFit.ac = function (a, b) {\n    if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    return a[0] * Math.exp(a[1] * b);\n  };\n\n  LeastSquaresFit.s = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 2 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = 1; f < 100; ++f) {\n      var g = f;\n      var h = LeastSquaresFit.ac(b, g);\n\n      if (!isNaN_(h)) {\n        d.add(g);\n        e.add(h);\n      }\n    }\n\n    var i = LeastSquaresFit.j(d.count, function (j) {\n      return d._inner[j];\n    }, function (j) {\n      return e._inner[j];\n    });\n\n    for (var j = 0; j < b.length; ++j) {\n      if (Math.abs(b[j] - i[j]) > 0.0001) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.n = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\n    for (var i = 0; i < a; ++i) {\n      var j = b(i);\n      var k = c(i);\n\n      if (!isNaN_(j) && !isNaN_(k) && j > 0 && k > 0) {\n        var l = Math.log(b(i));\n        var m = Math.log(c(i));\n        d += l * m;\n        e += l;\n        f += m;\n        g += l * l;\n        ++h;\n      }\n    }\n\n    if (h < 2) {\n      return null;\n    }\n\n    var n = (h * d - e * f) / (h * g - e * e);\n    var o = Math.exp((f - n * e) / h);\n    return [o, n];\n  };\n\n  LeastSquaresFit.ag = function (a, b) {\n    if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    return a[0] * Math.pow(b, a[1]);\n  };\n\n  LeastSquaresFit.w = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 10 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = -100; f < 100; ++f) {\n      d.add(f);\n      e.add(LeastSquaresFit.ag(b, f));\n    }\n\n    var g = LeastSquaresFit.n(d.count, function (h) {\n      return d._inner[h];\n    }, function (h) {\n      return e._inner[h];\n    });\n\n    for (var h = 0; h < b.length; ++h) {\n      if (Math.abs(b[h] - g[h]) > 0.0001) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.o = function (a, b, c) {\n    return LeastSquaresFit.m(a, 2, b, c);\n  };\n\n  LeastSquaresFit.ah = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.x = function () {\n    return LeastSquaresFit.v(2);\n  };\n\n  LeastSquaresFit.i = function (a, b, c) {\n    return LeastSquaresFit.m(a, 3, b, c);\n  };\n\n  LeastSquaresFit.ab = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.r = function () {\n    return LeastSquaresFit.v(3);\n  };\n\n  LeastSquaresFit.p = function (a, b, c) {\n    return LeastSquaresFit.m(a, 4, b, c);\n  };\n\n  LeastSquaresFit.ai = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.y = function () {\n    return LeastSquaresFit.v(4);\n  };\n\n  LeastSquaresFit.q = function (a, b, c) {\n    return LeastSquaresFit.m(a, 5, b, c);\n  };\n\n  LeastSquaresFit.aj = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.z = function () {\n    return LeastSquaresFit.v(5);\n  };\n\n  LeastSquaresFit.m = function (a, b, c, d) {\n    var e = new Array(1 + 2 * b);\n\n    for (var f = 0; f < e.length; f++) {\n      e[f] = 0;\n    }\n\n    var g = function () {\n      var $firstRank;\n      var $ret = new Array($firstRank = b + 1);\n      var $currRet = $ret;\n\n      for (var $rankInit = 0; $rankInit < $firstRank; $rankInit++) {\n        $currRet[$rankInit] = new Array(b + 1);\n      }\n\n      return $ret;\n    }();\n\n    var h = new Array(b + 1);\n\n    for (var i = 0; i < h.length; i++) {\n      h[i] = 0;\n    }\n\n    var j = 0;\n\n    for (var k = 0; k < a; ++k) {\n      var l = 1;\n      var m = c(k);\n\n      if (!isNaN_(m) && !isNaN_(d(k))) {\n        for (var n = 0; n < e.length; ++n) {\n          e[n] += l;\n          l *= m;\n          ++j;\n        }\n      }\n    }\n\n    if (j < b) {\n      return null;\n    }\n\n    for (var o = 0; o <= b; ++o) {\n      for (var p = 0; p <= b; ++p) {\n        g[o][p] = e[o + p];\n      }\n    }\n\n    for (var q = 0; q < a; ++q) {\n      var r = c(q);\n      var s = d(q);\n\n      if (!isNaN_(r) && !isNaN_(s)) {\n        for (var t = 0; t <= b; ++t) {\n          h[t] += Math.pow(r, t) * s;\n        }\n      }\n    }\n\n    return Numeric.d(g, h) ? h : null;\n  };\n\n  LeastSquaresFit.af = function (a, b) {\n    if (a.length < 1 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    var c = 0;\n\n    for (var d = 0; d < a.length; ++d) {\n      c += a[d] * Math.pow(b, d);\n    }\n\n    return c;\n  };\n\n  LeastSquaresFit.v = function (a) {\n    var b = new Random(0);\n    var c = new Array(a + 1);\n\n    for (var d = 0; d < c.length; ++d) {\n      c[d] = 2 * b.nextDouble();\n    }\n\n    var e = new List$1(Number_$type, 0);\n    var f = new List$1(Number_$type, 0);\n\n    for (var g = -100; g < 100; ++g) {\n      var h = g;\n      var i = LeastSquaresFit.af(c, h);\n\n      if (!isNaN_(i)) {\n        e.add(h);\n        f.add(i);\n      }\n    }\n\n    var j = LeastSquaresFit.m(e.count, a, function (k) {\n      return e._inner[k];\n    }, function (k) {\n      return f._inner[k];\n    });\n\n    for (var k = 0; k < a; ++k) {\n      if (Math.abs(c[k] - j[k]) > 0.0001) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.$t = markType(LeastSquaresFit, 'LeastSquaresFit', Numeric.$);\n  return LeastSquaresFit;\n}(Numeric);\n\nexport { LeastSquaresFit };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/LeastSquaresFit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Numeric } from \"./Numeric\";\nimport { Number_$type, markType } from \"./type\";\nimport { Random } from \"./Random\";\nimport { List$1 } from \"./List$1\";\nimport { isNaN_, isInfinity } from \"./number\";\n/**\n * @hidden\n */\nvar LeastSquaresFit = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(LeastSquaresFit, _super);\n    function LeastSquaresFit() {\n        return _super.call(this) || this;\n    }\n    LeastSquaresFit.aa = function () {\n        return LeastSquaresFit.t() && LeastSquaresFit.u() && LeastSquaresFit.s() && LeastSquaresFit.w() && LeastSquaresFit.x() && LeastSquaresFit.r() && LeastSquaresFit.y() && LeastSquaresFit.z();\n    };\n    LeastSquaresFit.k = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        for (var i = 0; i < a; ++i) {\n            var j = b(i);\n            var k = c(i);\n            if (!isNaN_(j) && !isNaN_(k)) {\n                d += k;\n                e += j * j;\n                f += j;\n                g += j * k;\n                ++h;\n            }\n        }\n        if (h < 2) {\n            return null;\n        }\n        var l = (d * e - f * g) / (h * e - f * f);\n        var m = (h * g - f * d) / (h * e - f * f);\n        return [l, m];\n    };\n    LeastSquaresFit.ad = function (a, b) {\n        if (a.length != 2) {\n            return NaN;\n        }\n        return a[0] + a[1] * b;\n    };\n    LeastSquaresFit.t = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 10 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = -100; f < 100; ++f) {\n            var g = f;\n            var h = LeastSquaresFit.ad(b, g);\n            if (!isNaN_(h)) {\n                d.add(g);\n                e.add(h);\n            }\n        }\n        var i = LeastSquaresFit.k(d.count, function (j) { return d._inner[j]; }, function (j) { return e._inner[j]; });\n        for (var j = 0; j < b.length; ++j) {\n            if (Math.abs(b[j] - i[j]) > 0.0001) {\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.l = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        for (var i = 0; i < a; ++i) {\n            var j = b(i);\n            var k = c(i);\n            if (!isNaN_(j) && !isNaN_(k) && j > 0) {\n                var l = Math.log(j);\n                d += k * l;\n                e += k;\n                f += l;\n                g += l * l;\n                ++h;\n            }\n        }\n        if (h < 2) {\n            return null;\n        }\n        var m = (h * d - e * f) / (h * g - f * f);\n        var n = (e - m * f) / h;\n        return [n, m];\n    };\n    LeastSquaresFit.ae = function (a, b) {\n        if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        return a[0] + a[1] * Math.log(b);\n    };\n    LeastSquaresFit.u = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 10 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = 1; f < 100; ++f) {\n            var g = f;\n            var h = LeastSquaresFit.ae(b, g);\n            if (!isNaN_(h)) {\n                d.add(g);\n                e.add(h);\n            }\n        }\n        var i = LeastSquaresFit.l(d.count, function (j) { return d._inner[j]; }, function (j) { return e._inner[j]; });\n        for (var j = 0; j < b.length; ++j) {\n            if (Math.abs(b[j] - i[j]) > 0.0001) {\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.j = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        var i = 0;\n        for (var j = 0; j < a; ++j) {\n            var k = b(j);\n            var l = c(j);\n            if (!isNaN_(k) && !isNaN_(l) && l > 0) {\n                var m = Math.log(l);\n                d += k * k * l;\n                e += l * m;\n                f += k * l;\n                g += k * l * m;\n                h += l;\n                ++i;\n            }\n        }\n        if (i < 2) {\n            return null;\n        }\n        var n = (d * e - f * g) / (h * d - f * f);\n        var o = (h * g - f * e) / (h * d - f * f);\n        return [Math.exp(n), o];\n    };\n    LeastSquaresFit.ac = function (a, b) {\n        if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        return a[0] * Math.exp(a[1] * b);\n    };\n    LeastSquaresFit.s = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 2 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = 1; f < 100; ++f) {\n            var g = f;\n            var h = LeastSquaresFit.ac(b, g);\n            if (!isNaN_(h)) {\n                d.add(g);\n                e.add(h);\n            }\n        }\n        var i = LeastSquaresFit.j(d.count, function (j) { return d._inner[j]; }, function (j) { return e._inner[j]; });\n        for (var j = 0; j < b.length; ++j) {\n            if (Math.abs(b[j] - i[j]) > 0.0001) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.n = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        for (var i = 0; i < a; ++i) {\n            var j = b(i);\n            var k = c(i);\n            if (!isNaN_(j) && !isNaN_(k) && j > 0 && k > 0) {\n                var l = Math.log(b(i));\n                var m = Math.log(c(i));\n                d += l * m;\n                e += l;\n                f += m;\n                g += l * l;\n                ++h;\n            }\n        }\n        if (h < 2) {\n            return null;\n        }\n        var n = (h * d - e * f) / (h * g - e * e);\n        var o = Math.exp((f - n * e) / h);\n        return [o, n];\n    };\n    LeastSquaresFit.ag = function (a, b) {\n        if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        return a[0] * Math.pow(b, a[1]);\n    };\n    LeastSquaresFit.w = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 10 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = -100; f < 100; ++f) {\n            d.add(f);\n            e.add(LeastSquaresFit.ag(b, f));\n        }\n        var g = LeastSquaresFit.n(d.count, function (h) { return d._inner[h]; }, function (h) { return e._inner[h]; });\n        for (var h = 0; h < b.length; ++h) {\n            if (Math.abs(b[h] - g[h]) > 0.0001) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.o = function (a, b, c) {\n        return LeastSquaresFit.m(a, 2, b, c);\n    };\n    LeastSquaresFit.ah = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.x = function () {\n        return LeastSquaresFit.v(2);\n    };\n    LeastSquaresFit.i = function (a, b, c) {\n        return LeastSquaresFit.m(a, 3, b, c);\n    };\n    LeastSquaresFit.ab = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.r = function () {\n        return LeastSquaresFit.v(3);\n    };\n    LeastSquaresFit.p = function (a, b, c) {\n        return LeastSquaresFit.m(a, 4, b, c);\n    };\n    LeastSquaresFit.ai = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.y = function () {\n        return LeastSquaresFit.v(4);\n    };\n    LeastSquaresFit.q = function (a, b, c) {\n        return LeastSquaresFit.m(a, 5, b, c);\n    };\n    LeastSquaresFit.aj = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.z = function () {\n        return LeastSquaresFit.v(5);\n    };\n    LeastSquaresFit.m = function (a, b, c, d) {\n        var e = new Array(1 + 2 * b);\n        for (var f = 0; f < e.length; f++) {\n            e[f] = 0;\n        }\n        var g = ((function () {\n            var $firstRank;\n            var $ret = new Array($firstRank = b + 1);\n            var $currRet = $ret;\n            for (var $rankInit = 0; $rankInit < $firstRank; $rankInit++) {\n                $currRet[$rankInit] = new Array(b + 1);\n            }\n            return $ret;\n        })());\n        var h = new Array(b + 1);\n        for (var i = 0; i < h.length; i++) {\n            h[i] = 0;\n        }\n        var j = 0;\n        for (var k = 0; k < a; ++k) {\n            var l = 1;\n            var m = c(k);\n            if (!isNaN_(m) && !isNaN_(d(k))) {\n                for (var n = 0; n < e.length; ++n) {\n                    e[n] += l;\n                    l *= m;\n                    ++j;\n                }\n            }\n        }\n        if (j < b) {\n            return null;\n        }\n        for (var o = 0; o <= b; ++o) {\n            for (var p = 0; p <= b; ++p) {\n                g[o][p] = e[o + p];\n            }\n        }\n        for (var q = 0; q < a; ++q) {\n            var r = c(q);\n            var s = d(q);\n            if (!isNaN_(r) && !isNaN_(s)) {\n                for (var t = 0; t <= b; ++t) {\n                    h[t] += (Math.pow(r, t) * s);\n                }\n            }\n        }\n        return Numeric.d(g, h) ? h : null;\n    };\n    LeastSquaresFit.af = function (a, b) {\n        if (a.length < 1 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        var c = 0;\n        for (var d = 0; d < a.length; ++d) {\n            c += a[d] * Math.pow(b, d);\n        }\n        return c;\n    };\n    LeastSquaresFit.v = function (a) {\n        var b = new Random(0);\n        var c = new Array(a + 1);\n        for (var d = 0; d < c.length; ++d) {\n            c[d] = 2 * b.nextDouble();\n        }\n        var e = new List$1(Number_$type, 0);\n        var f = new List$1(Number_$type, 0);\n        for (var g = -100; g < 100; ++g) {\n            var h = g;\n            var i = LeastSquaresFit.af(c, h);\n            if (!isNaN_(i)) {\n                e.add(h);\n                f.add(i);\n            }\n        }\n        var j = LeastSquaresFit.m(e.count, a, function (k) { return e._inner[k]; }, function (k) { return f._inner[k]; });\n        for (var k = 0; k < a; ++k) {\n            if (Math.abs(c[k] - j[k]) > 0.0001) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.$t = markType(LeastSquaresFit, 'LeastSquaresFit', Numeric.$);\n    return LeastSquaresFit;\n}(Numeric));\nexport { LeastSquaresFit };\n//# sourceMappingURL=LeastSquaresFit.js.map\n"]},"metadata":{},"sourceType":"module"}