{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { FormatException } from \"./type\";\nimport { dateMinValue } from \"./date\";\nimport { truncate } from \"./number\";\n\nvar ConvertUtil =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function ConvertUtil() {}\n\n  ConvertUtil.toBoolean = function (v, provider) {\n    if (v.toBoolean) {\n      return v.toBoolean(provider);\n    }\n\n    if (typeof v === 'string' || v instanceof String) {\n      if (v.toLowerCase().trim() == \"true\") {\n        return true;\n      }\n\n      return false;\n    }\n\n    return !!v;\n  };\n\n  ConvertUtil.toString1 = function (v, provider) {\n    if (v.toString1) {\n      return v.toString1(provider);\n    }\n\n    if (typeof v === 'string' || v instanceof String) {\n      return v;\n    }\n\n    return v.toString();\n  };\n\n  ConvertUtil.toChar = function (v, provider) {\n    if (v.toChar) {\n      return v.toChar(provider);\n    }\n\n    if (typeof v === 'string' || v instanceof String) {\n      return v[0];\n    }\n\n    return String.fromCharCode(+v);\n  };\n\n  ConvertUtil.toDateTime = function (v, provider) {\n    if (v.toDateTime) {\n      return v.toDateTime(provider);\n    }\n\n    if (v == null) {\n      return dateMinValue();\n    }\n\n    var str = v.toString();\n\n    if (/^\\s*([0-9]{1,4}\\s*((\\s+[ap]m?)|(((:\\s*[0-9]{1,2}\\s*){1,2}(\\.\\s*[0-9]+)?)(\\s+[ap]m?)?)))\\s*$/i.test(str)) {\n      // The string can be a time string only, in which case we should return today at that time.\n      str = new Date().toDateString() + \" \" + str;\n    }\n\n    var dt = new Date(Date.parse(str));\n    if (isNaN(+dt)) throw new FormatException(0, \"\");\n    return dt;\n  };\n\n  ConvertUtil.convertToNumber = function (meth, v, minValue, maxValue, trunc, provider, throwOnNaN) {\n    if (v[meth]) {\n      return v[meth](provider);\n    }\n\n    var numberVal = 0;\n\n    if (typeof v === 'string' || v instanceof String) {\n      numberVal = parseFloat(v);\n\n      if (throwOnNaN === true && isNaN(numberVal)) {\n        throw new FormatException(0, \"The string cannot be converted to a number\");\n      }\n    } else {\n      numberVal = +v;\n    }\n\n    if (numberVal < minValue) {\n      numberVal = minValue;\n    }\n\n    if (numberVal > maxValue) {\n      numberVal = maxValue;\n    }\n\n    if (trunc) {\n      numberVal = truncate(numberVal);\n    }\n\n    return numberVal;\n  };\n\n  ConvertUtil.toByte = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toByte\", v, 0, 255, true, provider, true);\n  };\n\n  ConvertUtil.toDecimal = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toDecimal\", v, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, false, provider, true);\n  };\n\n  ConvertUtil.toDouble = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toDouble\", v, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, false, provider);\n  };\n\n  ConvertUtil.toInt16 = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toInt16\", v, -32768, 32767, true, provider, true);\n  };\n\n  ConvertUtil.toInt32 = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toInt32\", v, -2147483648, 2147483647, true, provider, true);\n  };\n\n  ConvertUtil.toInt64 = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toInt64\", v, -9223372036854775808, 9223372036854775807, true, provider, true);\n  };\n\n  ConvertUtil.toSByte = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toSByte\", v, -128, 127, true, provider, true);\n  };\n\n  ConvertUtil.toUInt16 = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toUInt16\", v, 0, 65535, true, provider, true);\n  };\n\n  ConvertUtil.toUInt32 = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toUInt32\", v, 0, 4294967295, true, provider, true);\n  };\n\n  ConvertUtil.toUInt64 = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toUInt64\", v, 0, 18446744073709551615, true, provider, true);\n  };\n\n  ConvertUtil.toSingle = function (v, provider) {\n    return ConvertUtil.convertToNumber(\"toSingle\", v, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, false, provider);\n  };\n\n  return ConvertUtil;\n}();\n\nexport { ConvertUtil };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/convertUtil.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { FormatException } from \"./type\";\nimport { dateMinValue } from \"./date\";\nimport { truncate } from \"./number\";\nvar ConvertUtil = /** @class */ /*@__PURE__*/ (function () {\n    function ConvertUtil() {\n    }\n    ConvertUtil.toBoolean = function (v, provider) {\n        if (v.toBoolean) {\n            return v.toBoolean(provider);\n        }\n        if (typeof v === 'string' || v instanceof String) {\n            if (v.toLowerCase().trim() == \"true\") {\n                return true;\n            }\n            return false;\n        }\n        return !!v;\n    };\n    ConvertUtil.toString1 = function (v, provider) {\n        if (v.toString1) {\n            return v.toString1(provider);\n        }\n        if (typeof v === 'string' || v instanceof String) {\n            return v;\n        }\n        return v.toString();\n    };\n    ConvertUtil.toChar = function (v, provider) {\n        if (v.toChar) {\n            return v.toChar(provider);\n        }\n        if (typeof v === 'string' || v instanceof String) {\n            return v[0];\n        }\n        return String.fromCharCode(+v);\n    };\n    ConvertUtil.toDateTime = function (v, provider) {\n        if (v.toDateTime) {\n            return v.toDateTime(provider);\n        }\n        if (v == null) {\n            return dateMinValue();\n        }\n        var str = v.toString();\n        if (/^\\s*([0-9]{1,4}\\s*((\\s+[ap]m?)|(((:\\s*[0-9]{1,2}\\s*){1,2}(\\.\\s*[0-9]+)?)(\\s+[ap]m?)?)))\\s*$/i.test(str)) {\n            // The string can be a time string only, in which case we should return today at that time.\n            str = new Date().toDateString() + \" \" + str;\n        }\n        var dt = new Date(Date.parse(str));\n        if (isNaN(+dt))\n            throw new FormatException(0, \"\");\n        return dt;\n    };\n    ConvertUtil.convertToNumber = function (meth, v, minValue, maxValue, trunc, provider, throwOnNaN) {\n        if (v[meth]) {\n            return v[meth](provider);\n        }\n        var numberVal = 0;\n        if (typeof v === 'string' || v instanceof String) {\n            numberVal = parseFloat(v);\n            if (throwOnNaN === true && isNaN(numberVal)) {\n                throw new FormatException(0, \"The string cannot be converted to a number\");\n            }\n        }\n        else {\n            numberVal = +v;\n        }\n        if (numberVal < minValue) {\n            numberVal = minValue;\n        }\n        if (numberVal > maxValue) {\n            numberVal = maxValue;\n        }\n        if (trunc) {\n            numberVal = truncate(numberVal);\n        }\n        return numberVal;\n    };\n    ConvertUtil.toByte = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toByte\", v, 0, 255, true, provider, true);\n    };\n    ConvertUtil.toDecimal = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toDecimal\", v, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, false, provider, true);\n    };\n    ConvertUtil.toDouble = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toDouble\", v, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, false, provider);\n    };\n    ConvertUtil.toInt16 = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toInt16\", v, -32768, 32767, true, provider, true);\n    };\n    ConvertUtil.toInt32 = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toInt32\", v, -2147483648, 2147483647, true, provider, true);\n    };\n    ConvertUtil.toInt64 = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toInt64\", v, -9223372036854775808, 9223372036854775807, true, provider, true);\n    };\n    ConvertUtil.toSByte = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toSByte\", v, -128, 127, true, provider, true);\n    };\n    ConvertUtil.toUInt16 = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toUInt16\", v, 0, 65535, true, provider, true);\n    };\n    ConvertUtil.toUInt32 = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toUInt32\", v, 0, 4294967295, true, provider, true);\n    };\n    ConvertUtil.toUInt64 = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toUInt64\", v, 0, 18446744073709551615, true, provider, true);\n    };\n    ConvertUtil.toSingle = function (v, provider) {\n        return ConvertUtil.convertToNumber(\"toSingle\", v, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, false, provider);\n    };\n    return ConvertUtil;\n}());\nexport { ConvertUtil };\n//# sourceMappingURL=convertUtil.js.map\n"]},"metadata":{},"sourceType":"module"}