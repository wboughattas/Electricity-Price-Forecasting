{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamLinearGauge } from './XamLinearGauge';\nimport { CollectionAdapter, brushToString, stringToBrush, toPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, isValidProp, getModifiedProps, toSpinal, NamePatcher, arrayFindByName } from \"igniteui-react-core\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { LinearGaugeStylingDefaults } from './LinearGaugeStylingDefaults';\nimport { LinearScaleOrientation_$type } from './LinearScaleOrientation';\nimport { LinearGraphNeedleShape_$type } from './LinearGraphNeedleShape';\nimport { IgrFormatLinearGraphLabelEventArgs } from './igr-format-linear-graph-label-event-args';\nimport { IgrAlignLinearGraphLabelEventArgs } from './igr-align-linear-graph-label-event-args'; //import { LinearGraphRange } from './LinearGraphRange';\n\nimport { XamLinearGraphRange } from './XamLinearGraphRange';\nimport { IgrLinearGraphRangeCollection } from './igr-linear-graph-range-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { IgrDoubleValueChangedEventArgs } from \"igniteui-react-core\";\n/**\n * A linear gauge for displaying a single value on a defined scale.\n*/\n\nvar IgrLinearGauge =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrLinearGauge, _super);\n\n  function IgrLinearGauge(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.contentRanges = [];\n    /**\n    * The ranges actually present in the chart. Do not directly modify this array.\n    * This array's contents can be modified by causing Angular to reproject the child content.\n    * Or adding and removing ranges from the manual ranges collection on the ranges property.\n    */\n\n    _this.actualRanges = [];\n    _this._ranges = null;\n    _this._rangesAdapter = null;\n    _this._initialized = false;\n    _this._tooltipTemplate = null;\n    _this._tooltipContent = null;\n    _this._defaultTooltips = null;\n    _this._uniqueTooltipId = 0;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._formatLabel = null;\n    _this._formatLabel_wrapped = null;\n    _this._alignLabel = null;\n    _this._alignLabel_wrapped = null;\n    _this._valueChanged = null;\n    _this._valueChanged_wrapped = null;\n    _this._actualMinimumValueChange = null;\n    _this._actualMinimumValueChange_wrapped = null;\n    _this._actualMaximumValueChange = null;\n    _this._actualMaximumValueChange_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._tooltipRef = _this._tooltipRef.bind(_this);\n    _this._activeTooltipElements = new Map();\n    _this._activeTooltips = new Map();\n    _this._currentTooltips = [];\n    _this._contentChildrenManager = new ContentChildrenManager(function (ch) {\n      return ch.key || ch.props.name;\n    }, function (ch) {\n      return ch.key || ch.props.name;\n    }, function () {\n      return _this._updateContentChildren();\n    });\n    var container = null;\n\n    if (document) {\n      container = document.createElement(\"div\");\n      container.style.display = \"block\";\n      container.style.width = \"100%\";\n      container.style.height = \"100%\";\n    }\n\n    var root;\n    root = container;\n    _this._renderer = new ReactRenderer(root, document, true, LinearGaugeStylingDefaults);\n    _this._container = _this._renderer.getWrapper(container);\n    _this._implementation = _this.createImplementation(); //this._container = this._renderer.createElement(\"div\");\n    //this._renderer.rootWrapper.append(this._container);\n    //this._container.setStyleProperty(\"display\", \"block\");\n    //this._container.setStyleProperty(\"width\", \"100%\");\n    //this._container.setStyleProperty(\"height\", \"100%\");\n\n    _this._wrapper = _this._renderer; //var root: any;\n    //root = this._container;\n    //if (this._container.nativeElement != null) {\n    //    root = this._container.nativeElement;\n    //}\n\n    var gauge = _this.i;\n    _this._gauge = gauge;\n    _this._rangesAdapter = new CollectionAdapter(_this.contentRanges, _this.i.ranges, _this.actualRanges, function (c) {\n      return c.i;\n    }, function (i) {\n      i._provideRenderer(_this._wrapper);\n\n      if (_this._container && _this._container.getNativeElement().parentElement) {\n        i._styling(_this._container.getNativeElement(), _this, _this);\n      }\n    }, function (i) {\n      i._provideRenderer(null);\n    });\n    gauge.provideContainer(_this._renderer);\n\n    _this._renderer.addSizeWatcher(function () {\n      _this._gauge.containerResized();\n    });\n\n    _this._initialized = true;\n    return _this;\n  }\n\n  Object.defineProperty(IgrLinearGauge.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n        this.containerResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.width = value;\n        this.containerResized();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLinearGauge.prototype._updateContentChildren = function () {\n    this.contentRanges.length = 0;\n    var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n\n    for (var i = 0; i < contentChildrenActual.length; i++) {\n      if (XamLinearGraphRange.$type.isAssignableFrom(contentChildrenActual[i].i.$type)) {\n        this.contentRanges.push(contentChildrenActual[i]);\n      }\n    }\n\n    if (this._rangesAdapter !== null) {\n      this._rangesAdapter.notifyContentChanged();\n    }\n  };\n\n  Object.defineProperty(IgrLinearGauge.prototype, \"ranges\", {\n    /**\n     * A collection or manually added axes for the chart.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._ranges === null) {\n        var coll = new IgrLinearGraphRangeCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._rangesAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._ranges = coll;\n      }\n\n      return this._ranges;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLinearGauge.prototype._tooltipRef = function (t) {\n    //console.log(t);\n    if (t === null) {\n      return;\n    }\n\n    if (t.currentOwner && t.currentOwner.tooltipTemplate) {\n      t.template = t.currentOwner.tooltipTemplate;\n    }\n\n    this._activeTooltips.set(t.currentOwner, t);\n  };\n\n  IgrLinearGauge.prototype.render = function () {\n    // if (!this._childrenDiffer(this.props.children)) {\n    // \tlet div = React.createElement(\"div\", {\n    // \t\tref: (ref) => {\n    // \t\t\tthis._elRef = ref;\n    // \t\t},\n    // \t\tchildren: this.props.children\n    // \t});\n    // \treturn div;\n    // } else {\n    var children = this._contentChildrenManager.getChildren(this.props.children);\n\n    if (this._currentTooltips && this._currentTooltips.length > 0) {\n      for (var i = 0; i < this._currentTooltips.length; i++) {\n        var t = this._currentTooltips[i];\n\n        if (this._activeTooltipElements.has(t)) {\n          children.push(this._activeTooltipElements.get(t));\n        } else {\n          if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n            continue;\n          }\n\n          var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n          var tEle = React.createElement(Tooltip, {\n            ref: this._tooltipRef,\n            key: this._currentTooltips[i].key,\n            owner: this._currentTooltips[i]\n          });\n          var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n\n          this._activeTooltipElements.set(t, portal);\n\n          children.push(portal);\n        }\n      }\n    }\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-linear-gauge igr-linear-gauge\",\n      ref: this._getMainRef,\n      children: children\n    });\n    return div; //}\n  };\n\n  IgrLinearGauge.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          {\n            this[p] = this.props[p];\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this._container.getNativeElement());\n\n    this.containerResized();\n    this.initializeContent();\n  };\n\n  IgrLinearGauge.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrLinearGauge.prototype._getMainRef = function (div) {\n    this._elRef = div;\n  };\n\n  IgrLinearGauge.prototype.destroy = function () {\n    this._wrapper.rootWrapper.unlistenAll();\n\n    this._gauge.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrLinearGauge.prototype.createImplementation = function () {\n    return new XamLinearGauge();\n  };\n\n  IgrLinearGauge.prototype.initializeContent = function () {\n    this._styling(this._container.getNativeElement(), this);\n\n    if (this.actualRanges && this.actualRanges.length > 0) {\n      var currRange = this.actualRanges;\n\n      for (var i = 0; i < currRange.length; i++) {\n        currRange[i]._styling(this._container.getNativeElement(), this, this);\n      }\n    }\n\n    this._updateContentChildren();\n\n    this.i.containerResized();\n  };\n\n  IgrLinearGauge.prototype.componentWillUnmount = function () {\n    //this._grid.destroy();\n    this.destroy();\n  };\n\n  Object.defineProperty(IgrLinearGauge.prototype, \"tooltipTemplate\", {\n    get: function () {\n      return this._tooltipTemplate;\n    },\n    set: function (value) {\n      this._tooltipTemplate = value;\n\n      if (value == null) {\n        if (this._tooltipContent !== null) {\n          this._tooltipContent.destroy();\n\n          this._tooltipContent = null;\n        }\n      }\n\n      if (this._tooltipContent != null) {\n        this._tooltipContent.instance.template = this._tooltipTemplate;\n      } else {\n        this._ensureTooltipCreated();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLinearGauge.prototype.createWrapper = function (ele) {\n    var wrapper = new ReactWrapper(ele, this._renderer);\n    wrapper.updateToolTip = ele.updateToolTip;\n    wrapper.hideToolTip = ele.hideToolTip;\n    return wrapper;\n  };\n\n  IgrLinearGauge.prototype._ensureDefaultTooltip = function () {\n    if (this._defaultTooltips == null) {\n      return;\n    }\n\n    this._defaultTooltips[\"ensureDefaultTooltip\"](this);\n  };\n\n  IgrLinearGauge.prototype._onDefaultTooltipsReady = function (cr) {\n    this._ensureDefaultTooltip();\n  };\n\n  IgrLinearGauge.prototype._updateTooltipState = function () {\n    if (this._initialized) {\n      this.setState({\n        tooltips: this._currentTooltips\n      });\n    }\n  };\n\n  IgrLinearGauge.prototype.createTooltip = function () {\n    // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n    // \treturn null;\n    // }\n    // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n    var wrapper = this._wrapper.createElement(\"div\");\n\n    var ele = wrapper.getNativeElement();\n    ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n    this._uniqueTooltipId++;\n    this._currentTooltips = this._currentTooltips.slice(0);\n\n    this._currentTooltips.push(ele); //let element = React.createElement(Tooltip,  );\n    //let portal = ReactDOM.createPortal(element, ele);\n\n\n    var self = this;\n\n    ele.updateToolTip = function (c, isSubContent) {\n      if (c.externalObject) {\n        c = c.externalObject;\n      } else {\n        var ext = new IgrDataContext();\n        ext._implementation = c;\n        c = ext;\n      }\n\n      if (!isSubContent) {\n        if (ele.parentElement != self._container.getNativeElement()) {\n          if (ele.parentElement != null) {\n            ele.parentElement.removeChild(ele);\n          }\n\n          self._container.getNativeElement().appendChild(ele);\n        }\n      } else {\n        c.isSubContent = true;\n      }\n\n      if (self._activeTooltips.has(ele)) {\n        var t = self._activeTooltips.get(ele);\n\n        if (t.template === null && ele.tooltipTemplate !== null) {\n          t.template = ele.tooltipTemplate;\n        }\n\n        t.dataContext = c;\n      }\n\n      ele.style.display = \"block\";\n      return true;\n    };\n\n    ele.hideToolTip = function () {\n      ele.style.display = \"none\";\n    };\n\n    ele.style.display = \"none\";\n\n    this._updateTooltipState();\n\n    return ele;\n  };\n\n  IgrLinearGauge.prototype._ensureTooltipCreated = function () {\n    if (this.i.toolTip == null) {\n      var tooltip = this.createTooltip();\n      var ele = tooltip;\n\n      if (tooltip == null) {\n        return;\n      }\n\n      this._tooltipContent = tooltip; //(<any>tooltip.instance).template = this._tooltipTemplate;\n\n      this.i.toolTip = this.createWrapper(tooltip);\n\n      if (this._activeTooltips.has(ele)) {\n        var tCont = this._activeTooltips.get(ele);\n\n        tCont.template = ele.tooltipTemplate;\n      }\n    }\n  };\n\n  Object.defineProperty(IgrLinearGauge.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    }\n    /**\n                               * @hidden\n                               */\n    ,\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLinearGauge._createFromInternal = function (internal) {\n    if (!internal) {\n      return null;\n    }\n\n    if (!internal.$type) {\n      return null;\n    }\n\n    var name = internal.$type.name;\n    var externalName = \"Igr\" + name;\n\n    if (!TypeRegistrar.isRegistered(externalName)) {\n      return null;\n    }\n\n    return TypeRegistrar.create(externalName);\n  };\n\n  Object.defineProperty(IgrLinearGauge.prototype, \"animating\", {\n    /**\n    * Gets a value indicating whether the bullet graph is currently animating.\n    */\n    get: function () {\n      return this.i.a4;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"transitionProgress\", {\n    /**\n     * Gets the transition progress of the animation when the control is animating.\n    */\n    get: function () {\n      return this.i.cz;\n    },\n    set: function (v) {\n      this.i.cz = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"orientation\", {\n    /**\n     * Gets or sets the orientation of the scale.\n    */\n    get: function () {\n      return this.i.as;\n    },\n    set: function (v) {\n      this.i.as = ensureEnum(LinearScaleOrientation_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"rangeBrushes\", {\n    /**\n     * Gets or sets a collection of brushes to be used as the palette for linear gauge ranges.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ah);\n    },\n    set: function (v) {\n      this.i.ah = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"rangeOutlines\", {\n    /**\n     * Gets or sets a collection of brushes to be used as the palette for linear gauge outlines.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.ai);\n    },\n    set: function (v) {\n      this.i.ai = toBrushCollection(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"minimumValue\", {\n    /**\n     * Gets or sets the minimum value of the scale.\n    */\n    get: function () {\n      return this.i.b4;\n    },\n    set: function (v) {\n      this.i.b4 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"actualMinimumValue\", {\n    /**\n     * Gets the resolved minimum value of the scale.\n    */\n    get: function () {\n      return this.i.bs;\n    },\n    set: function (v) {\n      this.i.bs = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"maximumValue\", {\n    /**\n     * Gets or sets the maximum value of the scale.\n    */\n    get: function () {\n      return this.i.b3;\n    },\n    set: function (v) {\n      this.i.b3 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"actualMaximumValue\", {\n    /**\n     * Gets the resolved maximum value of the scale.\n    */\n    get: function () {\n      return this.i.br;\n    },\n    set: function (v) {\n      this.i.br = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"value\", {\n    /**\n     * Gets or sets the value at which the needle is positioned.\n    */\n    get: function () {\n      return this.i.c0;\n    },\n    set: function (v) {\n      this.i.c0 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleShape\", {\n    /**\n     * Gets or sets the shape to use when rendering the needle from a number of options.\n    */\n    get: function () {\n      return this.i.ap;\n    },\n    set: function (v) {\n      this.i.ap = ensureEnum(LinearGraphNeedleShape_$type, v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleName\", {\n    /**\n     * Gets or sets the name used for needle.\n    */\n    get: function () {\n      return this.i.d5;\n    },\n    set: function (v) {\n      this.i.d5 = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"rangeInnerExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.ck;\n    },\n    set: function (v) {\n      this.i.ck = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"scaleInnerExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.co;\n    },\n    set: function (v) {\n      this.i.co = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"rangeOuterExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cl;\n    },\n    set: function (v) {\n      this.i.cl = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"scaleOuterExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cq;\n    },\n    set: function (v) {\n      this.i.cq = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cb;\n    },\n    set: function (v) {\n      this.i.cb = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cf;\n    },\n    set: function (v) {\n      this.i.cf = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerBaseWidth\", {\n    /**\n     * Gets or sets the width of the needle's inner base.\n    */\n    get: function () {\n      return this.i.ca;\n    },\n    set: function (v) {\n      this.i.ca = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterBaseWidth\", {\n    /**\n     * Gets or sets the width of the needle's outer base.\n    */\n    get: function () {\n      return this.i.ce;\n    },\n    set: function (v) {\n      this.i.ce = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerPointWidth\", {\n    /**\n     * Gets or sets the width of the needle's inner point.\n    */\n    get: function () {\n      return this.i.cd;\n    },\n    set: function (v) {\n      this.i.cd = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterPointWidth\", {\n    /**\n     * Gets or sets the width of the needle's outer point.\n    */\n    get: function () {\n      return this.i.ch;\n    },\n    set: function (v) {\n      this.i.ch = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerPointExtent\", {\n    /**\n     * Gets or sets the extent of the needle's inner point.\n    */\n    get: function () {\n      return this.i.cc;\n    },\n    set: function (v) {\n      this.i.cc = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterPointExtent\", {\n    /**\n     * Gets or sets the extent of the needle's outer point.\n    */\n    get: function () {\n      return this.i.cg;\n    },\n    set: function (v) {\n      this.i.cg = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"interval\", {\n    /**\n     * Gets or sets the interval to use for the scale.\n    */\n    get: function () {\n      return this.i.by;\n    },\n    set: function (v) {\n      this.i.by = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"ticksPostInitial\", {\n    /**\n     * A value to start adding tickmarks, added to the scale's MinimumValue.\n    */\n    get: function () {\n      return this.i.cv;\n    },\n    set: function (v) {\n      this.i.cv = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"ticksPreTerminal\", {\n    /**\n     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.\n    */\n    get: function () {\n      return this.i.cw;\n    },\n    set: function (v) {\n      this.i.cw = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"labelInterval\", {\n    /**\n     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.\n    */\n    get: function () {\n      return this.i.b0;\n    },\n    set: function (v) {\n      this.i.b0 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"labelExtent\", {\n    /**\n     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.\n     * Values further from zero than 1 can be used to hide the labels of the linear gauge.\n    */\n    get: function () {\n      return this.i.bz;\n    },\n    set: function (v) {\n      this.i.bz = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"labelsPostInitial\", {\n    /**\n     * A value to start adding labels, added to the scale's MinimumValue.\n    */\n    get: function () {\n      return this.i.b1;\n    },\n    set: function (v) {\n      this.i.b1 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"labelsPreTerminal\", {\n    /**\n     * A value to stop adding labels, subtracted from the scale's MaximumValue.\n    */\n    get: function () {\n      return this.i.b2;\n    },\n    set: function (v) {\n      this.i.b2 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"minorTickCount\", {\n    /**\n     * Gets or sets the number of minor tickmarks to place between major tickmarks.\n    */\n    get: function () {\n      return this.i.b5;\n    },\n    set: function (v) {\n      this.i.b5 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"tickStartExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cx;\n    },\n    set: function (v) {\n      this.i.cx = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"tickEndExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cu;\n    },\n    set: function (v) {\n      this.i.cu = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"tickStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use when rendering ticks.\n    */\n    get: function () {\n      return this.i.cy;\n    },\n    set: function (v) {\n      this.i.cy = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"tickBrush\", {\n    /**\n     * Gets or sets the brush to use for the major tickmarks.\n    */\n    get: function () {\n      return brushToString(this.i.h1);\n    },\n    set: function (v) {\n      this.i.h1 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"fontBrush\", {\n    /**\n     * Gets or sets the brush to use for the label font.\n    */\n    get: function () {\n      return brushToString(this.i.hu);\n    },\n    set: function (v) {\n      this.i.hu = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleBreadth\", {\n    /**\n     * Gets or sets the needle breadth.\n    */\n    get: function () {\n      return this.i.b9;\n    },\n    set: function (v) {\n      this.i.b9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleBrush\", {\n    /**\n     * Gets or sets the brush to use for needle element.\n    */\n    get: function () {\n      return brushToString(this.i.hx);\n    },\n    set: function (v) {\n      this.i.hx = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleOutline\", {\n    /**\n     * Gets or sets the brush to use for the outline of needle element.\n    */\n    get: function () {\n      return brushToString(this.i.hy);\n    },\n    set: function (v) {\n      this.i.hy = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"needleStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use when rendering single actual value element.\n    */\n    get: function () {\n      return this.i.ci;\n    },\n    set: function (v) {\n      this.i.ci = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"minorTickStartExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.b7;\n    },\n    set: function (v) {\n      this.i.b7 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"minorTickEndExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.b6;\n    },\n    set: function (v) {\n      this.i.b6 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"minorTickStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use when rendering minor ticks.\n    */\n    get: function () {\n      return this.i.b8;\n    },\n    set: function (v) {\n      this.i.b8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"minorTickBrush\", {\n    /**\n     * Gets or sets the brush to use for the minor tickmarks.\n    */\n    get: function () {\n      return brushToString(this.i.hw);\n    },\n    set: function (v) {\n      this.i.hw = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"isScaleInverted\", {\n    /**\n     * Gets or sets a value indicating whether the scale is inverted.\n     * When the scale is inverted the direction in which the scale values increase is right to left.\n    */\n    get: function () {\n      return this.i.a8;\n    },\n    set: function (v) {\n      this.i.a8 = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"backingBrush\", {\n    /**\n     * Gets or sets the brush to use to fill the backing of the linear gauge.\n    */\n    get: function () {\n      return brushToString(this.i.hs);\n    },\n    set: function (v) {\n      this.i.hs = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"backingOutline\", {\n    /**\n     * Gets or sets the brush to use for the outline of the backing.\n    */\n    get: function () {\n      return brushToString(this.i.ht);\n    },\n    set: function (v) {\n      this.i.ht = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"backingStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness of the backing outline.\n    */\n    get: function () {\n      return this.i.bw;\n    },\n    set: function (v) {\n      this.i.bw = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"backingInnerExtent\", {\n    /**\n     * Gets or sets the inner extent of the linear gauge backing.\n    */\n    get: function () {\n      return this.i.bu;\n    },\n    set: function (v) {\n      this.i.bu = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"backingOuterExtent\", {\n    /**\n     * Gets or sets the outer extent of the linear gauge backing.\n    */\n    get: function () {\n      return this.i.bv;\n    },\n    set: function (v) {\n      this.i.bv = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"scaleStartExtent\", {\n    /**\n     * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cs;\n    },\n    set: function (v) {\n      this.i.cs = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"scaleEndExtent\", {\n    /**\n     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n    */\n    get: function () {\n      return this.i.cn;\n    },\n    set: function (v) {\n      this.i.cn = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"scaleBrush\", {\n    /**\n     * Gets or sets the brush to use to fill the scale of the linear gauge.\n    */\n    get: function () {\n      return brushToString(this.i.hz);\n    },\n    set: function (v) {\n      this.i.hz = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"scaleOutline\", {\n    /**\n     * Gets or sets the brush to use for the outline of the scale.\n    */\n    get: function () {\n      return brushToString(this.i.h0);\n    },\n    set: function (v) {\n      this.i.h0 = stringToBrush(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"scaleStrokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness of the scale outline.\n    */\n    get: function () {\n      return this.i.ct;\n    },\n    set: function (v) {\n      this.i.ct = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"isNeedleDraggingEnabled\", {\n    /**\n     * Gets or sets whether needle dragging is enabled or not.\n    */\n    get: function () {\n      return this.i.a7;\n    },\n    set: function (v) {\n      this.i.a7 = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"labelFormat\", {\n    /**\n     * Gets or sets the label composite format used when creating label values.\n    */\n    get: function () {\n      return this.i.dk;\n    },\n    set: function (v) {\n      this.i.dk = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"labelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the LabelFormat string.\n    */\n    get: function () {\n      return this.i.ag;\n    },\n    set: function (v) {\n      this.i.ag = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"transitionDuration\", {\n    /**\n     * Gets or sets the number of milliseconds over which changes to the linear gauge should be animated.\n    */\n    get: function () {\n      return this.i.c4;\n    },\n    set: function (v) {\n      this.i.c4 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"showToolTipTimeout\", {\n    /**\n     * Gets or sets the time in milliseconds that tooltip appearance is delayed with.\n    */\n    get: function () {\n      return this.i.c3;\n    },\n    set: function (v) {\n      this.i.c3 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"showToolTip\", {\n    /**\n     * Gets or sets a value indicating whether tooltips are enabled.\n    */\n    get: function () {\n      return this.i.be;\n    },\n    set: function (v) {\n      this.i.be = ensureBool(v);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"font\", {\n    /**\n     * Gets or sets the font.\n    */\n    get: function () {\n      return this.i.dd;\n    },\n    set: function (v) {\n      this.i.dd = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"pixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.cj;\n    },\n    set: function (v) {\n      this.i.cj = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"actualPixelScalingRatio\", {\n    /**\n     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.bt;\n    },\n    set: function (v) {\n      this.i.bt = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLinearGauge.prototype.findByName = function (name) {\n    if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {\n      return this.ranges.findByName(name);\n    }\n\n    if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n      return arrayFindByName(this.labelFormatSpecifiers, name);\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(IgrLinearGauge.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IgrLinearGauge.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrLinearGauge.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"LinearGauge\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n  * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.\n  * @param point  * The point for which to retrieve the associated value.\n  */\n\n\n  IgrLinearGauge.prototype.getValueForPoint = function (point) {\n    var iv = this.i.bx(toPoint(point));\n    return iv;\n  };\n\n  IgrLinearGauge.prototype.needleContainsPoint = function (point, isFinger) {\n    var iv = this.i.needleContainsPoint(toPoint(point), isFinger);\n    return iv;\n  };\n  /**\n   * Returns visuals as a serialized string.\n  \r\n  */\n\n\n  IgrLinearGauge.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.dc();\n    return iv;\n  };\n  /**\n   * Use to force the linear gauge to finish any deferred work before printing or evaluating its visual.\n   * This should only be called if the visual of the linear gauge needs to be synchronously saved or evaluated.\n   * Calling this method too often will hinder the performance of the linear gauge.\n  \r\n  */\n\n\n  IgrLinearGauge.prototype.flush = function () {\n    this.i.e8();\n  };\n  /**\n   * Called by the UI framework to provide a UI container for rendering this control.\n  \r\n  * @param container  * The UI container element.\n  */\n\n\n  IgrLinearGauge.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n\n  IgrLinearGauge.prototype.containerResized = function () {\n    this.i.containerResized();\n  };\n\n  IgrLinearGauge.prototype.styleUpdated = function () {\n    this.i.f2();\n  };\n\n  Object.defineProperty(IgrLinearGauge.prototype, \"formatLabel\", {\n    /**\n     * Event which is raised when a label of the the gauge is formatted.\n     * Function takes first argument evt and second argument ui.\n     * Use ui.owner to obtain reference to the gauge widget.\n     * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.\n     * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.\n     * Use ui.value to obtain the value on the the gauge scale associated with the label.\n     * Use ui.label to obtain the string value of the label.\n    */\n    get: function () {\n      return this._formatLabel;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._formatLabel_wrapped !== null) {\n        this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);\n        this._formatLabel_wrapped = null;\n        this._formatLabel = null;\n      }\n\n      this._formatLabel = ev;\n\n      this._formatLabel_wrapped = function (o, e) {\n        var outerArgs = new IgrFormatLinearGraphLabelEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeFormatLabel) {\n          _this.beforeFormatLabel(_this, outerArgs);\n        }\n\n        if (_this._formatLabel) {\n          _this._formatLabel(_this, outerArgs);\n        }\n      };\n\n      this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"alignLabel\", {\n    /**\n     * Event which is raised when a label of the linear gauge is aligned along the scale.\n     * Function takes first argument evt and second argument ui.\n     * Use ui.owner to obtain reference to the gauge widget.\n     * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.\n     * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.\n     * Use ui.value to obtain the value on the gauge scale associated with the label.\n     * Use ui.label to obtain the string value of the label.\n     * Use ui.width to obtain the width of the label.\n     * Use ui.height to obtain the height of the label.\n     * Use ui.offsetX to obtain the X offset of the label on the gauge scale.\n     * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.\n    */\n    get: function () {\n      return this._alignLabel;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._alignLabel_wrapped !== null) {\n        this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);\n        this._alignLabel_wrapped = null;\n        this._alignLabel = null;\n      }\n\n      this._alignLabel = ev;\n\n      this._alignLabel_wrapped = function (o, e) {\n        var outerArgs = new IgrAlignLinearGraphLabelEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeAlignLabel) {\n          _this.beforeAlignLabel(_this, outerArgs);\n        }\n\n        if (_this._alignLabel) {\n          _this._alignLabel(_this, outerArgs);\n        }\n      };\n\n      this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"valueChanged\", {\n    /**\n     * Occurs when the Value property changes.\n    */\n    get: function () {\n      return this._valueChanged;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._valueChanged_wrapped !== null) {\n        this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);\n        this._valueChanged_wrapped = null;\n        this._valueChanged = null;\n      }\n\n      this._valueChanged = ev;\n\n      this._valueChanged_wrapped = function (o, e) {\n        var outerArgs = new IgrDoubleValueChangedEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeValueChanged) {\n          _this.beforeValueChanged(_this, outerArgs);\n        }\n\n        if (_this._valueChanged) {\n          _this._valueChanged(_this, outerArgs);\n        }\n      };\n\n      this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"actualMinimumValueChange\", {\n    get: function () {\n      return this._actualMinimumValueChange;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._actualMinimumValueChange_wrapped !== null) {\n        this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n        this._actualMinimumValueChange_wrapped = null;\n        this._actualMinimumValueChange = null;\n      }\n\n      this._actualMinimumValueChange = ev;\n\n      this._actualMinimumValueChange_wrapped = function (o, e) {\n        var ext = _this.actualMinimumValue;\n\n        if (_this.beforeActualMinimumValueChange) {\n          _this.beforeActualMinimumValueChange(_this, ext);\n        }\n\n        if (_this._actualMinimumValueChange) {\n          _this._actualMinimumValueChange(_this, ext);\n        }\n      };\n\n      this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrLinearGauge.prototype, \"actualMaximumValueChange\", {\n    get: function () {\n      return this._actualMaximumValueChange;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._actualMaximumValueChange_wrapped !== null) {\n        this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n        this._actualMaximumValueChange_wrapped = null;\n        this._actualMaximumValueChange = null;\n      }\n\n      this._actualMaximumValueChange = ev;\n\n      this._actualMaximumValueChange_wrapped = function (o, e) {\n        var ext = _this.actualMaximumValue;\n\n        if (_this.beforeActualMaximumValueChange) {\n          _this.beforeActualMaximumValueChange(_this, ext);\n        }\n\n        if (_this._actualMaximumValueChange) {\n          _this._actualMaximumValueChange(_this, ext);\n        }\n      };\n\n      this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrLinearGauge;\n}(React.Component);\n\nexport { IgrLinearGauge };","map":{"version":3,"sources":["../../../../src/igniteui-gauges/lib/igr-linear-gauge.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamLinearGauge } from './XamLinearGauge';\nimport { CollectionAdapter, brushToString, stringToBrush, toPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, isValidProp, getModifiedProps, toSpinal, NamePatcher, arrayFindByName } from \"igniteui-react-core\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { LinearGaugeStylingDefaults } from './LinearGaugeStylingDefaults';\nimport { LinearScaleOrientation_$type } from './LinearScaleOrientation';\nimport { LinearGraphNeedleShape_$type } from './LinearGraphNeedleShape';\nimport { IgrFormatLinearGraphLabelEventArgs } from './igr-format-linear-graph-label-event-args';\nimport { IgrAlignLinearGraphLabelEventArgs } from './igr-align-linear-graph-label-event-args';\n//import { LinearGraphRange } from './LinearGraphRange';\nimport { XamLinearGraphRange } from './XamLinearGraphRange';\nimport { IgrLinearGraphRangeCollection } from './igr-linear-graph-range-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { IgrDoubleValueChangedEventArgs } from \"igniteui-react-core\";\n/**\n * A linear gauge for displaying a single value on a defined scale.\n*/\nvar IgrLinearGauge = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrLinearGauge, _super);\n    function IgrLinearGauge(props) {\n        var _this = _super.call(this, props) || this;\n        _this.contentRanges = [];\n        /**\n        * The ranges actually present in the chart. Do not directly modify this array.\n        * This array's contents can be modified by causing Angular to reproject the child content.\n        * Or adding and removing ranges from the manual ranges collection on the ranges property.\n        */\n        _this.actualRanges = [];\n        _this._ranges = null;\n        _this._rangesAdapter = null;\n        _this._initialized = false;\n        _this._tooltipTemplate = null;\n        _this._tooltipContent = null;\n        _this._defaultTooltips = null;\n        _this._uniqueTooltipId = 0;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._formatLabel = null;\n        _this._formatLabel_wrapped = null;\n        _this._alignLabel = null;\n        _this._alignLabel_wrapped = null;\n        _this._valueChanged = null;\n        _this._valueChanged_wrapped = null;\n        _this._actualMinimumValueChange = null;\n        _this._actualMinimumValueChange_wrapped = null;\n        _this._actualMaximumValueChange = null;\n        _this._actualMaximumValueChange_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._tooltipRef = _this._tooltipRef.bind(_this);\n        _this._activeTooltipElements = new Map();\n        _this._activeTooltips = new Map();\n        _this._currentTooltips = [];\n        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });\n        var container = null;\n        if (document) {\n            container = document.createElement(\"div\");\n            container.style.display = \"block\";\n            container.style.width = \"100%\";\n            container.style.height = \"100%\";\n        }\n        var root;\n        root = container;\n        _this._renderer = new ReactRenderer(root, document, true, LinearGaugeStylingDefaults);\n        _this._container = _this._renderer.getWrapper(container);\n        _this._implementation = _this.createImplementation();\n        //this._container = this._renderer.createElement(\"div\");\n        //this._renderer.rootWrapper.append(this._container);\n        //this._container.setStyleProperty(\"display\", \"block\");\n        //this._container.setStyleProperty(\"width\", \"100%\");\n        //this._container.setStyleProperty(\"height\", \"100%\");\n        _this._wrapper = _this._renderer;\n        //var root: any;\n        //root = this._container;\n        //if (this._container.nativeElement != null) {\n        //    root = this._container.nativeElement;\n        //}\n        var gauge = _this.i;\n        _this._gauge = gauge;\n        _this._rangesAdapter = new CollectionAdapter(_this.contentRanges, _this.i.ranges, _this.actualRanges, function (c) { return c.i; }, function (i) {\n            i._provideRenderer(_this._wrapper);\n            if (_this._container && _this._container.getNativeElement().parentElement) {\n                i._styling(_this._container.getNativeElement(), _this, _this);\n            }\n        }, function (i) { i._provideRenderer(null); });\n        gauge.provideContainer(_this._renderer);\n        _this._renderer.addSizeWatcher(function () {\n            _this._gauge.containerResized();\n        });\n        _this._initialized = true;\n        return _this;\n    }\n    Object.defineProperty(IgrLinearGauge.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this.containerResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.width = value;\n                this.containerResized();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrLinearGauge.prototype._updateContentChildren = function () {\n        this.contentRanges.length = 0;\n        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n        for (var i = 0; i < contentChildrenActual.length; i++) {\n            if ((XamLinearGraphRange.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {\n                this.contentRanges.push(contentChildrenActual[i]);\n            }\n        }\n        if (this._rangesAdapter !== null) {\n            this._rangesAdapter.notifyContentChanged();\n        }\n    };\n    Object.defineProperty(IgrLinearGauge.prototype, \"ranges\", {\n        /**\n         * A collection or manually added axes for the chart.\n        */\n        get: function () {\n            var _this = this;\n            if (this._ranges === null) {\n                var coll = new IgrLinearGraphRangeCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._rangesAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._ranges = coll;\n            }\n            return this._ranges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrLinearGauge.prototype._tooltipRef = function (t) {\n        //console.log(t);\n        if (t === null) {\n            return;\n        }\n        if (t.currentOwner &&\n            t.currentOwner.tooltipTemplate) {\n            t.template = t.currentOwner.tooltipTemplate;\n        }\n        this._activeTooltips.set(t.currentOwner, t);\n    };\n    IgrLinearGauge.prototype.render = function () {\n        // if (!this._childrenDiffer(this.props.children)) {\n        // \tlet div = React.createElement(\"div\", {\n        // \t\tref: (ref) => {\n        // \t\t\tthis._elRef = ref;\n        // \t\t},\n        // \t\tchildren: this.props.children\n        // \t});\n        // \treturn div;\n        // } else {\n        var children = this._contentChildrenManager.getChildren(this.props.children);\n        if (this._currentTooltips && this._currentTooltips.length > 0) {\n            for (var i = 0; i < this._currentTooltips.length; i++) {\n                var t = this._currentTooltips[i];\n                if (this._activeTooltipElements.has(t)) {\n                    children.push(this._activeTooltipElements.get(t));\n                }\n                else {\n                    if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n                        continue;\n                    }\n                    var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n                    var tEle = React.createElement(Tooltip, {\n                        ref: this._tooltipRef,\n                        key: this._currentTooltips[i].key,\n                        owner: this._currentTooltips[i]\n                    });\n                    var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n                    this._activeTooltipElements.set(t, portal);\n                    children.push(portal);\n                }\n            }\n        }\n        var div = React.createElement(\"div\", {\n            className: \"ig-linear-gauge igr-linear-gauge\",\n            ref: this._getMainRef,\n            children: children\n        });\n        return div;\n        //}\n    };\n    IgrLinearGauge.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    {\n                        this[p] = this.props[p];\n                    }\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this._container.getNativeElement());\n        this.containerResized();\n        this.initializeContent();\n    };\n    IgrLinearGauge.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrLinearGauge.prototype._getMainRef = function (div) {\n        this._elRef = div;\n    };\n    IgrLinearGauge.prototype.destroy = function () {\n        this._wrapper.rootWrapper.unlistenAll();\n        this._gauge.destroy();\n        this._wrapper.destroy();\n    };\n    IgrLinearGauge.prototype.createImplementation = function () {\n        return new XamLinearGauge();\n    };\n    IgrLinearGauge.prototype.initializeContent = function () {\n        this._styling(this._container.getNativeElement(), this);\n        if (this.actualRanges && this.actualRanges.length > 0) {\n            var currRange = this.actualRanges;\n            for (var i = 0; i < currRange.length; i++) {\n                currRange[i]._styling(this._container.getNativeElement(), this, this);\n            }\n        }\n        this._updateContentChildren();\n        this.i.containerResized();\n    };\n    IgrLinearGauge.prototype.componentWillUnmount = function () {\n        //this._grid.destroy();\n        this.destroy();\n    };\n    Object.defineProperty(IgrLinearGauge.prototype, \"tooltipTemplate\", {\n        get: function () {\n            return this._tooltipTemplate;\n        },\n        set: function (value) {\n            this._tooltipTemplate = value;\n            if (value == null) {\n                if (this._tooltipContent !== null) {\n                    this._tooltipContent.destroy();\n                    this._tooltipContent = null;\n                }\n            }\n            if (this._tooltipContent != null) {\n                this._tooltipContent.instance.template = this._tooltipTemplate;\n            }\n            else {\n                this._ensureTooltipCreated();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrLinearGauge.prototype.createWrapper = function (ele) {\n        var wrapper = new ReactWrapper(ele, this._renderer);\n        wrapper.updateToolTip = ele.updateToolTip;\n        wrapper.hideToolTip = ele.hideToolTip;\n        return wrapper;\n    };\n    IgrLinearGauge.prototype._ensureDefaultTooltip = function () {\n        if (this._defaultTooltips == null) {\n            return;\n        }\n        this._defaultTooltips[\"ensureDefaultTooltip\"](this);\n    };\n    IgrLinearGauge.prototype._onDefaultTooltipsReady = function (cr) {\n        this._ensureDefaultTooltip();\n    };\n    IgrLinearGauge.prototype._updateTooltipState = function () {\n        if (this._initialized) {\n            this.setState({ tooltips: this._currentTooltips });\n        }\n    };\n    IgrLinearGauge.prototype.createTooltip = function () {\n        // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n        // \treturn null;\n        // }\n        // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n        var wrapper = this._wrapper.createElement(\"div\");\n        var ele = wrapper.getNativeElement();\n        ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n        this._uniqueTooltipId++;\n        this._currentTooltips = this._currentTooltips.slice(0);\n        this._currentTooltips.push(ele);\n        //let element = React.createElement(Tooltip,  );\n        //let portal = ReactDOM.createPortal(element, ele);\n        var self = this;\n        ele.updateToolTip = function (c, isSubContent) {\n            if (c.externalObject) {\n                c = c.externalObject;\n            }\n            else {\n                var ext = new IgrDataContext();\n                ext._implementation = c;\n                c = ext;\n            }\n            if (!isSubContent) {\n                if (ele.parentElement != self._container.getNativeElement()) {\n                    if (ele.parentElement != null) {\n                        ele.parentElement.removeChild(ele);\n                    }\n                    self._container.getNativeElement().appendChild(ele);\n                }\n            }\n            else {\n                c.isSubContent = true;\n            }\n            if (self._activeTooltips.has(ele)) {\n                var t = self._activeTooltips.get(ele);\n                if (t.template === null &&\n                    ele.tooltipTemplate !== null) {\n                    t.template = ele.tooltipTemplate;\n                }\n                t.dataContext = c;\n            }\n            ele.style.display = \"block\";\n            return true;\n        };\n        ele.hideToolTip = function () {\n            ele.style.display = \"none\";\n        };\n        ele.style.display = \"none\";\n        this._updateTooltipState();\n        return ele;\n    };\n    IgrLinearGauge.prototype._ensureTooltipCreated = function () {\n        if (this.i.toolTip == null) {\n            var tooltip = this.createTooltip();\n            var ele = tooltip;\n            if (tooltip == null) {\n                return;\n            }\n            this._tooltipContent = tooltip;\n            //(<any>tooltip.instance).template = this._tooltipTemplate;\n            this.i.toolTip = this.createWrapper(tooltip);\n            if (this._activeTooltips.has(ele)) {\n                var tCont = this._activeTooltips.get(ele);\n                tCont.template = ele.tooltipTemplate;\n            }\n        }\n    };\n    Object.defineProperty(IgrLinearGauge.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        } /**\n                                     * @hidden\n                                     */,\n        enumerable: true,\n        configurable: true\n    });\n    IgrLinearGauge._createFromInternal = function (internal) {\n        if (!internal) {\n            return null;\n        }\n        if (!internal.$type) {\n            return null;\n        }\n        var name = internal.$type.name;\n        var externalName = \"Igr\" + name;\n        if (!TypeRegistrar.isRegistered(externalName)) {\n            return null;\n        }\n        return TypeRegistrar.create(externalName);\n    };\n    Object.defineProperty(IgrLinearGauge.prototype, \"animating\", {\n        /**\n     * Gets a value indicating whether the bullet graph is currently animating.\n    */\n        get: function () {\n            return this.i.a4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"transitionProgress\", {\n        /**\n         * Gets the transition progress of the animation when the control is animating.\n        */\n        get: function () {\n            return this.i.cz;\n        },\n        set: function (v) {\n            this.i.cz = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"orientation\", {\n        /**\n         * Gets or sets the orientation of the scale.\n        */\n        get: function () {\n            return this.i.as;\n        },\n        set: function (v) {\n            this.i.as = ensureEnum(LinearScaleOrientation_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"rangeBrushes\", {\n        /**\n         * Gets or sets a collection of brushes to be used as the palette for linear gauge ranges.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ah);\n        },\n        set: function (v) {\n            this.i.ah = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"rangeOutlines\", {\n        /**\n         * Gets or sets a collection of brushes to be used as the palette for linear gauge outlines.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.ai);\n        },\n        set: function (v) {\n            this.i.ai = toBrushCollection(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"minimumValue\", {\n        /**\n         * Gets or sets the minimum value of the scale.\n        */\n        get: function () {\n            return this.i.b4;\n        },\n        set: function (v) {\n            this.i.b4 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"actualMinimumValue\", {\n        /**\n         * Gets the resolved minimum value of the scale.\n        */\n        get: function () {\n            return this.i.bs;\n        },\n        set: function (v) {\n            this.i.bs = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"maximumValue\", {\n        /**\n         * Gets or sets the maximum value of the scale.\n        */\n        get: function () {\n            return this.i.b3;\n        },\n        set: function (v) {\n            this.i.b3 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"actualMaximumValue\", {\n        /**\n         * Gets the resolved maximum value of the scale.\n        */\n        get: function () {\n            return this.i.br;\n        },\n        set: function (v) {\n            this.i.br = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"value\", {\n        /**\n         * Gets or sets the value at which the needle is positioned.\n        */\n        get: function () {\n            return this.i.c0;\n        },\n        set: function (v) {\n            this.i.c0 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleShape\", {\n        /**\n         * Gets or sets the shape to use when rendering the needle from a number of options.\n        */\n        get: function () {\n            return this.i.ap;\n        },\n        set: function (v) {\n            this.i.ap = ensureEnum(LinearGraphNeedleShape_$type, v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleName\", {\n        /**\n         * Gets or sets the name used for needle.\n        */\n        get: function () {\n            return this.i.d5;\n        },\n        set: function (v) {\n            this.i.d5 = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"rangeInnerExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.ck;\n        },\n        set: function (v) {\n            this.i.ck = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"scaleInnerExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.co;\n        },\n        set: function (v) {\n            this.i.co = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"rangeOuterExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cl;\n        },\n        set: function (v) {\n            this.i.cl = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"scaleOuterExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cq;\n        },\n        set: function (v) {\n            this.i.cq = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cb;\n        },\n        set: function (v) {\n            this.i.cb = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cf;\n        },\n        set: function (v) {\n            this.i.cf = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerBaseWidth\", {\n        /**\n         * Gets or sets the width of the needle's inner base.\n        */\n        get: function () {\n            return this.i.ca;\n        },\n        set: function (v) {\n            this.i.ca = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterBaseWidth\", {\n        /**\n         * Gets or sets the width of the needle's outer base.\n        */\n        get: function () {\n            return this.i.ce;\n        },\n        set: function (v) {\n            this.i.ce = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerPointWidth\", {\n        /**\n         * Gets or sets the width of the needle's inner point.\n        */\n        get: function () {\n            return this.i.cd;\n        },\n        set: function (v) {\n            this.i.cd = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterPointWidth\", {\n        /**\n         * Gets or sets the width of the needle's outer point.\n        */\n        get: function () {\n            return this.i.ch;\n        },\n        set: function (v) {\n            this.i.ch = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleInnerPointExtent\", {\n        /**\n         * Gets or sets the extent of the needle's inner point.\n        */\n        get: function () {\n            return this.i.cc;\n        },\n        set: function (v) {\n            this.i.cc = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleOuterPointExtent\", {\n        /**\n         * Gets or sets the extent of the needle's outer point.\n        */\n        get: function () {\n            return this.i.cg;\n        },\n        set: function (v) {\n            this.i.cg = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"interval\", {\n        /**\n         * Gets or sets the interval to use for the scale.\n        */\n        get: function () {\n            return this.i.by;\n        },\n        set: function (v) {\n            this.i.by = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"ticksPostInitial\", {\n        /**\n         * A value to start adding tickmarks, added to the scale's MinimumValue.\n        */\n        get: function () {\n            return this.i.cv;\n        },\n        set: function (v) {\n            this.i.cv = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"ticksPreTerminal\", {\n        /**\n         * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.\n        */\n        get: function () {\n            return this.i.cw;\n        },\n        set: function (v) {\n            this.i.cw = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"labelInterval\", {\n        /**\n         * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.\n        */\n        get: function () {\n            return this.i.b0;\n        },\n        set: function (v) {\n            this.i.b0 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"labelExtent\", {\n        /**\n         * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.\n         * Values further from zero than 1 can be used to hide the labels of the linear gauge.\n        */\n        get: function () {\n            return this.i.bz;\n        },\n        set: function (v) {\n            this.i.bz = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"labelsPostInitial\", {\n        /**\n         * A value to start adding labels, added to the scale's MinimumValue.\n        */\n        get: function () {\n            return this.i.b1;\n        },\n        set: function (v) {\n            this.i.b1 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"labelsPreTerminal\", {\n        /**\n         * A value to stop adding labels, subtracted from the scale's MaximumValue.\n        */\n        get: function () {\n            return this.i.b2;\n        },\n        set: function (v) {\n            this.i.b2 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"minorTickCount\", {\n        /**\n         * Gets or sets the number of minor tickmarks to place between major tickmarks.\n        */\n        get: function () {\n            return this.i.b5;\n        },\n        set: function (v) {\n            this.i.b5 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"tickStartExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cx;\n        },\n        set: function (v) {\n            this.i.cx = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"tickEndExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cu;\n        },\n        set: function (v) {\n            this.i.cu = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"tickStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use when rendering ticks.\n        */\n        get: function () {\n            return this.i.cy;\n        },\n        set: function (v) {\n            this.i.cy = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"tickBrush\", {\n        /**\n         * Gets or sets the brush to use for the major tickmarks.\n        */\n        get: function () {\n            return brushToString(this.i.h1);\n        },\n        set: function (v) {\n            this.i.h1 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"fontBrush\", {\n        /**\n         * Gets or sets the brush to use for the label font.\n        */\n        get: function () {\n            return brushToString(this.i.hu);\n        },\n        set: function (v) {\n            this.i.hu = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleBreadth\", {\n        /**\n         * Gets or sets the needle breadth.\n        */\n        get: function () {\n            return this.i.b9;\n        },\n        set: function (v) {\n            this.i.b9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleBrush\", {\n        /**\n         * Gets or sets the brush to use for needle element.\n        */\n        get: function () {\n            return brushToString(this.i.hx);\n        },\n        set: function (v) {\n            this.i.hx = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleOutline\", {\n        /**\n         * Gets or sets the brush to use for the outline of needle element.\n        */\n        get: function () {\n            return brushToString(this.i.hy);\n        },\n        set: function (v) {\n            this.i.hy = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"needleStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use when rendering single actual value element.\n        */\n        get: function () {\n            return this.i.ci;\n        },\n        set: function (v) {\n            this.i.ci = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"minorTickStartExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.b7;\n        },\n        set: function (v) {\n            this.i.b7 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"minorTickEndExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.b6;\n        },\n        set: function (v) {\n            this.i.b6 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"minorTickStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use when rendering minor ticks.\n        */\n        get: function () {\n            return this.i.b8;\n        },\n        set: function (v) {\n            this.i.b8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"minorTickBrush\", {\n        /**\n         * Gets or sets the brush to use for the minor tickmarks.\n        */\n        get: function () {\n            return brushToString(this.i.hw);\n        },\n        set: function (v) {\n            this.i.hw = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"isScaleInverted\", {\n        /**\n         * Gets or sets a value indicating whether the scale is inverted.\n         * When the scale is inverted the direction in which the scale values increase is right to left.\n        */\n        get: function () {\n            return this.i.a8;\n        },\n        set: function (v) {\n            this.i.a8 = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"backingBrush\", {\n        /**\n         * Gets or sets the brush to use to fill the backing of the linear gauge.\n        */\n        get: function () {\n            return brushToString(this.i.hs);\n        },\n        set: function (v) {\n            this.i.hs = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"backingOutline\", {\n        /**\n         * Gets or sets the brush to use for the outline of the backing.\n        */\n        get: function () {\n            return brushToString(this.i.ht);\n        },\n        set: function (v) {\n            this.i.ht = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"backingStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness of the backing outline.\n        */\n        get: function () {\n            return this.i.bw;\n        },\n        set: function (v) {\n            this.i.bw = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"backingInnerExtent\", {\n        /**\n         * Gets or sets the inner extent of the linear gauge backing.\n        */\n        get: function () {\n            return this.i.bu;\n        },\n        set: function (v) {\n            this.i.bu = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"backingOuterExtent\", {\n        /**\n         * Gets or sets the outer extent of the linear gauge backing.\n        */\n        get: function () {\n            return this.i.bv;\n        },\n        set: function (v) {\n            this.i.bv = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"scaleStartExtent\", {\n        /**\n         * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cs;\n        },\n        set: function (v) {\n            this.i.cs = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"scaleEndExtent\", {\n        /**\n         * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.\n         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.\n        */\n        get: function () {\n            return this.i.cn;\n        },\n        set: function (v) {\n            this.i.cn = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"scaleBrush\", {\n        /**\n         * Gets or sets the brush to use to fill the scale of the linear gauge.\n        */\n        get: function () {\n            return brushToString(this.i.hz);\n        },\n        set: function (v) {\n            this.i.hz = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"scaleOutline\", {\n        /**\n         * Gets or sets the brush to use for the outline of the scale.\n        */\n        get: function () {\n            return brushToString(this.i.h0);\n        },\n        set: function (v) {\n            this.i.h0 = stringToBrush(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"scaleStrokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness of the scale outline.\n        */\n        get: function () {\n            return this.i.ct;\n        },\n        set: function (v) {\n            this.i.ct = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"isNeedleDraggingEnabled\", {\n        /**\n         * Gets or sets whether needle dragging is enabled or not.\n        */\n        get: function () {\n            return this.i.a7;\n        },\n        set: function (v) {\n            this.i.a7 = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"labelFormat\", {\n        /**\n         * Gets or sets the label composite format used when creating label values.\n        */\n        get: function () {\n            return this.i.dk;\n        },\n        set: function (v) {\n            this.i.dk = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"labelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the LabelFormat string.\n        */\n        get: function () {\n            return this.i.ag;\n        },\n        set: function (v) {\n            this.i.ag = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"transitionDuration\", {\n        /**\n         * Gets or sets the number of milliseconds over which changes to the linear gauge should be animated.\n        */\n        get: function () {\n            return this.i.c4;\n        },\n        set: function (v) {\n            this.i.c4 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"showToolTipTimeout\", {\n        /**\n         * Gets or sets the time in milliseconds that tooltip appearance is delayed with.\n        */\n        get: function () {\n            return this.i.c3;\n        },\n        set: function (v) {\n            this.i.c3 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"showToolTip\", {\n        /**\n         * Gets or sets a value indicating whether tooltips are enabled.\n        */\n        get: function () {\n            return this.i.be;\n        },\n        set: function (v) {\n            this.i.be = ensureBool(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"font\", {\n        /**\n         * Gets or sets the font.\n        */\n        get: function () {\n            return this.i.dd;\n        },\n        set: function (v) {\n            this.i.dd = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"pixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.cj;\n        },\n        set: function (v) {\n            this.i.cj = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"actualPixelScalingRatio\", {\n        /**\n         * Gets the actual pixel scaling ratio used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.bt;\n        },\n        set: function (v) {\n            this.i.bt = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrLinearGauge.prototype.findByName = function (name) {\n        if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {\n            return this.ranges.findByName(name);\n        }\n        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {\n            return arrayFindByName(this.labelFormatSpecifiers, name);\n        }\n        return null;\n    };\n    Object.defineProperty(IgrLinearGauge.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IgrLinearGauge.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrLinearGauge.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"LinearGauge\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    /**\n * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.\n\r\n* @param point  * The point for which to retrieve the associated value.\n*/\n    IgrLinearGauge.prototype.getValueForPoint = function (point) {\n        var iv = this.i.bx(toPoint(point));\n        return (iv);\n    };\n    IgrLinearGauge.prototype.needleContainsPoint = function (point, isFinger) {\n        var iv = this.i.needleContainsPoint(toPoint(point), isFinger);\n        return (iv);\n    };\n    /**\n     * Returns visuals as a serialized string.\n    \r\n    */\n    IgrLinearGauge.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.dc();\n        return (iv);\n    };\n    /**\n     * Use to force the linear gauge to finish any deferred work before printing or evaluating its visual.\n     * This should only be called if the visual of the linear gauge needs to be synchronously saved or evaluated.\n     * Calling this method too often will hinder the performance of the linear gauge.\n    \r\n    */\n    IgrLinearGauge.prototype.flush = function () {\n        this.i.e8();\n    };\n    /**\n     * Called by the UI framework to provide a UI container for rendering this control.\n    \r\n    * @param container  * The UI container element.\n    */\n    IgrLinearGauge.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    IgrLinearGauge.prototype.containerResized = function () {\n        this.i.containerResized();\n    };\n    IgrLinearGauge.prototype.styleUpdated = function () {\n        this.i.f2();\n    };\n    Object.defineProperty(IgrLinearGauge.prototype, \"formatLabel\", {\n        /**\n         * Event which is raised when a label of the the gauge is formatted.\n         * Function takes first argument evt and second argument ui.\n         * Use ui.owner to obtain reference to the gauge widget.\n         * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.\n         * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.\n         * Use ui.value to obtain the value on the the gauge scale associated with the label.\n         * Use ui.label to obtain the string value of the label.\n        */\n        get: function () {\n            return this._formatLabel;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._formatLabel_wrapped !== null) {\n                this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);\n                this._formatLabel_wrapped = null;\n                this._formatLabel = null;\n            }\n            this._formatLabel = ev;\n            this._formatLabel_wrapped = function (o, e) {\n                var outerArgs = new IgrFormatLinearGraphLabelEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeFormatLabel) {\n                    _this.beforeFormatLabel(_this, outerArgs);\n                }\n                if (_this._formatLabel) {\n                    _this._formatLabel(_this, outerArgs);\n                }\n            };\n            this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"alignLabel\", {\n        /**\n         * Event which is raised when a label of the linear gauge is aligned along the scale.\n         * Function takes first argument evt and second argument ui.\n         * Use ui.owner to obtain reference to the gauge widget.\n         * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.\n         * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.\n         * Use ui.value to obtain the value on the gauge scale associated with the label.\n         * Use ui.label to obtain the string value of the label.\n         * Use ui.width to obtain the width of the label.\n         * Use ui.height to obtain the height of the label.\n         * Use ui.offsetX to obtain the X offset of the label on the gauge scale.\n         * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.\n        */\n        get: function () {\n            return this._alignLabel;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._alignLabel_wrapped !== null) {\n                this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);\n                this._alignLabel_wrapped = null;\n                this._alignLabel = null;\n            }\n            this._alignLabel = ev;\n            this._alignLabel_wrapped = function (o, e) {\n                var outerArgs = new IgrAlignLinearGraphLabelEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeAlignLabel) {\n                    _this.beforeAlignLabel(_this, outerArgs);\n                }\n                if (_this._alignLabel) {\n                    _this._alignLabel(_this, outerArgs);\n                }\n            };\n            this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"valueChanged\", {\n        /**\n         * Occurs when the Value property changes.\n        */\n        get: function () {\n            return this._valueChanged;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._valueChanged_wrapped !== null) {\n                this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);\n                this._valueChanged_wrapped = null;\n                this._valueChanged = null;\n            }\n            this._valueChanged = ev;\n            this._valueChanged_wrapped = function (o, e) {\n                var outerArgs = new IgrDoubleValueChangedEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeValueChanged) {\n                    _this.beforeValueChanged(_this, outerArgs);\n                }\n                if (_this._valueChanged) {\n                    _this._valueChanged(_this, outerArgs);\n                }\n            };\n            this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"actualMinimumValueChange\", {\n        get: function () {\n            return this._actualMinimumValueChange;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._actualMinimumValueChange_wrapped !== null) {\n                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n                this._actualMinimumValueChange_wrapped = null;\n                this._actualMinimumValueChange = null;\n            }\n            this._actualMinimumValueChange = ev;\n            this._actualMinimumValueChange_wrapped = function (o, e) {\n                var ext = _this.actualMinimumValue;\n                if (_this.beforeActualMinimumValueChange) {\n                    _this.beforeActualMinimumValueChange(_this, ext);\n                }\n                if (_this._actualMinimumValueChange) {\n                    _this._actualMinimumValueChange(_this, ext);\n                }\n            };\n            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrLinearGauge.prototype, \"actualMaximumValueChange\", {\n        get: function () {\n            return this._actualMaximumValueChange;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._actualMaximumValueChange_wrapped !== null) {\n                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n                this._actualMaximumValueChange_wrapped = null;\n                this._actualMaximumValueChange = null;\n            }\n            this._actualMaximumValueChange = ev;\n            this._actualMaximumValueChange_wrapped = function (o, e) {\n                var ext = _this.actualMaximumValue;\n                if (_this.beforeActualMaximumValueChange) {\n                    _this.beforeActualMaximumValueChange(_this, ext);\n                }\n                if (_this._actualMaximumValueChange) {\n                    _this._actualMaximumValueChange(_this, ext);\n                }\n            };\n            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrLinearGauge;\n}(React.Component));\nexport { IgrLinearGauge };\n//# sourceMappingURL=igr-linear-gauge.js.map\n"]},"metadata":{},"sourceType":"module"}