{"ast":null,"code":"/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, typeCast, Array_$type, markType } from \"./type\";\nimport { List$1 } from \"./List$1\";\nimport { HashSet$1 } from \"./HashSet$1\";\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\nimport { Description } from \"./Description\";\n/**\r\n * @hidden\r\n */\n\nvar DescriptionTreeBuilder =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(DescriptionTreeBuilder, _super);\n\n  function DescriptionTreeBuilder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DescriptionTreeBuilder.b = function (item_) {\n    var propertyKey_ = null;\n    var ret_ = new List$1(String_$type, 0);\n    var seen_ = new HashSet$1(String_$type, 0);\n    var exclusions_ = {};\n    var seen = new Set();\n    var comp = item_;\n\n    while (comp = comp.prototype || Object.getPrototypeOf(comp)) {\n      if (comp == Base.prototype) {\n        break;\n      }\n\n      var props = Object.getOwnPropertyNames(comp.constructor.prototype);\n\n      for (var i = 0; i < props.length; i++) {\n        if (!seen.has(props[i])) {\n          seen.add(props[i]);\n          ret_.add(props[i]);\n        }\n      }\n    }\n\n    ;\n    return ret_;\n  };\n\n  DescriptionTreeBuilder.createTree = function (a, description_) {\n    var b = new DescriptionTreeNode();\n\n    if (description_ == null) {\n      return null;\n    }\n\n    var c = DescriptionTreeBuilder.b(description_);\n\n    for (var d = 0; d < c.count; d++) {\n      var key_ = c._inner[d];\n\n      if (key_.toLowerCase() != \"type\" && !description_.a(DescriptionTreeBuilder.c(key_))) {\n        continue;\n      }\n\n      var e = description_[key_];\n\n      if (typeCast(Description.$, e) !== null) {\n        var f = DescriptionTreeBuilder.createTree(a, e);\n        e = f;\n      }\n\n      if (typeCast(Array_$type, e) !== null) {\n        var g = e;\n        var h = new Array(g.length);\n\n        for (var i = 0; i < h.length; i++) {\n          var j = g[i];\n\n          if (typeCast(Description.$, j) !== null) {\n            var k = DescriptionTreeBuilder.createTree(a, j);\n            h[i] = k;\n          } else {\n            h[i] = j;\n          }\n        }\n\n        e = h;\n      }\n\n      if (key_.toLowerCase() == \"type\") {\n        b.h = e;\n      }\n\n      b.i(DescriptionTreeBuilder.c(key_), e);\n    }\n\n    if (b.b(\"type\")) {\n      var l = b.a(\"type\").b;\n      var m = b.e();\n\n      for (var n = 0; n < m.count; n++) {\n        var o = m._inner[n];\n        o.a = a.b(l, o.c);\n      }\n    }\n\n    return b;\n  };\n\n  DescriptionTreeBuilder.c = function (key_) {\n    if (key_ == null) {\n      return null;\n    }\n\n    return key_.substr(0, 1).toUpperCase() + key_.substr(1);\n  };\n\n  DescriptionTreeBuilder.$t = markType(DescriptionTreeBuilder, 'DescriptionTreeBuilder');\n  return DescriptionTreeBuilder;\n}(Base);\n\nexport { DescriptionTreeBuilder };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/DescriptionTreeBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Base, String_$type, typeCast, Array_$type, markType } from \"./type\";\r\nimport { List$1 } from \"./List$1\";\r\nimport { HashSet$1 } from \"./HashSet$1\";\r\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\r\nimport { Description } from \"./Description\";\r\n/**\r\n * @hidden\r\n */\r\nvar DescriptionTreeBuilder = /** @class */ /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(DescriptionTreeBuilder, _super);\r\n    function DescriptionTreeBuilder() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DescriptionTreeBuilder.b = function (item_) {\r\n        var propertyKey_ = null;\r\n        var ret_ = new List$1(String_$type, 0);\r\n        var seen_ = new HashSet$1(String_$type, 0);\r\n        var exclusions_ = {};\r\n        var seen = new Set();\r\n        var comp = item_;\r\n        while (comp = (comp.prototype || Object.getPrototypeOf(comp))) {\r\n            if (comp == Base.prototype) {\r\n                break;\r\n            }\r\n            var props = Object.getOwnPropertyNames(comp.constructor.prototype);\r\n            for (var i = 0; i < props.length; i++) {\r\n                if (!seen.has(props[i])) {\r\n                    seen.add(props[i]);\r\n                    ret_.add(props[i]);\r\n                }\r\n            }\r\n        }\r\n        ;\r\n        return ret_;\r\n    };\r\n    DescriptionTreeBuilder.createTree = function (a, description_) {\r\n        var b = new DescriptionTreeNode();\r\n        if (description_ == null) {\r\n            return null;\r\n        }\r\n        var c = DescriptionTreeBuilder.b(description_);\r\n        for (var d = 0; d < c.count; d++) {\r\n            var key_ = c._inner[d];\r\n            if (key_.toLowerCase() != \"type\" && !description_.a(DescriptionTreeBuilder.c(key_))) {\r\n                continue;\r\n            }\r\n            var e = description_[key_];\r\n            if (typeCast(Description.$, e) !== null) {\r\n                var f = DescriptionTreeBuilder.createTree(a, e);\r\n                e = f;\r\n            }\r\n            if (typeCast(Array_$type, e) !== null) {\r\n                var g = e;\r\n                var h = new Array(g.length);\r\n                for (var i = 0; i < h.length; i++) {\r\n                    var j = g[i];\r\n                    if (typeCast(Description.$, j) !== null) {\r\n                        var k = DescriptionTreeBuilder.createTree(a, j);\r\n                        h[i] = k;\r\n                    }\r\n                    else {\r\n                        h[i] = j;\r\n                    }\r\n                }\r\n                e = h;\r\n            }\r\n            if (key_.toLowerCase() == \"type\") {\r\n                b.h = e;\r\n            }\r\n            b.i(DescriptionTreeBuilder.c(key_), e);\r\n        }\r\n        if (b.b(\"type\")) {\r\n            var l = b.a(\"type\").b;\r\n            var m = b.e();\r\n            for (var n = 0; n < m.count; n++) {\r\n                var o = m._inner[n];\r\n                o.a = a.b(l, o.c);\r\n            }\r\n        }\r\n        return b;\r\n    };\r\n    DescriptionTreeBuilder.c = function (key_) {\r\n        if (key_ == null) {\r\n            return null;\r\n        }\r\n        return key_.substr(0, 1).toUpperCase() + key_.substr(1);\r\n    };\r\n    DescriptionTreeBuilder.$t = markType(DescriptionTreeBuilder, 'DescriptionTreeBuilder');\r\n    return DescriptionTreeBuilder;\r\n}(Base));\r\nexport { DescriptionTreeBuilder };\r\n//# sourceMappingURL=DescriptionTreeBuilder.js.map\r\n"]},"metadata":{},"sourceType":"module"}