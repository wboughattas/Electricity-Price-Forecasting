{"ast":null,"code":"/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\nimport * as tslib_1 from \"tslib\";\nimport { SegmentData } from \"./SegmentData\";\nimport { PointData } from \"./PointData\";\nimport { markType } from \"./type\";\n/**\r\n * @hidden\r\n */\n\nvar ArcSegmentData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(ArcSegmentData, _super);\n\n  function ArcSegmentData(a) {\n    var _rest = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      _rest[_i - 1] = arguments[_i];\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._point = null;\n    _this._isLargeArc = false;\n    _this._isCounterClockwise = false;\n    _this._sizeX = 0;\n    _this._sizeY = 0;\n    _this._rotationAngle = 0;\n    a = a == void 0 ? 0 : a;\n\n    switch (a) {\n      case 0:\n        {\n          _this.point = new PointData(NaN, NaN);\n          _this.isLargeArc = false;\n          _this.isCounterClockwise = true;\n          _this.rotationAngle = 0;\n        }\n        break;\n\n      case 1:\n        {\n          var c = _rest[0];\n          _this.point = PointData.b(c.e);\n          _this.isLargeArc = c.b;\n          _this.isCounterClockwise = c.d == 0;\n          _this.sizeX = c.f.width;\n          _this.sizeY = c.f.height;\n          _this.rotationAngle = c.c;\n        }\n        break;\n    }\n\n    return _this;\n  }\n\n  ArcSegmentData.prototype.get_type = function () {\n    return \"Arc\";\n  };\n\n  Object.defineProperty(ArcSegmentData.prototype, \"type\", {\n    get: function () {\n      return this.get_type();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ArcSegmentData.prototype, \"point\", {\n    get: function () {\n      return this._point;\n    },\n    set: function (a) {\n      this._point = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ArcSegmentData.prototype, \"isLargeArc\", {\n    get: function () {\n      return this._isLargeArc;\n    },\n    set: function (a) {\n      this._isLargeArc = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ArcSegmentData.prototype, \"isCounterClockwise\", {\n    get: function () {\n      return this._isCounterClockwise;\n    },\n    set: function (a) {\n      this._isCounterClockwise = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ArcSegmentData.prototype, \"sizeX\", {\n    get: function () {\n      return this._sizeX;\n    },\n    set: function (a) {\n      this._sizeX = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ArcSegmentData.prototype, \"sizeY\", {\n    get: function () {\n      return this._sizeY;\n    },\n    set: function (a) {\n      this._sizeY = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ArcSegmentData.prototype, \"rotationAngle\", {\n    get: function () {\n      return this._rotationAngle;\n    },\n    set: function (a) {\n      this._rotationAngle = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ArcSegmentData.prototype.a = function () {\n    return \"point: { x: \" + this.point.x + \", y: \" + this.point.y + \" }, isLargeArc: \" + (this.isLargeArc ? \"true\" : \"false\") + \", isCounterClockwise: \" + (this.isCounterClockwise ? \"true\" : \"false\") + \", sizeX: \" + this.sizeX + \", sizeY: \" + this.sizeY + \", rotationAngle: \" + this.rotationAngle;\n  };\n\n  ArcSegmentData.prototype.scaleByViewport = function (a) {\n    this.point = new PointData((this.point.x - a.left) / a.width, (this.point.y - a.top) / a.height);\n    this.sizeX = this.sizeX / a.width;\n    this.sizeY = this.sizeY / a.height;\n  };\n\n  ArcSegmentData.prototype.getPointsOverride = function (a, b) {\n    a.add(new PointData(this.point.x, this.point.y));\n  };\n\n  ArcSegmentData.$t = markType(ArcSegmentData, 'ArcSegmentData', SegmentData.$);\n  return ArcSegmentData;\n}(SegmentData);\n\nexport { ArcSegmentData };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/ArcSegmentData.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\r\nimport * as tslib_1 from \"tslib\";\r\nimport { SegmentData } from \"./SegmentData\";\r\nimport { PointData } from \"./PointData\";\r\nimport { markType } from \"./type\";\r\n/**\r\n * @hidden\r\n */\r\nvar ArcSegmentData = /** @class */ /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(ArcSegmentData, _super);\r\n    function ArcSegmentData(a) {\r\n        var _rest = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            _rest[_i - 1] = arguments[_i];\r\n        }\r\n        var _this = _super.call(this) || this;\r\n        _this._point = null;\r\n        _this._isLargeArc = false;\r\n        _this._isCounterClockwise = false;\r\n        _this._sizeX = 0;\r\n        _this._sizeY = 0;\r\n        _this._rotationAngle = 0;\r\n        a = (a == void 0) ? 0 : a;\r\n        switch (a) {\r\n            case 0:\r\n                {\r\n                    _this.point = new PointData(NaN, NaN);\r\n                    _this.isLargeArc = false;\r\n                    _this.isCounterClockwise = true;\r\n                    _this.rotationAngle = 0;\r\n                }\r\n                break;\r\n            case 1:\r\n                {\r\n                    var c = _rest[0];\r\n                    _this.point = PointData.b(c.e);\r\n                    _this.isLargeArc = c.b;\r\n                    _this.isCounterClockwise = c.d == 0;\r\n                    _this.sizeX = c.f.width;\r\n                    _this.sizeY = c.f.height;\r\n                    _this.rotationAngle = c.c;\r\n                }\r\n                break;\r\n        }\r\n        return _this;\r\n    }\r\n    ArcSegmentData.prototype.get_type = function () {\r\n        return \"Arc\";\r\n    };\r\n    Object.defineProperty(ArcSegmentData.prototype, \"type\", {\r\n        get: function () {\r\n            return this.get_type();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArcSegmentData.prototype, \"point\", {\r\n        get: function () {\r\n            return this._point;\r\n        },\r\n        set: function (a) {\r\n            this._point = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArcSegmentData.prototype, \"isLargeArc\", {\r\n        get: function () {\r\n            return this._isLargeArc;\r\n        },\r\n        set: function (a) {\r\n            this._isLargeArc = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArcSegmentData.prototype, \"isCounterClockwise\", {\r\n        get: function () {\r\n            return this._isCounterClockwise;\r\n        },\r\n        set: function (a) {\r\n            this._isCounterClockwise = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArcSegmentData.prototype, \"sizeX\", {\r\n        get: function () {\r\n            return this._sizeX;\r\n        },\r\n        set: function (a) {\r\n            this._sizeX = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArcSegmentData.prototype, \"sizeY\", {\r\n        get: function () {\r\n            return this._sizeY;\r\n        },\r\n        set: function (a) {\r\n            this._sizeY = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArcSegmentData.prototype, \"rotationAngle\", {\r\n        get: function () {\r\n            return this._rotationAngle;\r\n        },\r\n        set: function (a) {\r\n            this._rotationAngle = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ArcSegmentData.prototype.a = function () {\r\n        return \"point: { x: \" + this.point.x + \", y: \" + this.point.y + \" }, isLargeArc: \" + (this.isLargeArc ? \"true\" : \"false\") + \", isCounterClockwise: \" + (this.isCounterClockwise ? \"true\" : \"false\") + \", sizeX: \" + this.sizeX + \", sizeY: \" + this.sizeY + \", rotationAngle: \" + this.rotationAngle;\r\n    };\r\n    ArcSegmentData.prototype.scaleByViewport = function (a) {\r\n        this.point = new PointData((this.point.x - a.left) / a.width, (this.point.y - a.top) / a.height);\r\n        this.sizeX = this.sizeX / a.width;\r\n        this.sizeY = this.sizeY / a.height;\r\n    };\r\n    ArcSegmentData.prototype.getPointsOverride = function (a, b) {\r\n        a.add(new PointData(this.point.x, this.point.y));\r\n    };\r\n    ArcSegmentData.$t = markType(ArcSegmentData, 'ArcSegmentData', SegmentData.$);\r\n    return ArcSegmentData;\r\n}(SegmentData));\r\nexport { ArcSegmentData };\r\n//# sourceMappingURL=ArcSegmentData.js.map\r\n"]},"metadata":{},"sourceType":"module"}