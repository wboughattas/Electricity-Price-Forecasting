{"ast":null,"code":"/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, EnumUtil, markType } from \"./type\";\nimport { IDataSeriesAdapterRule_$type } from \"./IDataSeriesAdapterRule\";\nimport { List$1 } from \"./List$1\";\nimport { DataSeriesIntent_$type } from \"./DataSeriesIntent\";\nimport { DataSeries } from \"./DataSeries\";\nimport { DataSeriesMemberPathHint } from \"./DataSeriesMemberPathHint\";\n/**\r\n * @hidden\r\n */\n\nvar SimpleScatterSeriesRule =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(SimpleScatterSeriesRule, _super);\n\n  function SimpleScatterSeriesRule() {\n    var _this = _super.call(this) || this;\n\n    _this._priority = 0;\n    _this._monotonicCheckAmount = 0;\n    _this.priority = 9;\n    _this.monotonicCheckAmount = 10000;\n    return _this;\n  }\n\n  Object.defineProperty(SimpleScatterSeriesRule.prototype, \"priority\", {\n    get: function () {\n      return this._priority;\n    },\n    set: function (a) {\n      this._priority = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SimpleScatterSeriesRule.prototype, \"monotonicCheckAmount\", {\n    get: function () {\n      return this._monotonicCheckAmount;\n    },\n    set: function (a) {\n      this._monotonicCheckAmount = a;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SimpleScatterSeriesRule.prototype.evaluate = function (a) {\n    var b = a.analyzer.getAllNumericProperties();\n\n    if (b.length == 0) {\n      return;\n    }\n\n    var c = a.getCurrentDataSource().actualCount;\n    var d = new List$1(String_$type, 0);\n\n    for (var e = 0; e < b.length; e++) {\n      d.add(b[e]);\n    }\n\n    var f = this.c(d);\n    var g = this.d(d);\n    var h = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, 1));\n    var i = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, 2));\n\n    if (h.length > 0 && i.length > 0 && h.length == i.length) {\n      f.clear();\n      g.clear();\n      d.clear();\n\n      for (var j = 0; j < h.length; j++) {\n        f.add(h[j]);\n        g.add(i[j]);\n      }\n    }\n\n    var k = 0;\n\n    for (k = 0; k < Math.min(f.count, g.count); k++) {\n      var l = new Array(2);\n      l[0] = f._inner[k];\n      l[1] = g._inner[k];\n      var m = a.analyzer.getTitleString(null, l);\n      this.f(a, f._inner[k], g._inner[k], m);\n    }\n\n    for (; k < f.count; k++) {\n      d.add(f._inner[k]);\n    }\n\n    for (; k < g.count; k++) {\n      d.add(g._inner[k]);\n    }\n\n    for (var n = 0; n < d.count; n += 2) {\n      if (n + 1 >= d.count) {\n        continue;\n      }\n\n      var o = new Array(2);\n      o[0] = d._inner[n];\n      o[1] = d._inner[n + 1];\n      var p = a.analyzer.getTitleString(null, o);\n      this.f(a, d._inner[n], d._inner[n + 1], p);\n    }\n  };\n\n  SimpleScatterSeriesRule.prototype.d = function (a) {\n    var b = new List$1(String_$type, 0);\n\n    for (var c = 0; c < a.count; c++) {\n      if (this.b(a._inner[c])) {\n        b.add(a._inner[c]);\n        a.removeAt(c);\n        c--;\n      }\n    }\n\n    return b;\n  };\n\n  SimpleScatterSeriesRule.prototype.b = function (a) {\n    if (Base.equalsStatic(a.toLowerCase(), \"y\") || Base.equalsStatic(a.toLowerCase(), \"yvalue\")) {\n      return true;\n    }\n\n    return false;\n  };\n\n  SimpleScatterSeriesRule.prototype.c = function (a) {\n    var b = new List$1(String_$type, 0);\n\n    for (var c = 0; c < a.count; c++) {\n      if (this.a(a._inner[c])) {\n        b.add(a._inner[c]);\n        a.removeAt(c);\n        c--;\n      }\n    }\n\n    return b;\n  };\n\n  SimpleScatterSeriesRule.prototype.a = function (a) {\n    if (Base.equalsStatic(a.toLowerCase(), \"x\") || Base.equalsStatic(a.toLowerCase(), \"xvalue\")) {\n      return true;\n    }\n\n    return false;\n  };\n\n  SimpleScatterSeriesRule.prototype.f = function (a, b, c, d) {\n    var e = new DataSeries();\n    e.name = b + \"_\" + c;\n\n    if (d != null) {\n      e.title = d;\n    } else {\n      e.title = b + \" - \" + c;\n      e.title = a.analyzer.expandCamelCasedWords(e.title);\n    }\n\n    var f = new DataSeriesMemberPathHint();\n    f.intent = 1;\n    f.path = b;\n    var g = new DataSeriesMemberPathHint();\n    g.intent = 2;\n    g.path = c;\n    e.addMemberPathHint(f);\n    e.addMemberPathHint(g);\n    var h = a.getCurrentDataSource();\n    var i = h.actualCount;\n\n    if (i > this.monotonicCheckAmount) {\n      e.suggestedSeries = 11;\n    } else {\n      if (a.analyzer.isMonotonic(h, b, this.monotonicCheckAmount)) {\n        e.suggestedSeries = 12;\n      } else {\n        e.suggestedSeries = 11;\n      }\n    }\n\n    e.suggestedPrimaryAxis = 1;\n    e.suggestedSecondaryAxis = 1;\n    a.addDataSeries(e, this);\n  };\n\n  SimpleScatterSeriesRule.$t = markType(SimpleScatterSeriesRule, 'SimpleScatterSeriesRule', Base.$, [IDataSeriesAdapterRule_$type]);\n  return SimpleScatterSeriesRule;\n}(Base);\n\nexport { SimpleScatterSeriesRule };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/SimpleScatterSeriesRule.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\r\nhttps://www.infragistics.com/legal/license/igultimate-la\r\nhttps://www.infragistics.com/legal/license/igultimate-eula\r\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\r\n*/\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Base, String_$type, EnumUtil, markType } from \"./type\";\r\nimport { IDataSeriesAdapterRule_$type } from \"./IDataSeriesAdapterRule\";\r\nimport { List$1 } from \"./List$1\";\r\nimport { DataSeriesIntent_$type } from \"./DataSeriesIntent\";\r\nimport { DataSeries } from \"./DataSeries\";\r\nimport { DataSeriesMemberPathHint } from \"./DataSeriesMemberPathHint\";\r\n/**\r\n * @hidden\r\n */\r\nvar SimpleScatterSeriesRule = /** @class */ /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(SimpleScatterSeriesRule, _super);\r\n    function SimpleScatterSeriesRule() {\r\n        var _this = _super.call(this) || this;\r\n        _this._priority = 0;\r\n        _this._monotonicCheckAmount = 0;\r\n        _this.priority = 9;\r\n        _this.monotonicCheckAmount = 10000;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SimpleScatterSeriesRule.prototype, \"priority\", {\r\n        get: function () {\r\n            return this._priority;\r\n        },\r\n        set: function (a) {\r\n            this._priority = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SimpleScatterSeriesRule.prototype, \"monotonicCheckAmount\", {\r\n        get: function () {\r\n            return this._monotonicCheckAmount;\r\n        },\r\n        set: function (a) {\r\n            this._monotonicCheckAmount = a;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SimpleScatterSeriesRule.prototype.evaluate = function (a) {\r\n        var b = a.analyzer.getAllNumericProperties();\r\n        if (b.length == 0) {\r\n            return;\r\n        }\r\n        var c = a.getCurrentDataSource().actualCount;\r\n        var d = new List$1(String_$type, 0);\r\n        for (var e = 0; e < b.length; e++) {\r\n            d.add(b[e]);\r\n        }\r\n        var f = this.c(d);\r\n        var g = this.d(d);\r\n        var h = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, (1)));\r\n        var i = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, (2)));\r\n        if (h.length > 0 && i.length > 0 && h.length == i.length) {\r\n            f.clear();\r\n            g.clear();\r\n            d.clear();\r\n            for (var j = 0; j < h.length; j++) {\r\n                f.add(h[j]);\r\n                g.add(i[j]);\r\n            }\r\n        }\r\n        var k = 0;\r\n        for (k = 0; k < Math.min(f.count, g.count); k++) {\r\n            var l = new Array(2);\r\n            l[0] = f._inner[k];\r\n            l[1] = g._inner[k];\r\n            var m = a.analyzer.getTitleString(null, l);\r\n            this.f(a, f._inner[k], g._inner[k], m);\r\n        }\r\n        for (; k < f.count; k++) {\r\n            d.add(f._inner[k]);\r\n        }\r\n        for (; k < g.count; k++) {\r\n            d.add(g._inner[k]);\r\n        }\r\n        for (var n = 0; n < d.count; n += 2) {\r\n            if (n + 1 >= d.count) {\r\n                continue;\r\n            }\r\n            var o = new Array(2);\r\n            o[0] = d._inner[n];\r\n            o[1] = d._inner[n + 1];\r\n            var p = a.analyzer.getTitleString(null, o);\r\n            this.f(a, d._inner[n], d._inner[n + 1], p);\r\n        }\r\n    };\r\n    SimpleScatterSeriesRule.prototype.d = function (a) {\r\n        var b = new List$1(String_$type, 0);\r\n        for (var c = 0; c < a.count; c++) {\r\n            if (this.b(a._inner[c])) {\r\n                b.add(a._inner[c]);\r\n                a.removeAt(c);\r\n                c--;\r\n            }\r\n        }\r\n        return b;\r\n    };\r\n    SimpleScatterSeriesRule.prototype.b = function (a) {\r\n        if (Base.equalsStatic(a.toLowerCase(), \"y\") || Base.equalsStatic(a.toLowerCase(), \"yvalue\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    SimpleScatterSeriesRule.prototype.c = function (a) {\r\n        var b = new List$1(String_$type, 0);\r\n        for (var c = 0; c < a.count; c++) {\r\n            if (this.a(a._inner[c])) {\r\n                b.add(a._inner[c]);\r\n                a.removeAt(c);\r\n                c--;\r\n            }\r\n        }\r\n        return b;\r\n    };\r\n    SimpleScatterSeriesRule.prototype.a = function (a) {\r\n        if (Base.equalsStatic(a.toLowerCase(), \"x\") || Base.equalsStatic(a.toLowerCase(), \"xvalue\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    SimpleScatterSeriesRule.prototype.f = function (a, b, c, d) {\r\n        var e = new DataSeries();\r\n        e.name = b + \"_\" + c;\r\n        if (d != null) {\r\n            e.title = d;\r\n        }\r\n        else {\r\n            e.title = b + \" - \" + c;\r\n            e.title = a.analyzer.expandCamelCasedWords(e.title);\r\n        }\r\n        var f = new DataSeriesMemberPathHint();\r\n        f.intent = 1;\r\n        f.path = b;\r\n        var g = new DataSeriesMemberPathHint();\r\n        g.intent = 2;\r\n        g.path = c;\r\n        e.addMemberPathHint(f);\r\n        e.addMemberPathHint(g);\r\n        var h = a.getCurrentDataSource();\r\n        var i = h.actualCount;\r\n        if (i > this.monotonicCheckAmount) {\r\n            e.suggestedSeries = 11;\r\n        }\r\n        else {\r\n            if (a.analyzer.isMonotonic(h, b, this.monotonicCheckAmount)) {\r\n                e.suggestedSeries = 12;\r\n            }\r\n            else {\r\n                e.suggestedSeries = 11;\r\n            }\r\n        }\r\n        e.suggestedPrimaryAxis = 1;\r\n        e.suggestedSecondaryAxis = 1;\r\n        a.addDataSeries(e, this);\r\n    };\r\n    SimpleScatterSeriesRule.$t = markType(SimpleScatterSeriesRule, 'SimpleScatterSeriesRule', Base.$, [IDataSeriesAdapterRule_$type]);\r\n    return SimpleScatterSeriesRule;\r\n}(Base));\r\nexport { SimpleScatterSeriesRule };\r\n//# sourceMappingURL=SimpleScatterSeriesRule.js.map\r\n"]},"metadata":{},"sourceType":"module"}