{"ast":null,"code":"//\n// System.Xml.XmlTextReader\n//\n// Author:\n//   Jason Diamond (jason@injektilo.org)\n//   Adam Treat (manyoso@yahoo.com)\n//   Atsushi Enomoto  (ginga@kit.hi-ho.ne.jp)\n//\n// (C) 2001, 2002 Jason Diamond  http://injektilo.org/\n// Copyright (C) 2005-2006 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n//#define USE_NAME_BUFFER\nimport * as tslib_1 from \"tslib\"; //\n// Optimization TODOs:\n//\n//\t- support PushbackChar() which reverts one character read.\n//\t\t- ReadTextReader() should always keep one pushback buffer\n//\t\t  as pushback safety net.\n//\t- Replace (peek,read) * n -> read * n + pushback\n//\n\nimport { Base, EnumUtil, enumGetBox, markType } from \"./type\";\nimport { XmlTextReader_DtdInputState_$type } from \"./XmlTextReader_DtdInputState\";\nimport { arrayLast } from \"./arrayExtended\";\n/**\n * @hidden\n */\n\nvar XmlTextReader_DtdInputStateStack =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(XmlTextReader_DtdInputStateStack, _super);\n\n  function XmlTextReader_DtdInputStateStack() {\n    var _this = _super.call(this) || this;\n\n    _this.a = new Array();\n\n    _this.b(1);\n\n    return _this;\n  }\n\n  XmlTextReader_DtdInputStateStack.prototype.c = function () {\n    return EnumUtil.getEnumValue(XmlTextReader_DtdInputState_$type, arrayLast(this.a));\n  };\n\n  XmlTextReader_DtdInputStateStack.prototype.d = function () {\n    return EnumUtil.getEnumValue(XmlTextReader_DtdInputState_$type, this.a.pop());\n  };\n\n  XmlTextReader_DtdInputStateStack.prototype.b = function (a) {\n    this.a.push(enumGetBox(XmlTextReader_DtdInputState_$type, a));\n  };\n\n  XmlTextReader_DtdInputStateStack.$t = markType(XmlTextReader_DtdInputStateStack, 'XmlTextReader_DtdInputStateStack');\n  return XmlTextReader_DtdInputStateStack;\n}(Base);\n\nexport { XmlTextReader_DtdInputStateStack };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/XmlTextReader_DtdInputStateStack.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kCAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS,IAAT,EAAe,QAAf,EAAyB,UAAzB,EAA2C,QAA3C,QAA2D,QAA3D;AACA,SAAsC,iCAAtC,QAA+E,+BAA/E;AACA,SAAS,SAAT,QAA0B,iBAA1B;AAEA;;AAEG;;AACH,IAAA,gCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsD,EAAA,OAAA,CAAA,SAAA,CAAA,gCAAA,EAAA,MAAA;;AAGrD,WAAA,gCAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AADQ,IAAA,KAAA,CAAA,CAAA,GAAW,IAAI,KAAJ,EAAX;;AAGP,IAAA,KAAI,CAAC,CAAL,CAAO,CAAP;;;AACA;;AACD,EAAA,gCAAA,CAAA,SAAA,CAAA,CAAA,GAAA,YAAA;AACC,WAAO,QAAQ,CAAC,YAAT,CAAmD,iCAAnD,EAAsF,SAAS,CAAC,KAAK,CAAN,CAA/F,CAAP;AACA,GAFD;;AAGA,EAAA,gCAAA,CAAA,SAAA,CAAA,CAAA,GAAA,YAAA;AACC,WAAO,QAAQ,CAAC,YAAT,CAAmD,iCAAnD,EAAsF,KAAK,CAAL,CAAO,GAAP,EAAtF,CAAP;AACA,GAFD;;AAGA,EAAA,gCAAA,CAAA,SAAA,CAAA,CAAA,GAAA,UAAE,CAAF,EAAgC;AAC/B,SAAK,CAAL,CAAO,IAAP,CAAY,UAAU,CAA8B,iCAA9B,EAAiE,CAAjE,CAAtB;AACA,GAFD;;AAZO,EAAA,gCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,gCAAD,EAAmC,kCAAnC,CAAnB;AAeR,SAAA,gCAAA;AAAC,CAhBD,CAAsD,IAAtD,CAAA;;SAAa,gC","sourceRoot":"","sourcesContent":["//\n// System.Xml.XmlTextReader\n//\n// Author:\n//   Jason Diamond (jason@injektilo.org)\n//   Adam Treat (manyoso@yahoo.com)\n//   Atsushi Enomoto  (ginga@kit.hi-ho.ne.jp)\n//\n// (C) 2001, 2002 Jason Diamond  http://injektilo.org/\n// Copyright (C) 2005-2006 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n//#define USE_NAME_BUFFER\nimport * as tslib_1 from \"tslib\";\n//\n// Optimization TODOs:\n//\n//\t- support PushbackChar() which reverts one character read.\n//\t\t- ReadTextReader() should always keep one pushback buffer\n//\t\t  as pushback safety net.\n//\t- Replace (peek,read) * n -> read * n + pushback\n//\nimport { Base, EnumUtil, enumGetBox, markType } from \"./type\";\nimport { XmlTextReader_DtdInputState_$type } from \"./XmlTextReader_DtdInputState\";\nimport { arrayLast } from \"./arrayExtended\";\n/**\n * @hidden\n */\nvar XmlTextReader_DtdInputStateStack = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(XmlTextReader_DtdInputStateStack, _super);\n    function XmlTextReader_DtdInputStateStack() {\n        var _this = _super.call(this) || this;\n        _this.a = new Array();\n        _this.b(1);\n        return _this;\n    }\n    XmlTextReader_DtdInputStateStack.prototype.c = function () {\n        return EnumUtil.getEnumValue(XmlTextReader_DtdInputState_$type, arrayLast(this.a));\n    };\n    XmlTextReader_DtdInputStateStack.prototype.d = function () {\n        return EnumUtil.getEnumValue(XmlTextReader_DtdInputState_$type, this.a.pop());\n    };\n    XmlTextReader_DtdInputStateStack.prototype.b = function (a) {\n        this.a.push(enumGetBox(XmlTextReader_DtdInputState_$type, a));\n    };\n    XmlTextReader_DtdInputStateStack.$t = markType(XmlTextReader_DtdInputStateStack, 'XmlTextReader_DtdInputStateStack');\n    return XmlTextReader_DtdInputStateStack;\n}(Base));\nexport { XmlTextReader_DtdInputStateStack };\n//# sourceMappingURL=XmlTextReader_DtdInputStateStack.js.map\n"]},"metadata":{},"sourceType":"module"}