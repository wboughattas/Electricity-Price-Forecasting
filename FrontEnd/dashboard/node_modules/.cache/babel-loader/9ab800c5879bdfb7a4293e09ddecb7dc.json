{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { HorizontalStackedSeriesBaseDescriptionMetadata } from \"./HorizontalStackedSeriesBaseDescriptionMetadata\";\nimport { StackedLineSeriesDescription } from \"./StackedLineSeriesDescription\";\n/**\n * @hidden\n */\n\nvar StackedLineSeriesDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(StackedLineSeriesDescriptionMetadata, _super);\n\n  function StackedLineSeriesDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  StackedLineSeriesDescriptionMetadata.b = function (a) {\n    if (StackedLineSeriesDescriptionMetadata.a == null) {\n      StackedLineSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      StackedLineSeriesDescriptionMetadata.c(a, StackedLineSeriesDescriptionMetadata.a);\n    }\n  };\n\n  StackedLineSeriesDescriptionMetadata.c = function (a, b) {\n    HorizontalStackedSeriesBaseDescriptionMetadata.c(a, b);\n  };\n\n  StackedLineSeriesDescriptionMetadata.d = function (a) {\n    StackedLineSeriesDescriptionMetadata.b(a);\n    a.n(\"StackedLineSeries\", function () {\n      return new StackedLineSeriesDescription();\n    });\n    a.m(\"StackedLineSeries\", StackedLineSeriesDescriptionMetadata.a);\n  };\n\n  StackedLineSeriesDescriptionMetadata.$t = markType(StackedLineSeriesDescriptionMetadata, 'StackedLineSeriesDescriptionMetadata');\n  StackedLineSeriesDescriptionMetadata.a = null;\n  return StackedLineSeriesDescriptionMetadata;\n}(Base);\n\nexport { StackedLineSeriesDescriptionMetadata };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/StackedLineSeriesDescriptionMetadata.ts"],"names":[],"mappings":"AAAA;;;;;AAKE;;AAEF,SAAS,IAAT,EAAe,YAAf,EAAmC,QAAnC,QAAmD,QAAnD;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,8CAAT,QAA+D,kDAA/D;AACA,SAAS,4BAAT,QAA6C,gCAA7C;AAEA;;AAEG;;AACH,IAAA,oCAAA;AAAA;;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0D,EAAA,OAAA,CAAA,SAAA,CAAA,oCAAA,EAAA,MAAA;;AAA1D,WAAA,oCAAA,GAAA;;AAiBC;;AAde,EAAA,oCAAA,CAAA,CAAA,GAAf,UAAiB,CAAjB,EAA0C;AACzC,QAAI,oCAAoC,CAAC,CAArC,IAA0C,IAA9C,EAAoD;AACnD,MAAA,oCAAoC,CAAC,CAArC,GAAyC,IAAI,YAAJ,CAAiC,YAAjC,EAA+C,YAA/C,EAA6D,CAA7D,CAAzC;AACA,MAAA,oCAAoC,CAAC,CAArC,CAAuC,CAAvC,EAA0C,oCAAoC,CAAC,CAA/E;AACA;AACD,GALc;;AAMR,EAAA,oCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAoC,CAApC,EAAmE;AAClE,IAAA,8CAA8C,CAAC,CAA/C,CAAiD,CAAjD,EAAoD,CAApD;AACA,GAFM;;AAGA,EAAA,oCAAA,CAAA,CAAA,GAAP,UAAS,CAAT,EAAkC;AACjC,IAAA,oCAAoC,CAAC,CAArC,CAAuC,CAAvC;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,mBAAJ,EAAyB,YAAA;AAAM,aAAA,IAAA,4BAAA,EAAA;AAAkC,KAAjE;AACA,IAAA,CAAC,CAAC,CAAF,CAAI,mBAAJ,EAAyB,oCAAoC,CAAC,CAA9D;AACA,GAJM;;AAXA,EAAA,oCAAA,CAAA,EAAA,GAAW,QAAQ,CAAC,oCAAD,EAAuC,sCAAvC,CAAnB;AACQ,EAAA,oCAAA,CAAA,CAAA,GAAkC,IAAlC;AAehB,SAAA,oCAAA;AAAC,CAjBD,CAA0D,IAA1D,CAAA;;SAAa,oC","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { HorizontalStackedSeriesBaseDescriptionMetadata } from \"./HorizontalStackedSeriesBaseDescriptionMetadata\";\nimport { StackedLineSeriesDescription } from \"./StackedLineSeriesDescription\";\n/**\n * @hidden\n */\nvar StackedLineSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(StackedLineSeriesDescriptionMetadata, _super);\n    function StackedLineSeriesDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StackedLineSeriesDescriptionMetadata.b = function (a) {\n        if (StackedLineSeriesDescriptionMetadata.a == null) {\n            StackedLineSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            StackedLineSeriesDescriptionMetadata.c(a, StackedLineSeriesDescriptionMetadata.a);\n        }\n    };\n    StackedLineSeriesDescriptionMetadata.c = function (a, b) {\n        HorizontalStackedSeriesBaseDescriptionMetadata.c(a, b);\n    };\n    StackedLineSeriesDescriptionMetadata.d = function (a) {\n        StackedLineSeriesDescriptionMetadata.b(a);\n        a.n(\"StackedLineSeries\", function () { return new StackedLineSeriesDescription(); });\n        a.m(\"StackedLineSeries\", StackedLineSeriesDescriptionMetadata.a);\n    };\n    StackedLineSeriesDescriptionMetadata.$t = markType(StackedLineSeriesDescriptionMetadata, 'StackedLineSeriesDescriptionMetadata');\n    StackedLineSeriesDescriptionMetadata.a = null;\n    return StackedLineSeriesDescriptionMetadata;\n}(Base));\nexport { StackedLineSeriesDescriptionMetadata };\n//# sourceMappingURL=StackedLineSeriesDescriptionMetadata.js.map\n"]},"metadata":{},"sourceType":"module"}