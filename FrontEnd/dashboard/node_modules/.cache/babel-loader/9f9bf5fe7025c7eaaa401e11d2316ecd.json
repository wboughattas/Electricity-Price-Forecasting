{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, typeCast, String_$type, markType } from \"./type\";\nimport { DiffApplyInfo } from \"./DiffApplyInfo\";\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\nimport { List$1 } from \"./List$1\";\nimport { DescriptionTreeAction } from \"./DescriptionTreeAction\";\nimport { DescriptionPropertyValue } from \"./DescriptionPropertyValue\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DescriptionTreeReconciler_TreeModeData } from \"./DescriptionTreeReconciler_TreeModeData\";\n/**\n * @hidden\n */\n\nvar DescriptionTreeReconciler =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(DescriptionTreeReconciler, _super);\n\n  function DescriptionTreeReconciler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DescriptionTreeReconciler.a = function (a, b) {\n    var c = new DiffApplyInfo();\n\n    for (var d = 0; d < b.count; d++) {\n      var e = b._inner[d];\n\n      switch (e.a) {\n        case 0:\n          if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n            var f = e.g.f;\n            c.a.add_1(f);\n          }\n\n          e.b.l(e.i, e.f);\n\n          if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n            var g = e.f.f;\n\n            if (c.a.contains(g)) {\n              c.a.remove(g);\n            }\n\n            c.c.add(e);\n          }\n\n          break;\n\n        case 1:\n          if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n            var h = e.g.f;\n            c.a.add_1(h);\n          }\n\n          e.b.k(e.i);\n          break;\n\n        case 3:\n          {\n            var i = e.b.a(e.i).b;\n            var j = i[e.e];\n\n            if (typeCast(DescriptionTreeNode.$, j) !== null) {\n              var k = j.f;\n              c.a.add_1(k);\n            }\n\n            i[e.e] = e.f;\n\n            if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n              var l = e.f.f;\n\n              if (c.a.contains(l)) {\n                c.a.remove(l);\n              }\n\n              c.b.add(e);\n            }\n          }\n          break;\n\n        case 4:\n          {\n            var m = e.b.a(e.i).b;\n            var n = m[e.e];\n\n            if (typeCast(DescriptionTreeNode.$, n) !== null) {\n              var o = n.f;\n              c.a.add_1(o);\n            }\n\n            var p = new Array(m.length - 1);\n            var q = 0;\n\n            for (var r = 0; r < m.length; r++) {\n              if (r != e.e) {\n                p[q] = m[r];\n                q++;\n              }\n            }\n\n            e.b.l(e.i, p);\n          }\n          break;\n\n        case 2:\n          {\n            var s = e.b.a(e.i).b;\n            var t = new Array(s.length + 1);\n            var u = 0;\n\n            for (var v = 0; v < t.length; v++) {\n              if (v == e.d) {\n                t[v] = e.f;\n              } else {\n                t[v] = s[u];\n                u++;\n              }\n            }\n\n            e.b.l(e.i, t);\n\n            if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n              var w = e.f.f;\n\n              if (c.a.contains(w)) {\n                c.a.remove(w);\n              }\n\n              c.b.add(e);\n            }\n          }\n          break;\n\n        case 5:\n          {\n            var x = e.b.a(e.i).b;\n\n            for (var y = 0; y < x.length; y++) {\n              var z = x[y];\n\n              if (typeCast(DescriptionTreeNode.$, z) !== null) {\n                var aa = z.f;\n                c.a.add_1(aa);\n              }\n            }\n\n            e.b.l(e.i, []);\n          }\n          break;\n      }\n    }\n\n    return c;\n  };\n\n  DescriptionTreeReconciler.c = function (a, b, c) {\n    var d = new List$1(DescriptionTreeAction.$, 0);\n\n    if (a == null && b == null) {\n      return d;\n    }\n\n    if (a != null && b == null) {\n      var e = new DescriptionTreeAction();\n      e.a = 4;\n      e.e = 0;\n      e.g = a;\n      e.c = null;\n      e.i = null;\n      d.add(e);\n      return d;\n    }\n\n    if (a == null && b != null) {\n      var f = new DescriptionTreeAction();\n      f.a = 2;\n      f.e = 0;\n      f.f = b;\n      f.c = null;\n      f.i = null;\n      d.add(f);\n      return d;\n    }\n\n    if (b.h != a.h) {\n      var g = new DescriptionTreeAction();\n      g.a = 3;\n      g.e = 0;\n      g.g = a;\n      g.f = b;\n      g.c = null;\n      g.i = null;\n      d.add(g);\n      return d;\n    }\n\n    DescriptionTreeReconciler.g(d, a, b, c);\n    return d;\n  };\n\n  DescriptionTreeReconciler.g = function (a, b, c, d) {\n    c.f = b.f;\n    var e = DescriptionTreeReconciler.e(b);\n    var f = DescriptionTreeReconciler.e(c);\n    var g = new List$1(DescriptionPropertyValue.$, 0);\n    var h = new List$1(DescriptionPropertyValue.$, 0);\n    var i = new List$1(DescriptionPropertyValue.$, 0);\n\n    for (var j = 0; j < e.count; j++) {\n      var k = e._inner[j];\n\n      if (c.b(k.c)) {\n        if (!Base.equalsStatic(k, c.a(k.c))) {\n          var l = c.a(k.c);\n\n          if (typeCast(DescriptionTreeNode.$, k.b) !== null && typeCast(DescriptionTreeNode.$, l.b) !== null) {\n            var m = k.b;\n            var n = l.b;\n\n            if (m.h == n.h) {\n              if (!m.b(\"Name\") && !n.b(\"Name\") || m.b(\"Name\") && n.b(\"Name\") && m.a(\"Name\").b == n.a(\"Name\").b) {\n                DescriptionTreeReconciler.g(a, m, n, d);\n              } else {\n                i.add(c.a(k.c));\n              }\n            } else {\n              i.add(c.a(k.c));\n            }\n          } else {\n            i.add(c.a(k.c));\n          }\n        }\n      } else {\n        if (!d) {\n          g.add(k);\n        }\n      }\n    }\n\n    for (var o = 0; o < f.count; o++) {\n      var p = f._inner[o];\n\n      if (!b.b(p.c)) {\n        h.add(p);\n      }\n    }\n\n    for (var q = 0; q < g.count; q++) {\n      var r = g._inner[q];\n      var s = new DescriptionTreeAction();\n      s.b = b;\n      s.a = 1;\n      s.i = r.c;\n      s.c = r.a;\n      s.g = r.b;\n      a.add(s);\n    }\n\n    for (var t = 0; t < h.count; t++) {\n      var u = h._inner[t];\n      var v = new DescriptionTreeAction();\n      v.b = b;\n      v.a = 0;\n      v.i = u.c;\n      v.c = u.a;\n      v.f = u.b;\n      v.g = null;\n      a.add(v);\n    }\n\n    for (var w = 0; w < i.count; w++) {\n      var x = i._inner[w];\n      var y = b.a(x.c).b;\n      var z = x.b;\n\n      if (!Base.equalsStatic(z, y)) {\n        var aa = new DescriptionTreeAction();\n        aa.b = b;\n        aa.a = 0;\n        aa.i = x.c;\n        aa.c = x.a;\n        aa.f = x.b;\n        aa.g = b.a(x.c).b;\n        a.add(aa);\n      }\n    }\n\n    var ab = DescriptionTreeReconciler.d(b);\n    var ac = DescriptionTreeReconciler.d(c);\n    var ad = new List$1(DescriptionPropertyValue.$, 0);\n    var ae = new List$1(DescriptionPropertyValue.$, 0);\n    var af = new List$1(DescriptionPropertyValue.$, 0);\n\n    for (var ag = 0; ag < ab.count; ag++) {\n      var ah = ab._inner[ag];\n\n      if (c.b(ah.c)) {\n        if (!DescriptionTreeReconciler.b(ah.b, c.a(ah.c).b)) {\n          af.add(c.a(ah.c));\n        } else {\n          var ai = ah.b;\n          var aj = c.a(ah.c).b;\n\n          for (var ak = 0; ak < ai.length; ak++) {\n            var al = ai[ak];\n            var am = aj[ak];\n\n            if (typeCast(DescriptionTreeNode.$, al) !== null && typeCast(DescriptionTreeNode.$, am) !== null) {\n              var an = al;\n              var ao = am;\n\n              if (an.h == ao.h) {\n                DescriptionTreeReconciler.g(a, an, ao, d);\n              } else {\n                var ap = new DescriptionTreeAction();\n                ap.i = ah.c;\n                ap.c = ah.a;\n                ap.b = b;\n                ap.a = 3;\n                ap.e = ak;\n                ap.d = ak;\n                ap.g = an;\n                ap.f = ao;\n                a.add(ap);\n              }\n            } else {\n              if (!Base.equalsStatic(al, am)) {\n                var aq = new DescriptionTreeAction();\n                aq.i = ah.c;\n                aq.c = ah.a;\n                aq.b = b;\n                aq.a = 3;\n                aq.e = ak;\n                aq.d = ak;\n                aq.g = al;\n                aq.f = am;\n                a.add(aq);\n              }\n            }\n          }\n        }\n      } else {\n        if (!d) {\n          ad.add(ah);\n        }\n      }\n    }\n\n    for (var ar = 0; ar < ac.count; ar++) {\n      var as = ac._inner[ar];\n\n      if (!b.b(as.c)) {\n        ae.add(as);\n      }\n    }\n\n    for (var at = 0; at < ad.count; at++) {\n      var au = ad._inner[at];\n      var av = new DescriptionTreeAction();\n      av.b = b;\n      av.i = au.c;\n      av.c = au.a;\n      av.a = 5;\n      av.g = au.b;\n      a.add(av);\n    }\n\n    for (var aw = 0; aw < ae.count; aw++) {\n      var ax = ae._inner[aw];\n      var ay = new DescriptionTreeAction();\n      ay.b = b;\n      ay.i = ax.c;\n      ay.c = ax.a;\n      ay.a = 0;\n      ay.g = null;\n      ay.f = ax.b;\n      a.add(ay);\n    }\n\n    for (var az = 0; az < af.count; az++) {\n      DescriptionTreeReconciler.h(a, b, c, b.a(af._inner[az].c), af._inner[az], d);\n    }\n  };\n\n  DescriptionTreeReconciler.f = function (a) {\n    if (a == null) {\n      return \"UNKOWN\";\n    }\n\n    if (!a.b(\"Type\")) {\n      return \"UNKOWN\";\n    }\n\n    return a.a(\"Type\").b;\n  };\n\n  DescriptionTreeReconciler.h = function (a, b, c, d, e, f) {\n    var g = false;\n    var h = d.b;\n    var i = e.b;\n\n    if (h.length > 0) {\n      if (typeCast(DescriptionTreeNode.$, h[0]) !== null) {\n        var j = h[0];\n\n        if (j.b(\"Name\") && j.a(\"Name\") != null) {\n          g = true;\n        }\n\n        if (j.b(\"RefType\") && j.a(\"RefType\").b == \"uuid\") {\n          g = true;\n        }\n      }\n    }\n\n    if (i.length > 0) {\n      if (typeCast(DescriptionTreeNode.$, i[0]) !== null) {\n        var k = i[0];\n\n        if (k.b(\"Name\") && k.a(\"Name\") != null) {\n          g = true;\n        }\n\n        if (k.b(\"RefType\") && k.a(\"RefType\").b == \"uuid\") {\n          g = true;\n        }\n      }\n    }\n\n    if (g) {\n      var l = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n      var m = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n      var n = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n      var o = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n      var p = 0;\n\n      for (var q = 0; q < h.length; q++) {\n        var r = new DescriptionTreeReconciler_TreeModeData();\n        r.a = h[q];\n        r.d = q;\n        r.f = r.a.b(\"Name\") ? r.a.a(\"Name\").b : r.a.b(\"RefType\") ? r.a.a(\"Value\").b : null;\n\n        if (r.f == null) {\n          r.f = \"BADKEY_\" + p.toString();\n          p++;\n        }\n\n        m.add(r);\n        l.addItem(r.f, r);\n      }\n\n      for (var s = 0; s < i.length; s++) {\n        var t = new DescriptionTreeReconciler_TreeModeData();\n        t.a = i[s];\n        t.d = s;\n        t.f = t.a.b(\"Name\") ? t.a.a(\"Name\").b : t.a.b(\"RefType\") ? t.a.a(\"Value\").b : null;\n\n        if (t.f == null) {\n          t.f = \"BADKEY_\" + p.toString();\n          p++;\n        }\n\n        o.add(t);\n        n.addItem(t.f, t);\n      }\n\n      for (var u = 0; u < m.count; u++) {\n        var v = m._inner[u];\n\n        if (!n.containsKey(v.f) || n.containsKey(v.f) && DescriptionTreeReconciler.f(v.a) != DescriptionTreeReconciler.f(n.item(v.f).a)) {\n          v.c = true;\n        }\n      }\n\n      for (var w = 0; w < o.count; w++) {\n        var x = o._inner[w];\n\n        if (!l.containsKey(x.f) || l.containsKey(x.f) && DescriptionTreeReconciler.f(x.a) != DescriptionTreeReconciler.f(l.item(x.f).a)) {\n          x.b = true;\n        } else {\n          l.item(x.f).e = w;\n        }\n      }\n\n      for (var y = 0; y < m.count; y++) {\n        var z = m._inner[y];\n\n        if (z.c) {\n          var aa = new DescriptionTreeAction();\n          aa.i = e.c;\n          aa.b = b;\n          aa.c = e.a;\n          aa.e = z.d;\n          aa.a = 4;\n          aa.g = z.a;\n          a.add(aa);\n\n          for (var ab = y + 1; ab < m.count; ab++) {\n            var ac = m._inner[ab];\n            ac.d--;\n          }\n        }\n      }\n\n      for (var ad = 0; ad < o.count; ad++) {\n        var ae = o._inner[ad];\n\n        if (ae.b) {\n          var af = new DescriptionTreeAction();\n          af.i = e.c;\n          af.b = b;\n          af.c = e.a;\n          af.d = ad;\n          af.a = 2;\n          af.f = i[ad];\n          a.add(af);\n\n          for (var ag = 0; ag < m.count; ag++) {\n            var ah = m._inner[ag];\n\n            if (!ah.c && ah.d >= ad) {\n              ah.d++;\n            }\n          }\n        } else {\n          var ai = l.item(ae.f);\n\n          if (ai.d == ai.e) {\n            DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n            continue;\n          }\n\n          var aj = new DescriptionTreeAction();\n          aj.i = e.c;\n          aj.b = b;\n          aj.c = e.a;\n          aj.e = ai.d;\n          aj.a = 4;\n          aj.g = ai.a;\n          a.add(aj);\n\n          for (var ak = 0; ak < m.count; ak++) {\n            var al = m._inner[ak];\n\n            if (!al.c && al.a != ai.a && al.d >= ai.d) {\n              al.d--;\n            }\n          }\n\n          aj = new DescriptionTreeAction();\n          aj.i = e.c;\n          aj.b = b;\n          aj.c = e.a;\n          aj.d = ai.e;\n          aj.a = 2;\n          aj.f = ai.a;\n          a.add(aj);\n          ai.d = ai.e;\n\n          for (var am = 0; am < m.count; am++) {\n            var an = m._inner[am];\n\n            if (!an.c && an.a != ai.a && an.d >= ai.d) {\n              an.d++;\n            }\n          }\n\n          DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n        }\n      }\n    } else {\n      var ao = Math.max(h.length, i.length);\n\n      for (var ap = 0; ap < ao; ap++) {\n        if (ap >= h.length) {\n          var aq = new DescriptionTreeAction();\n          aq.i = e.c;\n          aq.b = b;\n          aq.c = e.a;\n          aq.d = ap;\n          aq.a = 2;\n          aq.f = i[ap];\n          a.add(aq);\n        } else if (ap >= i.length) {\n          var ar = new DescriptionTreeAction();\n          ar.i = e.c;\n          ar.b = b;\n          ar.c = e.a;\n          ar.e = i.length;\n          ar.a = 4;\n          ar.g = h[ap];\n          a.add(ar);\n        } else {\n          var as = h[ap];\n          var at = i[ap];\n\n          if (typeCast(DescriptionTreeNode.$, as) !== null && typeCast(DescriptionTreeNode.$, at) !== null) {\n            var au = as;\n            var av = at;\n\n            if (au.h == av.h) {\n              DescriptionTreeReconciler.g(a, au, av, f);\n            } else {\n              var aw = new DescriptionTreeAction();\n              aw.i = e.c;\n              aw.b = b;\n              aw.c = e.a;\n              aw.e = ap;\n              aw.a = 3;\n              aw.g = h[ap];\n              aw.f = i[ap];\n              a.add(aw);\n            }\n          } else {\n            if (!Base.equalsStatic(as, at)) {\n              var ax = new DescriptionTreeAction();\n              ax.i = e.c;\n              ax.b = b;\n              ax.c = e.a;\n              ax.e = ap;\n              ax.a = 3;\n              ax.g = h[ap];\n              ax.f = i[ap];\n              a.add(ax);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DescriptionTreeReconciler.b = function (a, b) {\n    var c = a;\n    var d = b;\n\n    if (c.length != d.length) {\n      return false;\n    }\n\n    for (var e = 0; e < c.length; e++) {\n      var f = c[e];\n      var g = d[e];\n\n      if (typeCast(DescriptionTreeNode.$, f) !== null && !(typeCast(DescriptionTreeNode.$, g) !== null)) {\n        return false;\n      }\n\n      if (!(typeCast(DescriptionTreeNode.$, f) !== null) && typeCast(DescriptionTreeNode.$, g) !== null) {\n        return false;\n      }\n\n      if (typeCast(DescriptionTreeNode.$, f) !== null) {\n        var h = f;\n        var i = g;\n\n        if (h.h != i.h) {\n          return false;\n        }\n\n        var j = h.b(\"Name\") ? h.a(\"Name\").b : null;\n        var k = i.b(\"Name\") ? i.a(\"Name\").b : null;\n\n        if (!Base.equalsStatic(j, k)) {\n          return false;\n        }\n      } else {\n        if (!Base.equalsStatic(f, g)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  DescriptionTreeReconciler.e = function (a) {\n    var b = new List$1(DescriptionPropertyValue.$, 0);\n    var c = a.e();\n\n    for (var d = 0; d < c.count; d++) {\n      var e = c._inner[d];\n\n      if (e.a != null && e.a.knownType != 10 && e.a.knownType != 9) {\n        b.add(e);\n      }\n    }\n\n    return b;\n  };\n\n  DescriptionTreeReconciler.d = function (a) {\n    var b = new List$1(DescriptionPropertyValue.$, 0);\n    var c = a.e();\n\n    for (var d = 0; d < c.count; d++) {\n      var e = c._inner[d];\n\n      if (e.a != null && (e.a.knownType == 10 || e.a.knownType == 9)) {\n        b.add(e);\n      }\n    }\n\n    return b;\n  };\n\n  DescriptionTreeReconciler.$t = markType(DescriptionTreeReconciler, 'DescriptionTreeReconciler');\n  return DescriptionTreeReconciler;\n}(Base);\n\nexport { DescriptionTreeReconciler };","map":{"version":3,"sources":["../../../../src/igniteui-core/lib/DescriptionTreeReconciler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport * as tslib_1 from \"tslib\";\nimport { Base, typeCast, String_$type, markType } from \"./type\";\nimport { DiffApplyInfo } from \"./DiffApplyInfo\";\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\nimport { List$1 } from \"./List$1\";\nimport { DescriptionTreeAction } from \"./DescriptionTreeAction\";\nimport { DescriptionPropertyValue } from \"./DescriptionPropertyValue\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DescriptionTreeReconciler_TreeModeData } from \"./DescriptionTreeReconciler_TreeModeData\";\n/**\n * @hidden\n */\nvar DescriptionTreeReconciler = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DescriptionTreeReconciler, _super);\n    function DescriptionTreeReconciler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DescriptionTreeReconciler.a = function (a, b) {\n        var c = new DiffApplyInfo();\n        for (var d = 0; d < b.count; d++) {\n            var e = b._inner[d];\n            switch (e.a) {\n                case 0:\n                    if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                        var f = e.g.f;\n                        c.a.add_1(f);\n                    }\n                    e.b.l(e.i, e.f);\n                    if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n                        var g = e.f.f;\n                        if (c.a.contains(g)) {\n                            c.a.remove(g);\n                        }\n                        c.c.add(e);\n                    }\n                    break;\n                case 1:\n                    if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                        var h = e.g.f;\n                        c.a.add_1(h);\n                    }\n                    e.b.k(e.i);\n                    break;\n                case 3:\n                    {\n                        var i = e.b.a(e.i).b;\n                        var j = i[e.e];\n                        if (typeCast(DescriptionTreeNode.$, j) !== null) {\n                            var k = j.f;\n                            c.a.add_1(k);\n                        }\n                        i[e.e] = e.f;\n                        if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n                            var l = e.f.f;\n                            if (c.a.contains(l)) {\n                                c.a.remove(l);\n                            }\n                            c.b.add(e);\n                        }\n                    }\n                    break;\n                case 4:\n                    {\n                        var m = e.b.a(e.i).b;\n                        var n = m[e.e];\n                        if (typeCast(DescriptionTreeNode.$, n) !== null) {\n                            var o = n.f;\n                            c.a.add_1(o);\n                        }\n                        var p = new Array(m.length - 1);\n                        var q = 0;\n                        for (var r = 0; r < m.length; r++) {\n                            if (r != e.e) {\n                                p[q] = m[r];\n                                q++;\n                            }\n                        }\n                        e.b.l(e.i, p);\n                    }\n                    break;\n                case 2:\n                    {\n                        var s = e.b.a(e.i).b;\n                        var t = new Array(s.length + 1);\n                        var u = 0;\n                        for (var v = 0; v < t.length; v++) {\n                            if (v == e.d) {\n                                t[v] = e.f;\n                            }\n                            else {\n                                t[v] = s[u];\n                                u++;\n                            }\n                        }\n                        e.b.l(e.i, t);\n                        if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n                            var w = e.f.f;\n                            if (c.a.contains(w)) {\n                                c.a.remove(w);\n                            }\n                            c.b.add(e);\n                        }\n                    }\n                    break;\n                case 5:\n                    {\n                        var x = e.b.a(e.i).b;\n                        for (var y = 0; y < x.length; y++) {\n                            var z = x[y];\n                            if (typeCast(DescriptionTreeNode.$, z) !== null) {\n                                var aa = z.f;\n                                c.a.add_1(aa);\n                            }\n                        }\n                        e.b.l(e.i, []);\n                    }\n                    break;\n            }\n        }\n        return c;\n    };\n    DescriptionTreeReconciler.c = function (a, b, c) {\n        var d = new List$1(DescriptionTreeAction.$, 0);\n        if (a == null && b == null) {\n            return d;\n        }\n        if (a != null && b == null) {\n            var e = new DescriptionTreeAction();\n            e.a = 4;\n            e.e = 0;\n            e.g = a;\n            e.c = null;\n            e.i = null;\n            d.add(e);\n            return d;\n        }\n        if (a == null && b != null) {\n            var f = new DescriptionTreeAction();\n            f.a = 2;\n            f.e = 0;\n            f.f = b;\n            f.c = null;\n            f.i = null;\n            d.add(f);\n            return d;\n        }\n        if (b.h != a.h) {\n            var g = new DescriptionTreeAction();\n            g.a = 3;\n            g.e = 0;\n            g.g = a;\n            g.f = b;\n            g.c = null;\n            g.i = null;\n            d.add(g);\n            return d;\n        }\n        DescriptionTreeReconciler.g(d, a, b, c);\n        return d;\n    };\n    DescriptionTreeReconciler.g = function (a, b, c, d) {\n        c.f = b.f;\n        var e = DescriptionTreeReconciler.e(b);\n        var f = DescriptionTreeReconciler.e(c);\n        var g = new List$1(DescriptionPropertyValue.$, 0);\n        var h = new List$1(DescriptionPropertyValue.$, 0);\n        var i = new List$1(DescriptionPropertyValue.$, 0);\n        for (var j = 0; j < e.count; j++) {\n            var k = e._inner[j];\n            if (c.b(k.c)) {\n                if (!Base.equalsStatic(k, c.a(k.c))) {\n                    var l = c.a(k.c);\n                    if (typeCast(DescriptionTreeNode.$, k.b) !== null && typeCast(DescriptionTreeNode.$, l.b) !== null) {\n                        var m = k.b;\n                        var n = l.b;\n                        if (m.h == n.h) {\n                            if ((!m.b(\"Name\") && !n.b(\"Name\")) || (m.b(\"Name\") && n.b(\"Name\") && (m.a(\"Name\").b == n.a(\"Name\").b))) {\n                                DescriptionTreeReconciler.g(a, m, n, d);\n                            }\n                            else {\n                                i.add(c.a(k.c));\n                            }\n                        }\n                        else {\n                            i.add(c.a(k.c));\n                        }\n                    }\n                    else {\n                        i.add(c.a(k.c));\n                    }\n                }\n            }\n            else {\n                if (!d) {\n                    g.add(k);\n                }\n            }\n        }\n        for (var o = 0; o < f.count; o++) {\n            var p = f._inner[o];\n            if (!b.b(p.c)) {\n                h.add(p);\n            }\n        }\n        for (var q = 0; q < g.count; q++) {\n            var r = g._inner[q];\n            var s = new DescriptionTreeAction();\n            s.b = b;\n            s.a = 1;\n            s.i = r.c;\n            s.c = r.a;\n            s.g = r.b;\n            a.add(s);\n        }\n        for (var t = 0; t < h.count; t++) {\n            var u = h._inner[t];\n            var v = new DescriptionTreeAction();\n            v.b = b;\n            v.a = 0;\n            v.i = u.c;\n            v.c = u.a;\n            v.f = u.b;\n            v.g = null;\n            a.add(v);\n        }\n        for (var w = 0; w < i.count; w++) {\n            var x = i._inner[w];\n            var y = b.a(x.c).b;\n            var z = x.b;\n            if (!Base.equalsStatic(z, y)) {\n                var aa = new DescriptionTreeAction();\n                aa.b = b;\n                aa.a = 0;\n                aa.i = x.c;\n                aa.c = x.a;\n                aa.f = x.b;\n                aa.g = b.a(x.c).b;\n                a.add(aa);\n            }\n        }\n        var ab = DescriptionTreeReconciler.d(b);\n        var ac = DescriptionTreeReconciler.d(c);\n        var ad = new List$1(DescriptionPropertyValue.$, 0);\n        var ae = new List$1(DescriptionPropertyValue.$, 0);\n        var af = new List$1(DescriptionPropertyValue.$, 0);\n        for (var ag = 0; ag < ab.count; ag++) {\n            var ah = ab._inner[ag];\n            if (c.b(ah.c)) {\n                if (!DescriptionTreeReconciler.b(ah.b, c.a(ah.c).b)) {\n                    af.add(c.a(ah.c));\n                }\n                else {\n                    var ai = ah.b;\n                    var aj = c.a(ah.c).b;\n                    for (var ak = 0; ak < ai.length; ak++) {\n                        var al = ai[ak];\n                        var am = aj[ak];\n                        if (typeCast(DescriptionTreeNode.$, al) !== null && typeCast(DescriptionTreeNode.$, am) !== null) {\n                            var an = al;\n                            var ao = am;\n                            if (an.h == ao.h) {\n                                DescriptionTreeReconciler.g(a, an, ao, d);\n                            }\n                            else {\n                                var ap = new DescriptionTreeAction();\n                                ap.i = ah.c;\n                                ap.c = ah.a;\n                                ap.b = b;\n                                ap.a = 3;\n                                ap.e = ak;\n                                ap.d = ak;\n                                ap.g = an;\n                                ap.f = ao;\n                                a.add(ap);\n                            }\n                        }\n                        else {\n                            if (!Base.equalsStatic(al, am)) {\n                                var aq = new DescriptionTreeAction();\n                                aq.i = ah.c;\n                                aq.c = ah.a;\n                                aq.b = b;\n                                aq.a = 3;\n                                aq.e = ak;\n                                aq.d = ak;\n                                aq.g = al;\n                                aq.f = am;\n                                a.add(aq);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (!d) {\n                    ad.add(ah);\n                }\n            }\n        }\n        for (var ar = 0; ar < ac.count; ar++) {\n            var as = ac._inner[ar];\n            if (!b.b(as.c)) {\n                ae.add(as);\n            }\n        }\n        for (var at = 0; at < ad.count; at++) {\n            var au = ad._inner[at];\n            var av = new DescriptionTreeAction();\n            av.b = b;\n            av.i = au.c;\n            av.c = au.a;\n            av.a = 5;\n            av.g = au.b;\n            a.add(av);\n        }\n        for (var aw = 0; aw < ae.count; aw++) {\n            var ax = ae._inner[aw];\n            var ay = new DescriptionTreeAction();\n            ay.b = b;\n            ay.i = ax.c;\n            ay.c = ax.a;\n            ay.a = 0;\n            ay.g = null;\n            ay.f = ax.b;\n            a.add(ay);\n        }\n        for (var az = 0; az < af.count; az++) {\n            DescriptionTreeReconciler.h(a, b, c, b.a(af._inner[az].c), af._inner[az], d);\n        }\n    };\n    DescriptionTreeReconciler.f = function (a) {\n        if (a == null) {\n            return \"UNKOWN\";\n        }\n        if (!a.b(\"Type\")) {\n            return \"UNKOWN\";\n        }\n        return a.a(\"Type\").b;\n    };\n    DescriptionTreeReconciler.h = function (a, b, c, d, e, f) {\n        var g = false;\n        var h = d.b;\n        var i = e.b;\n        if (h.length > 0) {\n            if (typeCast(DescriptionTreeNode.$, h[0]) !== null) {\n                var j = h[0];\n                if (j.b(\"Name\") && j.a(\"Name\") != null) {\n                    g = true;\n                }\n                if (j.b(\"RefType\") && j.a(\"RefType\").b == \"uuid\") {\n                    g = true;\n                }\n            }\n        }\n        if (i.length > 0) {\n            if (typeCast(DescriptionTreeNode.$, i[0]) !== null) {\n                var k = i[0];\n                if (k.b(\"Name\") && k.a(\"Name\") != null) {\n                    g = true;\n                }\n                if (k.b(\"RefType\") && k.a(\"RefType\").b == \"uuid\") {\n                    g = true;\n                }\n            }\n        }\n        if (g) {\n            var l = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n            var m = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n            var n = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n            var o = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n            var p = 0;\n            for (var q = 0; q < h.length; q++) {\n                var r = new DescriptionTreeReconciler_TreeModeData();\n                r.a = h[q];\n                r.d = q;\n                r.f = r.a.b(\"Name\") ? r.a.a(\"Name\").b : r.a.b(\"RefType\") ? r.a.a(\"Value\").b : null;\n                if (r.f == null) {\n                    r.f = \"BADKEY_\" + p.toString();\n                    p++;\n                }\n                m.add(r);\n                l.addItem(r.f, r);\n            }\n            for (var s = 0; s < i.length; s++) {\n                var t = new DescriptionTreeReconciler_TreeModeData();\n                t.a = i[s];\n                t.d = s;\n                t.f = t.a.b(\"Name\") ? t.a.a(\"Name\").b : t.a.b(\"RefType\") ? t.a.a(\"Value\").b : null;\n                if (t.f == null) {\n                    t.f = \"BADKEY_\" + p.toString();\n                    p++;\n                }\n                o.add(t);\n                n.addItem(t.f, t);\n            }\n            for (var u = 0; u < m.count; u++) {\n                var v = m._inner[u];\n                if (!n.containsKey(v.f) || (n.containsKey(v.f) && DescriptionTreeReconciler.f(v.a) != DescriptionTreeReconciler.f(n.item(v.f).a))) {\n                    v.c = true;\n                }\n            }\n            for (var w = 0; w < o.count; w++) {\n                var x = o._inner[w];\n                if (!l.containsKey(x.f) || (l.containsKey(x.f) && DescriptionTreeReconciler.f(x.a) != DescriptionTreeReconciler.f(l.item(x.f).a))) {\n                    x.b = true;\n                }\n                else {\n                    l.item(x.f).e = w;\n                }\n            }\n            for (var y = 0; y < m.count; y++) {\n                var z = m._inner[y];\n                if (z.c) {\n                    var aa = new DescriptionTreeAction();\n                    aa.i = e.c;\n                    aa.b = b;\n                    aa.c = e.a;\n                    aa.e = z.d;\n                    aa.a = 4;\n                    aa.g = z.a;\n                    a.add(aa);\n                    for (var ab = y + 1; ab < m.count; ab++) {\n                        var ac = m._inner[ab];\n                        ac.d--;\n                    }\n                }\n            }\n            for (var ad = 0; ad < o.count; ad++) {\n                var ae = o._inner[ad];\n                if (ae.b) {\n                    var af = new DescriptionTreeAction();\n                    af.i = e.c;\n                    af.b = b;\n                    af.c = e.a;\n                    af.d = ad;\n                    af.a = 2;\n                    af.f = i[ad];\n                    a.add(af);\n                    for (var ag = 0; ag < m.count; ag++) {\n                        var ah = m._inner[ag];\n                        if (!ah.c && ah.d >= ad) {\n                            ah.d++;\n                        }\n                    }\n                }\n                else {\n                    var ai = l.item(ae.f);\n                    if (ai.d == ai.e) {\n                        DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n                        continue;\n                    }\n                    var aj = new DescriptionTreeAction();\n                    aj.i = e.c;\n                    aj.b = b;\n                    aj.c = e.a;\n                    aj.e = ai.d;\n                    aj.a = 4;\n                    aj.g = ai.a;\n                    a.add(aj);\n                    for (var ak = 0; ak < m.count; ak++) {\n                        var al = m._inner[ak];\n                        if (!al.c && al.a != ai.a && al.d >= ai.d) {\n                            al.d--;\n                        }\n                    }\n                    aj = new DescriptionTreeAction();\n                    aj.i = e.c;\n                    aj.b = b;\n                    aj.c = e.a;\n                    aj.d = ai.e;\n                    aj.a = 2;\n                    aj.f = ai.a;\n                    a.add(aj);\n                    ai.d = ai.e;\n                    for (var am = 0; am < m.count; am++) {\n                        var an = m._inner[am];\n                        if (!an.c && an.a != ai.a && an.d >= ai.d) {\n                            an.d++;\n                        }\n                    }\n                    DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n                }\n            }\n        }\n        else {\n            var ao = Math.max(h.length, i.length);\n            for (var ap = 0; ap < ao; ap++) {\n                if (ap >= h.length) {\n                    var aq = new DescriptionTreeAction();\n                    aq.i = e.c;\n                    aq.b = b;\n                    aq.c = e.a;\n                    aq.d = ap;\n                    aq.a = 2;\n                    aq.f = i[ap];\n                    a.add(aq);\n                }\n                else if (ap >= i.length) {\n                    var ar = new DescriptionTreeAction();\n                    ar.i = e.c;\n                    ar.b = b;\n                    ar.c = e.a;\n                    ar.e = i.length;\n                    ar.a = 4;\n                    ar.g = h[ap];\n                    a.add(ar);\n                }\n                else {\n                    var as = h[ap];\n                    var at = i[ap];\n                    if (typeCast(DescriptionTreeNode.$, as) !== null && typeCast(DescriptionTreeNode.$, at) !== null) {\n                        var au = as;\n                        var av = at;\n                        if (au.h == av.h) {\n                            DescriptionTreeReconciler.g(a, au, av, f);\n                        }\n                        else {\n                            var aw = new DescriptionTreeAction();\n                            aw.i = e.c;\n                            aw.b = b;\n                            aw.c = e.a;\n                            aw.e = ap;\n                            aw.a = 3;\n                            aw.g = h[ap];\n                            aw.f = i[ap];\n                            a.add(aw);\n                        }\n                    }\n                    else {\n                        if (!Base.equalsStatic(as, at)) {\n                            var ax = new DescriptionTreeAction();\n                            ax.i = e.c;\n                            ax.b = b;\n                            ax.c = e.a;\n                            ax.e = ap;\n                            ax.a = 3;\n                            ax.g = h[ap];\n                            ax.f = i[ap];\n                            a.add(ax);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    DescriptionTreeReconciler.b = function (a, b) {\n        var c = a;\n        var d = b;\n        if (c.length != d.length) {\n            return false;\n        }\n        for (var e = 0; e < c.length; e++) {\n            var f = c[e];\n            var g = d[e];\n            if (typeCast(DescriptionTreeNode.$, f) !== null && !(typeCast(DescriptionTreeNode.$, g) !== null)) {\n                return false;\n            }\n            if (!(typeCast(DescriptionTreeNode.$, f) !== null) && typeCast(DescriptionTreeNode.$, g) !== null) {\n                return false;\n            }\n            if (typeCast(DescriptionTreeNode.$, f) !== null) {\n                var h = f;\n                var i = g;\n                if (h.h != i.h) {\n                    return false;\n                }\n                var j = h.b(\"Name\") ? h.a(\"Name\").b : null;\n                var k = i.b(\"Name\") ? i.a(\"Name\").b : null;\n                if (!Base.equalsStatic(j, k)) {\n                    return false;\n                }\n            }\n            else {\n                if (!Base.equalsStatic(f, g)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    DescriptionTreeReconciler.e = function (a) {\n        var b = new List$1(DescriptionPropertyValue.$, 0);\n        var c = a.e();\n        for (var d = 0; d < c.count; d++) {\n            var e = c._inner[d];\n            if (e.a != null && e.a.knownType != 10 && e.a.knownType != 9) {\n                b.add(e);\n            }\n        }\n        return b;\n    };\n    DescriptionTreeReconciler.d = function (a) {\n        var b = new List$1(DescriptionPropertyValue.$, 0);\n        var c = a.e();\n        for (var d = 0; d < c.count; d++) {\n            var e = c._inner[d];\n            if (e.a != null && (e.a.knownType == 10 || e.a.knownType == 9)) {\n                b.add(e);\n            }\n        }\n        return b;\n    };\n    DescriptionTreeReconciler.$t = markType(DescriptionTreeReconciler, 'DescriptionTreeReconciler');\n    return DescriptionTreeReconciler;\n}(Base));\nexport { DescriptionTreeReconciler };\n//# sourceMappingURL=DescriptionTreeReconciler.js.map\n"]},"metadata":{},"sourceType":"module"}