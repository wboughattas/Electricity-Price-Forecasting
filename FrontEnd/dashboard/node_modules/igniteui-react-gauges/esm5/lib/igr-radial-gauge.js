/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import * as React from 'react';
import { ReactRenderer } from "igniteui-react-core";
import { TypeRegistrar } from "igniteui-react-core";
import { XamRadialGauge } from './XamRadialGauge';
import { CollectionAdapter, brushToString, stringToBrush, toPoint, fromPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, NamePatcher, isValidProp, getModifiedProps, toSpinal, arrayFindByName } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { NotifyCollectionChangedAction } from "igniteui-react-core";
import { SweepDirection_$type } from "igniteui-react-core";
import { RadialGaugeNeedleShape_$type } from './RadialGaugeNeedleShape';
import { RadialGaugePivotShape_$type } from './RadialGaugePivotShape';
import { RadialGaugeScaleOversweepShape_$type } from './RadialGaugeScaleOversweepShape';
import { RadialGaugeBackingShape_$type } from './RadialGaugeBackingShape';
import { RadialGaugeDuplicateLabelOmissionStrategy_$type } from './RadialGaugeDuplicateLabelOmissionStrategy';
import { IgrFormatRadialGaugeLabelEventArgs } from './igr-format-radial-gauge-label-event-args';
import { IgrAlignRadialGaugeLabelEventArgs } from './igr-align-radial-gauge-label-event-args';
import { RadialGaugeStylingDefaults } from './RadialGaugeStylingDefaults';
//import { RadialGaugeRange } from './RadialGaugeRange';
import { XamRadialGaugeRange } from './XamRadialGaugeRange';
import { IgrRadialGaugeRangeCollection } from './igr-radial-gauge-range-collection';
import { ContentChildrenManager } from "igniteui-react-core";
import { IgrDoubleValueChangedEventArgs } from "igniteui-react-core";
var IgrRadialGauge = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrRadialGauge, _super);
    function IgrRadialGauge(props) {
        var _this = _super.call(this, props) || this;
        _this.contentRanges = [];
        /**
        * The ranges actually present in the chart. Do not directly modify this array.
        * This array's contents can be modified by causing Angular to reproject the child content.
        * Or adding and removing ranges from the manual ranges collection on the ranges property.
        */
        _this.actualRanges = [];
        _this._ranges = null;
        _this._rangesAdapter = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._formatLabel = null;
        _this._formatLabel_wrapped = null;
        _this._alignLabel = null;
        _this._alignLabel_wrapped = null;
        _this._valueChanged = null;
        _this._valueChanged_wrapped = null;
        _this._actualMinimumValueChange = null;
        _this._actualMinimumValueChange_wrapped = null;
        _this._actualMaximumValueChange = null;
        _this._actualMaximumValueChange_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });
        var container = null;
        if (document) {
            container = document.createElement("div");
            container.style.display = "block";
            container.style.width = "100%";
            container.style.height = "100%";
        }
        var root;
        root = container;
        _this._renderer = new ReactRenderer(root, document, true, RadialGaugeStylingDefaults);
        _this._implementation = _this.createImplementation();
        _this._container = _this._renderer.getWrapper(container);
        //this._renderer.rootWrapper.append(this._container);
        //this._container.setStyleProperty("display", "block");
        //this._container.setStyleProperty("width", "100%");
        //this._container.setStyleProperty("height", "100%");
        _this._wrapper = _this._renderer;
        //var root: any;
        //root = this._container;
        //if (this._container.nativeElement != null) {
        //    root = this._container.nativeElement;
        //}
        var gauge = _this.i;
        _this._gauge = gauge;
        _this._rangesAdapter = new CollectionAdapter(_this.contentRanges, _this.i.ranges, _this.actualRanges, function (c) { return c.i; }, function (i) {
            i._provideRenderer(_this._wrapper);
            if (_this._container && _this._container.getNativeElement().parentElement) {
                i._styling(_this._container.getNativeElement(), _this, _this);
            }
        }, function (i) { i._provideRenderer(null); });
        gauge.provideContainer(_this._renderer);
        _this._renderer.addSizeWatcher(function () {
            _this._gauge.containerResized();
        });
        return _this;
    }
    Object.defineProperty(IgrRadialGauge.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this.containerResized();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            if (this._elRef) {
                this._elRef.style.width = value;
                this.containerResized();
            }
        },
        enumerable: true,
        configurable: true
    });
    IgrRadialGauge.prototype._updateContentChildren = function () {
        this.contentRanges.length = 0;
        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (var i = 0; i < contentChildrenActual.length; i++) {
            if ((XamRadialGaugeRange.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {
                this.contentRanges.push(contentChildrenActual[i]);
            }
        }
        if (this._rangesAdapter !== null) {
            this._rangesAdapter.notifyContentChanged();
        }
    };
    Object.defineProperty(IgrRadialGauge.prototype, "ranges", {
        /**
         * A collection or manually added axes for the chart.
        */
        get: function () {
            var _this = this;
            if (this._ranges === null) {
                var coll = new IgrRadialGaugeRangeCollection();
                var inner = coll._innerColl;
                inner.addListener(function (sender, e) {
                    switch (e.action) {
                        case NotifyCollectionChangedAction.Add:
                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                            break;
                        case NotifyCollectionChangedAction.Replace:
                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Reset:
                            _this._rangesAdapter.clearManualItems();
                            break;
                    }
                });
                this._ranges = coll;
            }
            return this._ranges;
        },
        enumerable: true,
        configurable: true
    });
    IgrRadialGauge.prototype.render = function () {
        // if (!this._childrenDiffer(this.props.children)) {
        // 	let div = React.createElement("div", {
        // 		ref: (ref) => {
        // 			this._elRef = ref;
        // 		},
        // 		children: this.props.children
        // 	});
        // 	return div;
        // } else {
        var children = this._contentChildrenManager.getChildren(this.props.children);
        var div = React.createElement("div", {
            className: "ig-radial-gauge igr-radial-gauge",
            ref: this._getMainRef,
            children: children
        });
        return div;
        //}
    };
    IgrRadialGauge.prototype.componentDidMount = function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    {
                        this[p] = this.props[p];
                    }
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._elRef.appendChild(this._container.getNativeElement());
        this.containerResized();
        this.initializeContent();
    };
    IgrRadialGauge.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrRadialGauge.prototype._getMainRef = function (div) {
        this._elRef = div;
    };
    IgrRadialGauge.prototype.destroy = function () {
        this._gauge.destroy();
        this._wrapper.destroy();
    };
    IgrRadialGauge.prototype.createImplementation = function () {
        return new XamRadialGauge();
    };
    IgrRadialGauge.prototype.initializeContent = function () {
        this._styling(this._container.getNativeElement(), this);
        if (this.actualRanges && this.actualRanges.length > 0) {
            var currRange = this.actualRanges;
            for (var i = 0; i < currRange.length; i++) {
                currRange[i]._styling(this._container.getNativeElement(), this, this);
            }
        }
        this._updateContentChildren();
        this.i.containerResized();
    };
    IgrRadialGauge.prototype.componentWillUnmount = function () {
        //this._grid.destroy();
        this.destroy();
    };
    IgrRadialGauge.prototype.initializeProperties = function () {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
    };
    Object.defineProperty(IgrRadialGauge.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgrRadialGauge._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    Object.defineProperty(IgrRadialGauge.prototype, "rangeBrushes", {
        /**
     * Gets or sets a collection of brushes to be used as the palette for gauge ranges.
    */
        get: function () {
            return fromBrushCollection(this.i.ah);
        },
        set: function (v) {
            this.i.ah = toBrushCollection(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "rangeOutlines", {
        /**
         * Gets or sets a collection of brushes to be used as the palette for gauge outlines.
        */
        get: function () {
            return fromBrushCollection(this.i.ai);
        },
        set: function (v) {
            this.i.ai = toBrushCollection(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "minimumValue", {
        /**
         * Gets or sets the minimum value of the scale.
        */
        get: function () {
            return this.i.cc;
        },
        set: function (v) {
            this.i.cc = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "actualMinimumValue", {
        /**
         * Gets the resolved minimum value of the scale.
        */
        get: function () {
            return this.i.bs;
        },
        set: function (v) {
            this.i.bs = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "maximumValue", {
        /**
         * Gets or sets the maximum value of the scale.
        */
        get: function () {
            return this.i.ca;
        },
        set: function (v) {
            this.i.ca = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "actualMaximumValue", {
        /**
         * Gets the resolved maximum value of the scale.
        */
        get: function () {
            return this.i.br;
        },
        set: function (v) {
            this.i.br = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "interval", {
        /**
         * Gets or sets the interval to use for the scale.
        */
        get: function () {
            return this.i.b6;
        },
        set: function (v) {
            this.i.b6 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "centerX", {
        /**
         * Gets or sets the x position of the center of the gauge with the value ranging from 0 to 1.
        */
        get: function () {
            return this.i.b3;
        },
        set: function (v) {
            this.i.b3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "centerY", {
        /**
         * Gets or sets the y position of the center of the gauge with the value ranging from 0 to 1.
        */
        get: function () {
            return this.i.b4;
        },
        set: function (v) {
            this.i.b4 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "value", {
        /**
         * Gets or sets the value at which to point the needle of the gauge.
        */
        get: function () {
            return this.i.dm;
        },
        set: function (v) {
            this.i.dm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleStartAngle", {
        /**
         * Gets or sets the start angle for the scale in degrees.
        */
        get: function () {
            return this.i.da;
        },
        set: function (v) {
            this.i.da = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleEndAngle", {
        /**
         * Gets or sets the end angle for the scale in degrees.
        */
        get: function () {
            return this.i.c5;
        },
        set: function (v) {
            this.i.c5 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleSweepDirection", {
        /**
         * Gets or sets the direction in which the scale sweeps around the center from the start angle to end angle.
        */
        get: function () {
            return this.i.ii;
        },
        set: function (v) {
            this.i.ii = ensureEnum(SweepDirection_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "transitionDuration", {
        /**
         * Gets or sets the number of milliseconds over which changes to the gauge should be animated.
        */
        get: function () {
            return this.i.dn;
        },
        set: function (v) {
            this.i.dn = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "transitionEasingFunction", {
        /**
         * Gets or sets the easing function used to morph the current series.
        */
        get: function () {
            return this.i.a0;
        },
        set: function (v) {
            this.i.a0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleBrush", {
        /**
         * Gets or sets the brush to use when rendering the fill of the needle.
        */
        get: function () {
            return brushToString(this.i.ib);
        },
        set: function (v) {
            this.i.ib = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleOutline", {
        /**
         * Gets or sets the brush to use when rendering the outline of the needle.
        */
        get: function () {
            return brushToString(this.i.ic);
        },
        set: function (v) {
            this.i.ic = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleStartExtent", {
        /**
         * Gets or sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cv;
        },
        set: function (v) {
            this.i.cv = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleEndExtent", {
        /**
         * Gets or sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cn;
        },
        set: function (v) {
            this.i.cn = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleShape", {
        /**
         * Gets or sets the shape to use when rendering the needle from a number of options.
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = ensureEnum(RadialGaugeNeedleShape_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleStartWidthRatio", {
        /**
         * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cw;
        },
        set: function (v) {
            this.i.cw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleEndWidthRatio", {
        /**
         * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.co;
        },
        set: function (v) {
            this.i.co = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleBaseFeatureWidthRatio", {
        /**
         * Gets or sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cm;
        },
        set: function (v) {
            this.i.cm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleBaseFeatureExtent", {
        /**
         * Gets or sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cl;
        },
        set: function (v) {
            this.i.cl = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePointFeatureWidthRatio", {
        /**
         * Gets or sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cu;
        },
        set: function (v) {
            this.i.cu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePointFeatureExtent", {
        /**
         * Gets or sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.ct;
        },
        set: function (v) {
            this.i.ct = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePivotWidthRatio", {
        /**
         * Gets or sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cs;
        },
        set: function (v) {
            this.i.cs = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePivotInnerWidthRatio", {
        /**
         * Gets or sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
        */
        get: function () {
            return this.i.cp;
        },
        set: function (v) {
            this.i.cp = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePivotShape", {
        /**
         * Gets or sets the shape to use for the needle cap.
        */
        get: function () {
            return this.i.as;
        },
        set: function (v) {
            this.i.as = ensureEnum(RadialGaugePivotShape_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleStartExtent", {
        /**
         * Gets or sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.db;
        },
        set: function (v) {
            this.i.db = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePivotBrush", {
        /**
         * Gets or sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
        */
        get: function () {
            return brushToString(this.i.id);
        },
        set: function (v) {
            this.i.id = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePivotOutline", {
        /**
         * Gets or sets the brush to use for the outlines of the needle cap.
        */
        get: function () {
            return brushToString(this.i.ie);
        },
        set: function (v) {
            this.i.ie = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needleStrokeThickness", {
        /**
         * Gets or sets the stroke thickness of the needle outline.
        */
        get: function () {
            return this.i.cx;
        },
        set: function (v) {
            this.i.cx = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "needlePivotStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use for the outline of the needle cap.
        */
        get: function () {
            return this.i.cq;
        },
        set: function (v) {
            this.i.cq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleEndExtent", {
        /**
         * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.c6;
        },
        set: function (v) {
            this.i.c6 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "labelExtent", {
        /**
         * Gets or sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.b7;
        },
        set: function (v) {
            this.i.b7 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "labelInterval", {
        /**
         * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
        */
        get: function () {
            return this.i.b9;
        },
        set: function (v) {
            this.i.b9 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "tickStartExtent", {
        /**
         * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.dg;
        },
        set: function (v) {
            this.i.dg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "tickEndExtent", {
        /**
         * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.de;
        },
        set: function (v) {
            this.i.de = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "tickStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use when rendering ticks.
        */
        get: function () {
            return this.i.di;
        },
        set: function (v) {
            this.i.di = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "tickBrush", {
        /**
         * Gets or sets the brush to use for the major tickmarks.
        */
        get: function () {
            return brushToString(this.i.ih);
        },
        set: function (v) {
            this.i.ih = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "fontBrush", {
        /**
         * Gets or sets the brush to use for the label font.
        */
        get: function () {
            return brushToString(this.i.h8);
        },
        set: function (v) {
            this.i.h8 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "minorTickStartExtent", {
        /**
         * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.ch;
        },
        set: function (v) {
            this.i.ch = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "minorTickEndExtent", {
        /**
         * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get: function () {
            return this.i.cf;
        },
        set: function (v) {
            this.i.cf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "minorTickStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use when rendering minor ticks.
        */
        get: function () {
            return this.i.cj;
        },
        set: function (v) {
            this.i.cj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "minorTickBrush", {
        /**
         * Gets or sets the brush to use for the minor tickmarks.
        */
        get: function () {
            return brushToString(this.i.ia);
        },
        set: function (v) {
            this.i.ia = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "minorTickCount", {
        /**
         * Gets or sets the number of minor tickmarks to place between major tickmarks.
        */
        get: function () {
            return this.i.ce;
        },
        set: function (v) {
            this.i.ce = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleBrush", {
        /**
         * Gets or sets the brush to use to fill the background of the scale.
        */
        get: function () {
            return brushToString(this.i.ig);
        },
        set: function (v) {
            this.i.ig = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingBrush", {
        /**
         * Gets or sets the brush to use to fill the backing of the gauge.
        */
        get: function () {
            return brushToString(this.i.h6);
        },
        set: function (v) {
            this.i.h6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingOutline", {
        /**
         * Gets or sets the brush to use for the outline of the backing.
        */
        get: function () {
            return brushToString(this.i.h7);
        },
        set: function (v) {
            this.i.h7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingStrokeThickness", {
        /**
         * Gets or sets the stroke thickness of the backing outline.
        */
        get: function () {
            return this.i.b1;
        },
        set: function (v) {
            this.i.b1 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingOuterExtent", {
        /**
         * Gets or sets the outer extent of the gauge backing.
        */
        get: function () {
            return this.i.by;
        },
        set: function (v) {
            this.i.by = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingOversweep", {
        /**
         * Gets or sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
        */
        get: function () {
            return this.i.b0;
        },
        set: function (v) {
            this.i.b0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleOversweep", {
        /**
         * Gets or sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
        */
        get: function () {
            return this.i.c8;
        },
        set: function (v) {
            this.i.c8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "scaleOversweepShape", {
        /**
         * Gets or sets the oversweep shape to use for the excess fill area for the scale.
        */
        get: function () {
            return this.i.au;
        },
        set: function (v) {
            this.i.au = ensureEnum(RadialGaugeScaleOversweepShape_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingCornerRadius", {
        /**
         * Gets or sets the corner rounding radius to use for the fitted scale backings.
        */
        get: function () {
            return this.i.bu;
        },
        set: function (v) {
            this.i.bu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingInnerExtent", {
        /**
         * Gets or sets the inner extent of the gauge backing.
        */
        get: function () {
            return this.i.bw;
        },
        set: function (v) {
            this.i.bw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "backingShape", {
        /**
         * Gets or sets the type of shape to use for the backing of the gauge.
        */
        get: function () {
            return this.i.am;
        },
        set: function (v) {
            this.i.am = ensureEnum(RadialGaugeBackingShape_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "radiusMultiplier", {
        /**
         * Gets or sets the multiplying factor to apply to the normal radius of the gauge.
         * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
         * This introduces a multiplicative factor to that value.
        */
        get: function () {
            return this.i.c0;
        },
        set: function (v) {
            this.i.c0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "duplicateLabelOmissionStrategy", {
        /**
         * Gets or sets the strategy to use for omitting labels if the first and last label have the same value.
        */
        get: function () {
            return this.i.an;
        },
        set: function (v) {
            this.i.an = ensureEnum(RadialGaugeDuplicateLabelOmissionStrategy_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "isNeedleDraggingEnabled", {
        /**
         * Gets or sets whether needle dragging is enabled or not.
        */
        get: function () {
            return this.i.ba;
        },
        set: function (v) {
            this.i.ba = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "isNeedleDraggingConstrained", {
        /**
         * Gets or sets whether the needle is constrained within the minimum and maximum value range during dragging.
        */
        get: function () {
            return this.i.a9;
        },
        set: function (v) {
            this.i.a9 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "font", {
        /**
         * Gets or sets the font.
        */
        get: function () {
            return this.i.d2;
        },
        set: function (v) {
            this.i.d2 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "labelFormat", {
        /**
         * Gets or sets the label composite format used when creating label values.
        */
        get: function () {
            return this.i.d9;
        },
        set: function (v) {
            this.i.d9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "labelFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the LabelFormat string.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "animating", {
        /**
         * Gets a value indicating whether the radial gauge is currently animating.
        */
        get: function () {
            return this.i.a6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "transitionProgress", {
        /**
         * Gets the transition progress of the animation when the control is animating.
        */
        get: function () {
            return this.i.dk;
        },
        set: function (v) {
            this.i.dk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "pixelScalingRatio", {
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.cz;
        },
        set: function (v) {
            this.i.cz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "actualPixelScalingRatio", {
        /**
         * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.bt;
        },
        set: function (v) {
            this.i.bt = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrRadialGauge.prototype.findByName = function (name) {
        if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {
            return this.ranges.findByName(name);
        }
        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {
            return arrayFindByName(this.labelFormatSpecifiers, name);
        }
        return null;
    };
    Object.defineProperty(IgrRadialGauge.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrRadialGauge.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrRadialGauge.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("RadialGauge");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.

* @param value  * The value to scale.
*/
    IgrRadialGauge.prototype.scaleValue = function (value) {
        var iv = this.i.dd(value);
        return (iv);
    };
    /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
    
    * @param angle  * The angle in radians to unscale to a value.
    */
    IgrRadialGauge.prototype.unscaleValue = function (angle) {
        var iv = this.i.dl(angle);
        return (iv);
    };
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
    
    * @param point  * The point for which to retrieve the associated value.
    */
    IgrRadialGauge.prototype.getValueForPoint = function (point) {
        var iv = this.i.b5(toPoint(point));
        return (iv);
    };
    IgrRadialGauge.prototype.getPointForValue = function (value, extent) {
        var iv = this.i.ik(value, extent);
        return fromPoint(iv);
    };
    IgrRadialGauge.prototype.styleUpdated = function () {
        this.i.gd();
    };
    IgrRadialGauge.prototype.needleContainsPoint = function (point, isFinger) {
        var iv = this.i.needleContainsPoint(toPoint(point), isFinger);
        return (iv);
    };
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    IgrRadialGauge.prototype.provideContainer = function (container) {
        this.i.provideContainer(container);
    };
    IgrRadialGauge.prototype.containerResized = function () {
        this.i.containerResized();
    };
    /**
     * Use to force the radial gauge to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the radial gauge needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the radial gauge.
    
    */
    IgrRadialGauge.prototype.flush = function () {
        this.i.fs();
    };
    /**
     * Returns visuals as a serialized string.
    
    */
    IgrRadialGauge.prototype.exportSerializedVisualData = function () {
        var iv = this.i.d1();
        return (iv);
    };
    Object.defineProperty(IgrRadialGauge.prototype, "formatLabel", {
        /**
         * Event which is raised when a label of the gauge is formatted.
         * Function takes first argument null and second argument ui.
         * Use ui.owner to obtain reference to gauge widget.
         * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
         * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
         * Use ui.startAngle to obtain the starting angle of gauge scale.
         * Use ui.endAngle to obtain the ending angle of gauge scale.
         * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
         * Use ui.value to obtain the value on the gauge scale associated with the label.
         * Use ui.label to obtain the string value of the label.
        */
        get: function () {
            return this._formatLabel;
        },
        set: function (ev) {
            var _this = this;
            if (this._formatLabel_wrapped !== null) {
                this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);
                this._formatLabel_wrapped = null;
                this._formatLabel = null;
            }
            this._formatLabel = ev;
            this._formatLabel_wrapped = function (o, e) {
                var outerArgs = new IgrFormatRadialGaugeLabelEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeFormatLabel) {
                    _this.beforeFormatLabel(_this, outerArgs);
                }
                if (_this._formatLabel) {
                    _this._formatLabel(_this, outerArgs);
                }
            };
            this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "alignLabel", {
        /**
         * Event which is raised when a label of the gauge is aligned along the scale.
         * Function takes first argument null and second argument ui.
         * Use ui.owner to obtain reference to gauge widget.
         * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
         * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
         * Use ui.startAngle to obtain the starting angle of gauge scale.
         * Use ui.endAngle to obtain the ending angle of gauge scale.
         * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
         * Use ui.value to obtain the value on the gauge scale associated with the label.
         * Use ui.label to obtain the string value of the label.
         * Use ui.width to obtain the width of the label.
         * Use ui.height to obtain the height of the label.
         * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
         * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
        */
        get: function () {
            return this._alignLabel;
        },
        set: function (ev) {
            var _this = this;
            if (this._alignLabel_wrapped !== null) {
                this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);
                this._alignLabel_wrapped = null;
                this._alignLabel = null;
            }
            this._alignLabel = ev;
            this._alignLabel_wrapped = function (o, e) {
                var outerArgs = new IgrAlignRadialGaugeLabelEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeAlignLabel) {
                    _this.beforeAlignLabel(_this, outerArgs);
                }
                if (_this._alignLabel) {
                    _this._alignLabel(_this, outerArgs);
                }
            };
            this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "valueChanged", {
        /**
         * Occurs when the Value property changes.
        */
        get: function () {
            return this._valueChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._valueChanged_wrapped !== null) {
                this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);
                this._valueChanged_wrapped = null;
                this._valueChanged = null;
            }
            this._valueChanged = ev;
            this._valueChanged_wrapped = function (o, e) {
                var outerArgs = new IgrDoubleValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeValueChanged) {
                    _this.beforeValueChanged(_this, outerArgs);
                }
                if (_this._valueChanged) {
                    _this._valueChanged(_this, outerArgs);
                }
            };
            this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "actualMinimumValueChange", {
        get: function () {
            return this._actualMinimumValueChange;
        },
        set: function (ev) {
            var _this = this;
            if (this._actualMinimumValueChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
                this._actualMinimumValueChange_wrapped = null;
                this._actualMinimumValueChange = null;
            }
            this._actualMinimumValueChange = ev;
            this._actualMinimumValueChange_wrapped = function (o, e) {
                var ext = _this.actualMinimumValue;
                if (_this.beforeActualMinimumValueChange) {
                    _this.beforeActualMinimumValueChange(_this, ext);
                }
                if (_this._actualMinimumValueChange) {
                    _this._actualMinimumValueChange(_this, ext);
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialGauge.prototype, "actualMaximumValueChange", {
        get: function () {
            return this._actualMaximumValueChange;
        },
        set: function (ev) {
            var _this = this;
            if (this._actualMaximumValueChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
                this._actualMaximumValueChange_wrapped = null;
                this._actualMaximumValueChange = null;
            }
            this._actualMaximumValueChange = ev;
            this._actualMaximumValueChange_wrapped = function (o, e) {
                var ext = _this.actualMaximumValue;
                if (_this.beforeActualMaximumValueChange) {
                    _this.beforeActualMaximumValueChange(_this, ext);
                }
                if (_this._actualMaximumValueChange) {
                    _this._actualMaximumValueChange(_this, ext);
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrRadialGauge;
}(React.Component));
export { IgrRadialGauge };
//# sourceMappingURL=igr-radial-gauge.js.map
