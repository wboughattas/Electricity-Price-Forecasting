/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Base, PropertyChangedEventArgs, runOn, delegateCombine, enumGetBox, Number_$type, String_$type, Array_$type, Point_$type, delegateRemove, fromEn, markType, markDep, typeCast, fromEnum, TypeRegistrar } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { LinearGaugeFrame } from "./LinearGaugeFrame";
import { LinearGraphScaler } from "./LinearGraphScaler";
import { LinearScaleOrientation_$type } from "./LinearScaleOrientation";
import { DependencyProperty } from "igniteui-react-core";
import { LinearGraphRangeCollection } from "./LinearGraphRangeCollection";
import { BrushCollection } from "igniteui-react-core";
import { LinearGraphNeedleShape_$type } from "./LinearGraphNeedleShape";
import { Brush } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { StackPool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { FormatLinearGraphLabelEventArgs } from "./FormatLinearGraphLabelEventArgs";
import { AlignLinearGraphLabelEventArgs } from "./AlignLinearGraphLabelEventArgs";
import { DoubleValueChangedEventArgs } from "igniteui-react-core";
import { PolygonUtil } from "igniteui-react-core";
import { LinearGaugeVisualData } from "./LinearGaugeVisualData";
import { ToolTipInfo } from "./ToolTipInfo";
import { RectData } from "igniteui-react-core";
import { LinearGraphScaleLabelVisualDataList } from "./LinearGraphScaleLabelVisualDataList";
import { LinearGraphScaleTickmarkVisualDataList } from "./LinearGraphScaleTickmarkVisualDataList";
import { LinearGraphRangeVisualDataList } from "./LinearGraphRangeVisualDataList";
import { LinearNeedleVisualData } from "./LinearNeedleVisualData";
import { LinearGraphRangeVisualData } from "./LinearGraphRangeVisualData";
import { LinearGraphToolTipVisualData } from "./LinearGraphToolTipVisualData";
import { LinearGraphTooltipDataContext } from "./LinearGraphTooltipDataContext";
import { AppearanceHelper } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { PathVisualData } from "igniteui-react-core";
import { GetPointsSettings } from "igniteui-react-core";
import { LinearGraphRectFrame } from "./LinearGraphRectFrame";
import { Size } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { LinearGraphNeedleParameters } from "./LinearGraphNeedleParameters";
import { LinearGraphNeedleFrame } from "./LinearGraphNeedleFrame";
import { LinearGraphNeedlePreparer } from "./LinearGraphNeedlePreparer";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, intDivide, truncate } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { CanvasGestureDOMEventProxy } from "igniteui-react-core";
import { LinearGraphScaleLabelVisualData } from "./LinearGraphScaleLabelVisualData";
import { LinearGraphScaleTickmarkVisualData } from "./LinearGraphScaleTickmarkVisualData";
import { SizeData } from "igniteui-react-core";
import { arrayCopy1 } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var XamLinearGauge = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(XamLinearGauge, _super);
    function XamLinearGauge() {
        var _this = _super.call(this) || this;
        _this.propertyChanged = null;
        _this.av = null;
        _this.bq = 0;
        _this.formatLabel = null;
        _this.alignLabel = null;
        _this.valueChanged = null;
        _this.ao = null;
        _this.an = null;
        _this.am = null;
        _this.ar = null;
        _this.bn = 0;
        _this.bm = 100;
        _this.a3 = false;
        _this.aj = null;
        _this.be = false;
        _this.a1 = null;
        _this.az = null;
        _this.ay = null;
        _this.a2 = null;
        _this.a0 = null;
        _this.bk = null;
        _this.h4 = null;
        _this._view = null;
        _this.h6 = null;
        _this.h5 = null;
        _this.h3 = null;
        _this.bg = new List$1(TextBlock.$, 0);
        _this.bj = new List$1(TextBlock.$, 0);
        _this.bi = new List$1(Path.$, 0);
        _this.bh = new List$1(Path.$, 0);
        _this.a5 = false;
        _this.bp = NaN;
        _this.bo = 1;
        _this.bp = NaN;
        _this.bo = 1;
        _this.view = new XamLinearGaugeView(_this);
        _this.view.bc();
        _this.h6 = Rect.empty;
        _this.h5 = Rect.empty;
        _this.h3 = Rect.empty;
        _this.ao = new LinearGaugeFrame();
        _this.an = new LinearGaugeFrame();
        _this.am = new LinearGaugeFrame();
        _this.ranges = new LinearGraphRangeCollection();
        _this.a5 = true;
        _this.av = new DoubleAnimator(0, 1, _this.c4);
        var a = _this.av;
        a.propertyChanged = delegateCombine(a.propertyChanged, runOn(_this, _this.e3));
        _this.ab = XamLinearGauge.$;
        _this.a0 = ((function () {
            var $ret = new StackPool$1(Path.$);
            $ret.b = runOn(_this.view, _this.view.bm);
            $ret.c = runOn(_this.view, _this.view.bn);
            $ret.d = runOn(_this.view, _this.view.bo);
            $ret.j = runOn(_this.view, _this.view.co);
            return $ret;
        })());
        _this.a1 = ((function () {
            var $ret = new StackPool$1(Path.$);
            $ret.b = runOn(_this.view, _this.view.bf);
            $ret.c = runOn(_this.view, _this.view.bg);
            $ret.d = runOn(_this.view, _this.view.bh);
            $ret.j = runOn(_this.view, _this.view.cn);
            return $ret;
        })());
        _this.az = ((function () {
            var $ret = new StackPool$1(Path.$);
            $ret.b = runOn(_this.view, _this.view.bf);
            $ret.c = runOn(_this.view, _this.view.bg);
            $ret.d = runOn(_this.view, _this.view.bh);
            $ret.j = runOn(_this.view, _this.view.cn);
            return $ret;
        })());
        _this.ay = ((function () {
            var $ret = new StackPool$1(TextBlock.$);
            $ret.b = runOn(_this.view, _this.view.a4);
            $ret.c = runOn(_this.view, _this.view.a5);
            $ret.d = runOn(_this.view, _this.view.a6);
            $ret.j = runOn(_this.view, _this.view.b3);
            return $ret;
        })());
        _this.a2 = ((function () {
            var $ret = new StackPool$1(TextBlock.$);
            $ret.b = runOn(_this.view, _this.view.bw);
            $ret.c = runOn(_this.view, _this.view.bx);
            $ret.d = runOn(_this.view, _this.view.by);
            $ret.j = runOn(_this.view, _this.view.b4);
            return $ret;
        })());
        return _this;
    }
    XamLinearGauge.prototype.fj = function (a) {
        this.fp(a);
    };
    XamLinearGauge.prototype.fp = function (a) {
        var b = this.propertyChanged;
        if (b != null) {
            b(this, new PropertyChangedEventArgs(a));
        }
    };
    XamLinearGauge.prototype.e3 = function (a, b) {
        this.cz = this.av.o;
    };
    Object.defineProperty(XamLinearGauge.prototype, "a4", {
        get: function () {
            return this.av.f();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamLinearGauge.prototype, "cz", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            var b = this.bq;
            this.bq = a;
            this.fi("TransitionProgress", b, this.bq);
        },
        enumerable: true,
        configurable: true
    });
    XamLinearGauge.prototype.f1 = function () {
        this.bq = 0;
        this.av.w();
        this.av.v();
    };
    Object.defineProperty(XamLinearGauge.prototype, "bd", {
        get: function () {
            return this.c4 > 0;
        },
        enumerable: true,
        configurable: true
    });
    XamLinearGauge.prototype.onDetachedFromUI = function () {
        this.view.bb();
    };
    XamLinearGauge.prototype.onAttachedToUI = function () {
        this.view.a7();
    };
    Object.defineProperty(XamLinearGauge.prototype, "bs", {
        get: function () {
            return this.bn;
        },
        set: function (a) {
            this.bn = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamLinearGauge.prototype, "br", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            this.bm = a;
        },
        enumerable: true,
        configurable: true
    });
    XamLinearGauge.prototype.bx = function (a) {
        var b = 0;
        var c = a.x;
        if (this.as == 1) {
            b = a.y;
            c = this.h9.height;
        }
        return this.ar.k(c - b);
    };
    XamLinearGauge.prototype.bb = function (a) {
        if (this.bk == null) {
            return false;
        }
        return PolygonUtil.a(this.bk, a);
    };
    XamLinearGauge.prototype.needleContainsPoint = function (a, b) {
        if (this.bk == null) {
            return false;
        }
        return b ? this.h4.containsPoint(a) : PolygonUtil.a(this.bk, a);
    };
    XamLinearGauge.prototype.e7 = function (a, b) {
        var c = this.bx(a);
        c = Math.max(Math.min(c, this.br), this.bs);
        if (c != this.c0) {
            this.c0 = c;
        }
    };
    XamLinearGauge.prototype.at = function () {
        var _this = this;
        var a = new LinearGaugeVisualData();
        a.viewport = new RectData(this.h9.left, this.h9.top, this.h9.width, this.h9.height);
        a.scaleLabels = new LinearGraphScaleLabelVisualDataList();
        a.scaleTickmarks = new LinearGraphScaleTickmarkVisualDataList();
        a.ranges = new LinearGraphRangeVisualDataList();
        a.needle = ((function () {
            var $ret = new LinearNeedleVisualData();
            $ret.value = _this.c0;
            return $ret;
        })());
        this.view.az(a);
        var b = this.view.l();
        if (b != null) {
            var c_1 = null;
            switch (b.c) {
                case "range":
                    c_1 = a.ranges._inner[b.b];
                    break;
                case "needle":
                    c_1 = a.needle;
                    break;
            }
            a.toolTip = ((function () {
                var $ret = new LinearGraphToolTipVisualData();
                $ret.item = c_1;
                $ret.itemBrush = AppearanceHelper.b(b.a.brush);
                $ret.outline = AppearanceHelper.b(b.a.outline);
                $ret.thickness = b.a.thickness;
                return $ret;
            })());
        }
        return a;
    };
    XamLinearGauge.prototype.dc = function () {
        var a = this.at();
        a.scaleByViewport();
        return a.serialize();
    };
    XamLinearGauge.prototype.e8 = function () {
        this.view.flush();
    };
    XamLinearGauge.prototype.destroy = function () {
        this.provideContainer(null);
    };
    XamLinearGauge.prototype.provideContainer = function (a) {
        this.view.a9(a);
    };
    XamLinearGauge.prototype.onMouseOver = function (a, b, c) {
        if (this.be) {
            this.f0(a, null);
        }
    };
    XamLinearGauge.prototype.onMouseLeave = function () {
        if (this.be) {
            this.f0({ $type: Point_$type, x: -10000, y: -10000 }, null);
        }
    };
    XamLinearGauge.prototype.onMouseMove = function (a, b) {
        if (this.a3) {
            this.e7(a, b);
        }
    };
    XamLinearGauge.prototype.onMouseDown = function (a, b) {
        if (this.a7 && !this.a3 && this.needleContainsPoint(a, b)) {
            this.a3 = true;
        }
    };
    Object.defineProperty(XamLinearGauge.prototype, "a6", {
        get: function () {
            return this.a3;
        },
        enumerable: true,
        configurable: true
    });
    XamLinearGauge.prototype.onMouseUp = function (a) {
        if (this.a3) {
            this.a3 = false;
        }
    };
    XamLinearGauge.prototype.containerResized = function () {
        this.view.ba();
    };
    XamLinearGauge.prototype.f2 = function () {
        this.view.bv();
    };
    XamLinearGauge.prototype.f0 = function (a, b) {
        var c = this.bk;
        if (c != null && c.count > 0) {
            var d = PolygonUtil.a(c, a);
            if (d == true) {
                this.view.bu(a, b, -1, "needle");
                return;
            }
        }
        for (var e = 0; e < this.bh.count; e++) {
            var f = new PathVisualData(1, "range", this.bh._inner[e]);
            var g = f.getPoints(new GetPointsSettings());
            if (g.count > 0) {
                var h = PolygonUtil.a(this.bl(g._inner[0]), a);
                if (h == true) {
                    this.view.bu(a, b, e, "range");
                    return;
                }
            }
        }
        this.view.a2();
    };
    XamLinearGauge.prototype.fu = function () {
        if (!this.a5) {
            return;
        }
        var a = this.an.c;
        if (this.as == 0) {
            var b = 0;
            for (var c = 0; c < a.c.length; c++) {
                b = Math.max(b, a.c[c]);
            }
            var d = this.h9.height >= b ? this.h9.height - b : this.h9.height;
            this.h8 = new Rect(0, 0, 0, this.h9.width, d);
        }
        else {
            var e = 0;
            for (var f = 0; f < a.f.length; f++) {
                e = Math.max(e, a.f[f]);
            }
            var g = this.h9.width >= e ? this.h9.width - e : this.h9.width;
            this.h8 = new Rect(0, e, 0, g, this.h9.height);
        }
    };
    Object.defineProperty(XamLinearGauge.prototype, "view", {
        get: function () {
            return this._view;
        },
        set: function (a) {
            this._view = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamLinearGauge.prototype, "h9", {
        get: function () {
            return this.h6;
        },
        set: function (a) {
            var b = this.h6;
            this.h6 = a;
            if (!b.equals1(this.h6)) {
                this.fk(b, this.h6);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamLinearGauge.prototype, "h8", {
        get: function () {
            return this.h5;
        },
        set: function (a) {
            this.h5 = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamLinearGauge.prototype, "h7", {
        get: function () {
            return this.h3;
        },
        set: function (a) {
            this.h3 = a;
        },
        enumerable: true,
        configurable: true
    });
    XamLinearGauge.prototype.a9 = function () {
        return !isNaN_(this.bs) && !isNaN_(this.br) && !this.h9.isEmpty && this.view.s();
    };
    XamLinearGauge.prototype.e4 = function () {
        if (!this.a9()) {
            return;
        }
        var a = this.cr();
        this.ar = new LinearGraphScaler(this.bs, this.br, a, a + this.cp(), this.a8);
        if (this.a5) {
            if (this.a4) {
                if (this.av.g) {
                    this.av.t();
                }
                var b = this.ao;
                this.ao = this.am;
                this.am = b;
            }
            else {
                var c = this.ao;
                this.ao = this.an;
                this.an = c;
            }
        }
        else if (this.a4) {
            this.am.d(this.cz, this.ao, this.an);
            this.fv(this.am);
            this.fy(this.am);
            this.fx(this.am);
        }
        if (this.a5) {
            this.fm();
            this.fu();
            this.fn();
            this.fo();
            this.fl();
        }
        if (this.a5 && this.bd) {
            this.f1();
            this.am.d(this.cz, this.ao, this.an);
            this.fv(this.am);
            this.fy(this.am);
            this.fx(this.am);
            this.fz(this.am);
            this.fw(this.am);
        }
        else {
            if (this.a5) {
                this.fv(this.an);
                this.fy(this.an);
                this.fx(this.an);
                this.fz(this.an);
                this.fw(this.an);
            }
        }
        this.a5 = false;
        this.view.as();
    };
    XamLinearGauge.prototype.fo = function () {
        var a = this.an;
        var b = a.c;
        var c = this.ar;
        var d = this.b5;
        var e = this.h8;
        b.u = this.cs;
        b.r = this.cn;
        b.s = this.co;
        b.t = this.cq;
        b.m.clear();
        for (var f = 0; f < this.ranges.count; f++) {
            var g = this.ranges._inner[f];
            if (g.j <= this.bs || g.o > this.br) {
                continue;
            }
            var h = g.o;
            var i = g.j;
            if (h < this.bs) {
                h = this.bs;
            }
            if (i > this.br) {
                i = this.br;
            }
            var j = new LinearGraphRectFrame();
            j.i = g.an != null ? g.an : this.hv(f, this.ah);
            j.j = g.ao != null ? g.ao : this.hv(f, this.ai);
            j.h = g.p;
            j.g = c.i(h);
            j.d = c.i(i);
            j.e = g.l;
            j.b = g.k;
            j.f = g.n;
            j.c = g.m;
            if (isNaN_(j.e)) {
                j.e = this.ck;
            }
            j.b = g.k;
            if (isNaN_(j.b)) {
                j.b = this.ck;
            }
            j.f = g.n;
            if (isNaN_(j.f)) {
                j.f = this.cl;
            }
            j.c = g.m;
            if (isNaN_(j.c)) {
                j.c = this.cl;
            }
            b.m.add(j);
        }
        b.ab = this.hu;
        b.ad = this.h1;
        b.x = this.cy;
        b.w = this.cx;
        b.v = this.cu;
        b.ac = this.hw;
        b.q = this.b8;
        b.p = this.b7;
        b.o = this.b6;
        var k = this.by;
        if (isNaN_(k)) {
            k = (this.br - this.bs) / 10;
        }
        if (k == 0) {
            k = this.br - this.bs;
        }
        var l = new List$1(Number_$type, 0);
        var m = new List$1(Number_$type, 0);
        if (k > 0) {
            var n = this.bs + this.cv;
            var o = this.br - this.cw;
            var p = 100000;
            var q = Math.abs(o - n) / p;
            if (k >= q) {
                for (var r = n; r <= o || this.bf(r, o, k); r = r + k) {
                    l.add(c.i(r));
                    for (var s = 0; s < d; s++) {
                        var t = (k / (d + 1)) * (s + 1);
                        if (t + r > o) {
                            continue;
                        }
                        m.add(c.i(t + r));
                    }
                }
            }
        }
        if (b.j.length != l.count || b.i.length != m.count) {
            b.j = new Array(l.count);
            b.i = new Array(m.count);
        }
        for (var u = 0; u < l.count; u++) {
            b.j[u] = l._inner[u];
        }
        for (var v = 0; v < m.count; v++) {
            b.i[v] = m._inner[v];
        }
    };
    XamLinearGauge.prototype.ia = function () {
        var a = this.by;
        var b = this.b0;
        if (isNaN_(a)) {
            a = (this.br - this.bs) / 10;
        }
        if (isNaN_(b)) {
            b = a;
        }
        if (b == 0) {
            b = this.br - this.bs;
        }
        var c = new List$1(Number_$type, 0);
        if (b > 0) {
            var d = this.b1 + this.bs;
            var e = this.br - this.b2;
            var f = 100000;
            var g = Math.abs(e - d) / f;
            if (b >= g) {
                for (var h = d; h <= e || this.bf(h, e, a); h += b) {
                    c.add(h);
                }
            }
        }
        var i = new Array(c.count);
        var j = new Array(c.count);
        var _loop_1 = function (k) {
            var l = c._inner[k];
            if (this_1.formatLabel == null && this_1.aj == null) {
                l = (Math.round(l * 100) / 100);
            }
            var m = l.toString();
            if (this_1.aj != null) {
                m = this_1.aj.i(l);
            }
            var n = new FormatLinearGraphLabelEventArgs();
            n.value = l;
            n.label = m;
            if (this_1.formatLabel != null) {
                this_1.formatLabel(this_1, n);
            }
            m = n.label;
            var o = this_1.view.cp(((function () {
                var $ret = new TextBlock();
                $ret.ak = m;
                return $ret;
            })()));
            i[k] = o.width;
            j[k] = o.height;
        };
        var this_1 = this;
        for (var k = 0; k < c.count; k++) {
            _loop_1(k);
        }
        var p = 0;
        var q = 0;
        var r = 1 - this.cn + this.cs;
        if (this.as == 0) {
            for (var s = 0; s < j.length; s++) {
                q = Math.max(q, j[s]);
            }
            for (var t = 0; t < i.length; t++) {
                p += i[t];
            }
            if (i.length > 0) {
                p += i[0] / 2;
            }
            if (i.length > 1) {
                p += i[i.length - 1] / 2;
            }
            if (i.length > 0) {
                p += (i.length - 1) * 5;
            }
            if (r > 0) {
                p = p / Math.abs(1 - r);
            }
        }
        else {
            for (var u = 0; u < i.length; u++) {
                p = Math.max(p, i[u]);
            }
            for (var v = 0; v < j.length; v++) {
                q += j[v];
            }
            if (j.length > 0) {
                q -= j[0] / 2;
            }
            if (j.length > 1) {
                q -= j[j.length - 1] / 2;
            }
            if (r > 0) {
                q = q / Math.abs(1 - r);
            }
            if (j.length > 0) {
                q += (j.length - 1) * 5;
            }
        }
        return new Size(1, p, q);
    };
    XamLinearGauge.prototype.fm = function () {
        var a = this.an;
        var b = a.c;
        var c = this.ar;
        var d = this.by;
        var e = this.b0;
        var f = this.b5;
        if (isNaN_(d)) {
            d = (this.br - this.bs) / 10;
        }
        if (isNaN_(e)) {
            e = d;
        }
        if (e == 0) {
            e = this.br - this.bs;
        }
        var g = new List$1(Tuple$2.$.specialize(Number_$type, Number_$type), 0);
        if (e > 0) {
            var h = this.b1 + this.bs;
            var i = this.br - this.b2;
            var j = 100000;
            var k = Math.abs(i - h) / j;
            if (e >= k) {
                for (var l = h; l <= i || this.bf(l, i, e); l = l + e) {
                    g.add(new Tuple$2(Number_$type, Number_$type, l, c.i(l)));
                }
            }
        }
        if (b.d.length != g.count) {
            b.e = new Array(g.count);
            b.d = new Array(g.count);
            b.f = new Array(g.count);
            b.c = new Array(g.count);
            b.g = new Array(g.count);
            b.h = new Array(g.count);
        }
        b.n = this.bz;
        var m = new FormatLinearGraphLabelEventArgs();
        m.actualMinimumValue = this.bs;
        m.actualMaximumValue = this.br;
        var n = new AlignLinearGraphLabelEventArgs();
        n.actualMinimumValue = this.bs;
        n.actualMaximumValue = this.br;
        var _loop_2 = function (o) {
            var p = g._inner[o].c;
            if (this_2.formatLabel == null) {
                p = (Math.round(p * 100) / 100);
            }
            var q = (p).toString();
            if (this_2.aj != null) {
                q = this_2.aj.i(p);
            }
            m.value = p;
            n.value = p;
            m.label = q;
            if (this_2.formatLabel != null) {
                this_2.formatLabel(this_2, m);
            }
            q = m.label;
            n.label = q;
            var r = this_2.view.cp(((function () {
                var $ret = new TextBlock();
                $ret.ak = q;
                return $ret;
            })()));
            n.width = r.width;
            n.height = r.height;
            if (this_2.as == 0) {
                n.offsetX = -1 * (r.width / 2);
                n.offsetY = -1 * (r.height);
            }
            else {
                n.offsetX = -1 * r.width;
                n.offsetY = -1 * (r.height / 2);
            }
            if (this_2.alignLabel != null) {
                this_2.alignLabel(this_2, n);
            }
            b.f[o] = n.width;
            b.c[o] = n.height;
            b.g[o] = n.offsetX;
            ;
            b.h[o] = n.offsetY;
            b.d[o] = q;
            b.e[o] = g._inner[o].d;
        };
        var this_2 = this;
        for (var o = 0; o < g.count; o++) {
            _loop_2(o);
        }
    };
    XamLinearGauge.prototype.bf = function (a, b, c) {
        var d = c / 10000;
        if (isNaN_(d)) {
            d = 1E-05;
        }
        var e = Math.abs(a - b);
        if (e < d) {
            return true;
        }
        return false;
    };
    XamLinearGauge.prototype.fl = function () {
        var a = this.an;
        var b = a.a;
        b.e = this.hs;
        b.f = this.ht;
        b.c = this.bw;
        b.a = this.bu;
        b.b = this.bv;
    };
    XamLinearGauge.prototype.fn = function () {
        var a = this.c0;
        if (isNaN_(a)) {
            return;
        }
        var b = this.an.c;
        var c = this.ar;
        var d = new LinearGraphNeedleParameters();
        d.c = this.ap;
        d.e = this.a8;
        d.d = this.as;
        d.u = this.cf;
        d.q = this.cb;
        d.v = this.cg;
        d.r = this.cc;
        d.t = this.ce;
        d.p = this.ca;
        d.s = this.cd;
        d.w = this.ch;
        d.o = this.b9 * 0.5 / this.cm();
        var e = new LinearGraphNeedleFrame();
        e.r = this.hx;
        e.s = this.hy;
        e.o = this.ci;
        var f = new LinearGraphNeedlePreparer();
        f.b = d;
        f.c(e);
        e.l = -90;
        var g = c.i(a);
        e.p = g;
        b.af = e;
    };
    XamLinearGauge.prototype.hv = function (a, b) {
        if (b != null && b.count > 0) {
            return b.item(a % b.count);
        }
        else {
            return null;
        }
    };
    XamLinearGauge.prototype.fz = function (a) {
        var b = this.h8;
        var c = a.c;
        var d = this.a1;
        var e = c.j;
        var f = c.w;
        var g = c.v;
        var h = c.ad;
        var i = c.x;
        var j = this.az;
        var k = c.i;
        var l = c.p;
        var m = c.o;
        var n = c.ac;
        var o = c.q;
        d.f = true;
        for (var p = 0; p < this.bi.count; p++) {
            d.n(this.bi._inner[p]);
        }
        this.bi.clear();
        var q = this.cm();
        var r = this.c2();
        var _loop_3 = function (s) {
            var t = void 0, u = void 0, v, w;
            if (this_3.as == 1) {
                t = b.left + q * f;
                u = r - e[s];
                v = b.left + q * g;
                w = u;
            }
            else {
                t = b.left + e[s];
                u = q * (1 - f);
                v = t;
                w = q * (1 - g);
            }
            var x = d.a();
            var y = new PathGeometry();
            var z = new PathFigure();
            z._startPoint = { $type: Point_$type, x: t, y: u };
            z._segments.add(((function () {
                var $ret = new LineSegment(1);
                $ret.c = { $type: Point_$type, x: v, y: w };
                return $ret;
            })()));
            y.c.add(z);
            x.ak = y;
            x._stroke = h;
            x.ac = i;
            this_3.bi.add(x);
        };
        var this_3 = this;
        for (var s = 0; s < e.length; s++) {
            _loop_3(s);
        }
        var _loop_4 = function (aa) {
            var ab = void 0, ac = void 0, ad, ae;
            if (this_4.as == 1) {
                ab = b.left + q * l;
                ac = r - k[aa];
                ad = b.left + q * m;
                ae = ac;
            }
            else {
                ab = k[aa];
                ac = q * (1 - l);
                ad = ab;
                ae = q * (1 - m);
            }
            var af = d.a();
            var ag = new PathGeometry();
            var ah = new PathFigure();
            ah._startPoint = { $type: Point_$type, x: ab, y: ac };
            ah._segments.add(((function () {
                var $ret = new LineSegment(1);
                $ret.c = { $type: Point_$type, x: ad, y: ae };
                return $ret;
            })()));
            ag.c.add(ah);
            af.ak = ag;
            af._stroke = n;
            af.ac = o;
            this_4.bi.add(af);
        };
        var this_4 = this;
        for (var aa = 0; aa < k.length; aa++) {
            _loop_4(aa);
        }
        d.f = false;
    };
    XamLinearGauge.prototype.fw = function (a) {
        var b = this.h8;
        var c = a.c;
        var d = c.e;
        var e = c.d;
        var f = c.g;
        var g = c.h;
        var h = c.f;
        var i = c.c;
        var j = c.n;
        var k = this.ay;
        k.f = true;
        for (var l = 0; l < this.bg.count; l++) {
            k.n(this.bg._inner[l]);
        }
        this.bg.clear();
        var m = c.ab;
        var n = this.c1();
        var o = this.c2();
        for (var p = 0; p < e.length; p++) {
            var q = void 0, r = void 0;
            if (this.as == 1) {
                q = b.left + n * j;
                r = b.top + o - d[p];
            }
            else {
                q = b.left + d[p];
                r = b.top + n * (1 - j);
            }
            var s = k.a();
            s.ak = e[p];
            this.view.bt(s, m);
            var t = h[p];
            var u = i[p];
            var v = f[p];
            var w = g[p];
            this.view.bk(s, q + v, r + w);
            this.bg.add(s);
        }
        k.f = false;
    };
    XamLinearGauge.prototype.fy = function (a) {
        var b = a.c;
        var c = this.a0;
        c.f = true;
        for (var d = 0; d < this.bh.count; d++) {
            c.n(this.bh._inner[d]);
        }
        this.bh.clear();
        var e = this.cm();
        var f = this.c2();
        var g = this.h2();
        var h = this.view.cm();
        if (isNaN_(b.s) || isNaN_(b.t) || isNaN_(b.u) || isNaN_(b.r)) {
            h.ak = null;
        }
        else {
            var i = this.cp();
            h.ak = b.ae(g, e, i, this.as);
            h._fill = this.hz;
            h._stroke = this.h0;
            h.ac = this.ct;
        }
        for (var j = 0; j < b.m.count; j++) {
            var k = b.m._inner[j];
            var l = c.a();
            l.ak = k.k(g, e, f, this.as);
            l._fill = k.i;
            l._stroke = k.j;
            l.ac = k.h;
            this.bh.add(l);
        }
        this.view.bs(this.bh);
        c.f = false;
    };
    XamLinearGauge.prototype.fv = function (a) {
        var b = this.h7;
        var c = this.view.ck();
        var d = a.a;
        var e = this.as == 0 ? b.height : b.width;
        var f = this.as == 0 ? b.width : b.height;
        var g = d.g(e, f, this.as);
        c.ak = g;
        c._fill = d.e;
        c._stroke = d.f;
        c.ac = d.c;
    };
    XamLinearGauge.prototype.bl = function (a) {
        var b = new List$1(Point_$type, 0);
        for (var c = 0; c < a.count; c++) {
            b.add({ $type: Point_$type, x: a._inner[c].x, y: a._inner[c].y });
        }
        return b;
    };
    XamLinearGauge.prototype.fx = function (a) {
        this.bk = null;
        var b = this.view.cl();
        var c = this.c0;
        if (isNaN_(c) || c < this.bs || c > this.br) {
            b.ak = null;
            return;
        }
        var d = a.c;
        var e = d.af;
        var f = this.cm();
        var g = this.c2();
        var h = f;
        var i = e.p;
        var j = 0;
        if (this.as == 1) {
            i = this.h8.left;
            j = g - e.p;
        }
        b.ak = e.t(h, i, j);
        b._fill = e.r;
        b._stroke = e.s;
        b.ac = e.o;
        var k = new PathVisualData(1, "needle", b);
        var l = k.getPoints(new GetPointsSettings());
        if (l.count > 0) {
            this.bk = this.bl(l._inner[0]);
            var m = 1.7976931348623157E+308, n = 1.7976931348623157E+308;
            var o = -1.7976931348623157E+308, p = -1.7976931348623157E+308;
            for (var q = 0; q < this.bk.count; q++) {
                m = this.bk._inner[q].x < m ? this.bk._inner[q].x : m;
                n = this.bk._inner[q].y < n ? this.bk._inner[q].y : n;
                o = this.bk._inner[q].x > o ? this.bk._inner[q].x : o;
                p = this.bk._inner[q].y > p ? this.bk._inner[q].y : p;
            }
            this.h4 = new Rect(2, { $type: Point_$type, x: m, y: n }, { $type: Point_$type, x: o, y: p });
        }
    };
    XamLinearGauge.prototype.fk = function (a, b) {
        this.a5 = true;
        this.view.br();
    };
    XamLinearGauge.prototype.fc = function (a, b) {
        this.a5 = true;
        this.view.br();
    };
    XamLinearGauge.prototype.cm = function () {
        if (this.as == 0) {
            return this.ba ? this.h9.height : this.h8.height;
        }
        return this.ba ? this.h9.width : this.h8.width;
    };
    XamLinearGauge.prototype.cp = function () {
        if (this.as == 0) {
            return this.h9.width * (this.cn - this.cs);
        }
        return this.h9.height * (this.cn - this.cs);
    };
    XamLinearGauge.prototype.c1 = function () {
        if (this.as == 0) {
            return this.h9.height;
        }
        return this.h9.width;
    };
    XamLinearGauge.prototype.c2 = function () {
        if (this.as == 0) {
            return this.h9.width;
        }
        return this.h9.height;
    };
    XamLinearGauge.prototype.cr = function () {
        var a = this.cs;
        if (this.as == 0) {
            if (this.a8) {
                a = 1 - this.cn;
            }
            return this.h9.left + this.h9.width * a;
        }
        if (this.a8) {
            a = 1 - this.cn;
        }
        return this.h9.top + this.h9.height * a;
    };
    XamLinearGauge.prototype.h2 = function () {
        var a = this.h8.left;
        if (this.ba) {
            a = 0;
        }
        var b = this.cs;
        if (this.as == 0) {
            if (this.a8) {
                b = 1 - this.cn;
            }
            return { $type: Point_$type, x: a + this.h8.width * b, y: this.h8.top };
        }
        if (!this.a8) {
            b = 1 - this.cn;
        }
        return { $type: Point_$type, x: a, y: this.h8.top + this.h8.height * b };
    };
    XamLinearGauge.prototype.fi = function (a, b, c) {
        switch (a) {
            case XamLinearGauge.$$p[0]:
            case XamLinearGauge.$$p[3]:
            case XamLinearGauge.$$p[44]:
            case XamLinearGauge.$$p[48]:
            case XamLinearGauge.$$p[52]:
            case XamLinearGauge.$$p[19]:
            case XamLinearGauge.$$p[25]:
            case XamLinearGauge.$$p[35]:
                this.view.a8(a, b, c);
                break;
            case XamLinearGauge.$$p[39]:
                this.view.bd(b, c);
                break;
            case XamLinearGauge.$$p[42]:
                this.view.be(b, c);
                break;
            case "PixelScalingRatio":
                if (isNaN_(DeviceUtils.a(this.cj))) {
                    this.bt = 1;
                }
                else {
                    this.bt = DeviceUtils.a(this.cj);
                }
                break;
            case "ActualPixelScalingRatio":
                this.view.bi();
                break;
        }
        switch (a) {
            case XamLinearGauge.$$p[11]:
            case XamLinearGauge.$$p[12]:
                if (this.dk != null) {
                    this.aj = new BindingFormatter();
                    this.aj.j = this.dk;
                    this.aj.d = this.ag;
                }
                else {
                    this.aj = null;
                }
                this.a5 = true;
                this.view.br();
                break;
            case XamLinearGauge.$$p[60]:
                if (this.valueChanged != null) {
                    this.valueChanged(this, new DoubleValueChangedEventArgs(b, c));
                }
                this.a5 = true;
                this.view.br();
                break;
            case XamLinearGauge.$$p[59]:
                this.av.r = this.c4;
                this.view.br();
                break;
            case "TransitionProgress":
                if (this.cz >= 1) {
                    this.av.w();
                    var d = this.an;
                    this.an = this.ao;
                    this.ao = d;
                    this.fm();
                    this.fn();
                    this.fo();
                    this.fl();
                    this.fv(this.an);
                    this.fy(this.an);
                    this.fx(this.an);
                    this.fz(this.an);
                    this.fw(this.an);
                }
                this.am.d(this.cz, this.ao, this.an);
                this.fv(this.am);
                this.fy(this.am);
                this.fx(this.am);
                this.fz(this.am);
                this.fw(this.am);
                this.view.as();
                break;
            case XamLinearGauge.$$p[25]:
            case XamLinearGauge.$$p[30]:
            case XamLinearGauge.$$p[24]:
            case XamLinearGauge.$$p[36]:
            case XamLinearGauge.$$p[27]:
            case XamLinearGauge.$$p[32]:
            case XamLinearGauge.$$p[28]:
            case XamLinearGauge.$$p[33]:
            case XamLinearGauge.$$p[26]:
            case XamLinearGauge.$$p[31]:
            case XamLinearGauge.$$p[29]:
            case XamLinearGauge.$$p[34]:
            case XamLinearGauge.$$p[37]:
            case XamLinearGauge.$$p[35]:
            case XamLinearGauge.$$p[0]:
            case XamLinearGauge.$$p[3]:
            case XamLinearGauge.$$p[4]:
            case XamLinearGauge.$$p[1]:
            case XamLinearGauge.$$p[2]:
            case XamLinearGauge.$$p[44]:
            case XamLinearGauge.$$p[48]:
            case XamLinearGauge.$$p[50]:
            case XamLinearGauge.$$p[46]:
            case XamLinearGauge.$$p[47]:
            case XamLinearGauge.$$p[52]:
            case XamLinearGauge.$$p[19]:
            case XamLinearGauge.$$p[39]:
            case XamLinearGauge.$$p[42]:
            case XamLinearGauge.$$p[40]:
            case XamLinearGauge.$$p[41]:
            case XamLinearGauge.$$p[7]:
            case XamLinearGauge.$$p[13]:
            case XamLinearGauge.$$p[10]:
            case XamLinearGauge.$$p[14]:
            case XamLinearGauge.$$p[15]:
            case XamLinearGauge.$$p[54]:
            case XamLinearGauge.$$p[55]:
            case XamLinearGauge.$$p[56]:
            case XamLinearGauge.$$p[53]:
            case XamLinearGauge.$$p[57]:
            case XamLinearGauge.$$p[22]:
            case XamLinearGauge.$$p[21]:
            case XamLinearGauge.$$p[20]:
            case XamLinearGauge.$$p[23]:
                this.a5 = true;
                this.view.br();
                break;
            case XamLinearGauge.$$p[43]:
                var e = b;
                var f = c;
                if (e != null) {
                    var g = e;
                    g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.fs));
                }
                if (f != null) {
                    var h = f;
                    h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.fs));
                }
                this.a5 = true;
                this.view.br();
                break;
            case XamLinearGauge.$$p[38]:
            case XamLinearGauge.$$p[9]:
            case XamLinearGauge.$$p[18]:
            case XamLinearGauge.$$p[16]:
            case XamLinearGauge.$$p[45]:
            case XamLinearGauge.$$p[49]:
                this.bs = Math.min(this.b4, this.b3);
                this.br = Math.max(this.b4, this.b3);
                var i = this.cr();
                this.ar = new LinearGraphScaler(this.bs, this.br, i, i + this.cp(), this.a8);
                this.a5 = true;
                this.view.br();
                break;
            case XamLinearGauge.$$p[5]:
            case XamLinearGauge.$$p[6]:
                this.view.b1();
                this.a5 = true;
                this.view.br();
                break;
        }
        this.fj(a);
    };
    XamLinearGauge.prototype.fs = function (a, b) {
        var e_1, _a, e_2, _b;
        if (b.oldItems != null) {
            try {
                for (var _c = tslib_1.__values(fromEn(b.oldItems)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var c = _d.value;
                    c.propertyChanged = delegateRemove(c.propertyChanged, runOn(this, this.fr));
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        }
        if (b.newItems != null) {
            try {
                for (var _e = tslib_1.__values(fromEn(b.newItems)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var d = _f.value;
                    d.propertyChanged = delegateCombine(d.propertyChanged, runOn(this, this.fr));
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
        this.a5 = true;
        this.view.br();
    };
    XamLinearGauge.prototype.fr = function (a, b) {
        this.a5 = true;
        this.view.br();
    };
    XamLinearGauge.prototype.e9 = function (a, b) {
        this.a5 = true;
        this.view.br();
    };
    XamLinearGauge.prototype.refresh = function () {
        this.a5 = true;
        this.view.br();
    };
    XamLinearGauge.prototype.ax = function () {
        return FontUtil.toFontInfo(this.view.ah, this.dd);
    };
    Object.defineProperty(XamLinearGauge.prototype, "cj", {
        get: function () {
            return this.bp;
        },
        set: function (a) {
            var b = this.bp;
            this.bp = a;
            this.fi("PixelScalingRatio", b, this.bp);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamLinearGauge.prototype, "bt", {
        get: function () {
            return this.bo;
        },
        set: function (a) {
            var b = this.bo;
            this.bo = a;
            this.fi("ActualPixelScalingRatio", b, this.bo);
        },
        enumerable: true,
        configurable: true
    });
    XamLinearGauge.$t = markType(XamLinearGauge, 'XamLinearGauge', Control.$, [INotifyPropertyChanged_$type]);
    XamLinearGauge.$$p = markDep(DependencyProperty, PropertyMetadata, XamLinearGauge, 'fi', ['BackingBrush:hs:f3', [Brush.$, null], 'BackingInnerExtent:bu:f4', [1, 0], 'BackingOuterExtent:bv:f5', [1, 1], 'BackingOutline:ht:f6', [Brush.$, null], 'BackingStrokeThickness:bw:f7', [1, 2], 'FontBrush:hu:f8', [Brush.$, null], 'Font:dd:f9', [2, null], 'Interval:by:ga', [1, NaN], 'IsNeedleDraggingEnabled:a7:gb', [0, false], 'IsScaleInverted:a8:gc', [0, false], 'LabelExtent:bz:gd', [1, 0], 'LabelFormat:dk:ge', [2, null], 'LabelFormatSpecifiers:ag:gf', [Array_$type, null], 'LabelInterval:b0:gg', [1, NaN], 'LabelsPostInitial:b1:gh', [1, 0], 'LabelsPreTerminal:b2:gi', [1, 0], 'MaximumValue:b3:gj', [1, 100], 'MergeViewPorts:ba:gk', [0, false], 'MinimumValue:b4:gl', [1, 0], 'MinorTickBrush:hw:gm', [Brush.$, null], 'MinorTickCount:b5:gn', [1, 4], 'MinorTickEndExtent:b6:go', [1, 0.35], 'MinorTickStartExtent:b7:gp', [1, 0.05], 'MinorTickStrokeThickness:b8:gq', [1, 1], 'NeedleBreadth:b9:gr', [1, 6], 'NeedleBrush:hx:gs', [Brush.$, null], 'NeedleInnerBaseWidth:ca:gt', [1, NaN], 'NeedleInnerExtent:cb:gu', [1, NaN], 'NeedleInnerPointExtent:cc:gv', [1, NaN], 'NeedleInnerPointWidth:cd:gw', [1, NaN], 'NeedleName:d5:gx', [2, null], 'NeedleOuterBaseWidth:ce:gy', [1, NaN], 'NeedleOuterExtent:cf:gz', [1, NaN], 'NeedleOuterPointExtent:cg:g0', [1, NaN], 'NeedleOuterPointWidth:ch:g1', [1, NaN], 'NeedleOutline:hy:g2', [Brush.$, null], 'NeedleShape:ap:g3', [LinearGraphNeedleShape_$type, enumGetBox(LinearGraphNeedleShape_$type, 3)], 'NeedleStrokeThickness:ci:g4', [1, 1], 'Orientation:as:g5', [LinearScaleOrientation_$type, enumGetBox(LinearScaleOrientation_$type, 0)], 'RangeBrushes:ah:g6', [BrushCollection.$, null], 'RangeInnerExtent:ck:g7', [1, 0.05], 'RangeOuterExtent:cl:g8', [1, 0.65], 'RangeOutlines:ai:g9', [BrushCollection.$, null], 'Ranges::ha', [LinearGraphRangeCollection.$, null], 'ScaleBrush:hz:hb', [Brush.$, null], 'ScaleEndExtent:cn:hc', [1, 0.95], 'ScaleInnerExtent:co:hd', [1, 0.05], 'ScaleOuterExtent:cq:he', [1, 0.65], 'ScaleOutline:h0:hf', [Brush.$, null], 'ScaleStartExtent:cs:hg', [1, 0.05], 'ScaleStrokeThickness:ct:hh', [1, 1], 'ShowToolTipTimeout:c3:hi', [1, 500], 'TickBrush:h1:hj', [Brush.$, null], 'TickEndExtent:cu:hk', [1, 0.65], 'TicksPostInitial:cv:hl', [1, 0], 'TicksPreTerminal:cw:hm', [1, 0], 'TickStartExtent:cx:hn', [1, 0.05], 'TickStrokeThickness:cy:ho', [1, 2], 'ToolTip::hp', [4, null], 'TransitionDuration:c4:hq', [1, 0], 'Value:c0:hr', [1, NaN]]);
    return XamLinearGauge;
}(Control));
export { XamLinearGauge };
/**
 * @hidden
 */
var XamLinearGaugeView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(XamLinearGaugeView, _super);
    function XamLinearGaugeView(a) {
        var _this = _super.call(this) || this;
        _this.ap = 0;
        _this.ao = 0;
        _this.m = null;
        _this.i = null;
        _this.aj = null;
        _this.p = null;
        _this.ah = null;
        _this.aa = null;
        _this.z = null;
        _this.y = null;
        _this.ab = null;
        _this.ci = null;
        _this.cj = null;
        _this.ch = null;
        _this.ca = null;
        _this.cb = null;
        _this.b7 = null;
        _this.b8 = null;
        _this.cc = null;
        _this.cd = null;
        _this.ce = null;
        _this.b9 = null;
        _this.c = null;
        _this.d = null;
        _this.e = null;
        _this.f = null;
        _this.q = false;
        _this.v = null;
        _this.a = ["needle", "backing", "scale", "tick", "minortick", "label"];
        _this.u = false;
        _this.t = false;
        _this.ai = null;
        _this.k = null;
        _this.ak = 0;
        _this.am = 0;
        _this.aq = null;
        _this.an = -1;
        _this.cf = null;
        _this.al = 0;
        _this.x = null;
        _this.b6 = ((function () {
            var $ret = new Brush();
            $ret.fill = "black";
            return $ret;
        })());
        _this.r = false;
        _this.n = null;
        _this.b5 = null;
        _this.ac = 0;
        _this.ad = 1;
        _this.m = a;
        _this.v = new Dictionary$2(String_$type, Dictionary$2.$.specialize(String_$type, Brush.$), 0);
        _this.ci = new Path();
        _this.cj = new Path();
        _this.ch = new Path();
        _this.aa = new List$1(Path.$, 0);
        _this.z = new List$1(Path.$, 0);
        _this.y = new List$1(TextBlock.$, 0);
        _this.ab = new List$1(TextBlock.$, 0);
        return _this;
    }
    XamLinearGaugeView.prototype.a3 = function () {
        var a = this.m.cj;
        var b = this.m.bt;
        if (!isNaN_(a) && a != 0) {
            return;
        }
        if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
            this.m.bt = window.devicePixelRatio;
        }
    };
    XamLinearGaugeView.prototype.bc = function () {
        this.k = new LinearGraphTooltipDataContext();
        this.al = this.m.c3;
        this.a3();
    };
    XamLinearGaugeView.prototype.s = function () {
        return true;
    };
    XamLinearGaugeView.prototype.cl = function () {
        return this.ci;
    };
    XamLinearGaugeView.prototype.cm = function () {
        return this.cj;
    };
    XamLinearGaugeView.prototype.ck = function () {
        return this.ch;
    };
    XamLinearGaugeView.prototype.a1 = function () {
        this.q = true;
        var a = ["#778899", "#EBEDEF", "#e0e0e0", "#617583", "rgba(100,107,114,.74)", "rgba(100,107,114,.74)"];
        var b = ["#778899", "#B2B9C0", "#e0e0e0", null, null, null];
        var c = ((function () {
            var $ret = new List$1(Array_$type, 0);
            $ret.add(a);
            $ret.add(b);
            return $ret;
        })());
        this.v.clear();
        var d = this.a.length;
        var _loop_5 = function (e) {
            var f = this_5.a[e];
            var g = "ui-lineargauge-" + f;
            var h = "ui-lineargauge-" + f + "-fill";
            var i = "ui-lineargauge-" + f + "-outline";
            var j;
            if (!((function () { var k = XamLinearGaugeView.w.tryGetValue(h, j); j = k.p1; return k.ret; })())) {
                j = BrushUtil.j(h, g, "background-color", this_5.ah, a[e]);
                XamLinearGaugeView.w.addItem(h, j);
            }
            var k;
            if (!((function () { var l = XamLinearGaugeView.w.tryGetValue(i, k); k = l.p1; return l.ret; })())) {
                k = BrushUtil.j(i, g, "border-top-color", this_5.ah, b[e]);
                XamLinearGaugeView.w.addItem(i, k);
            }
            var l = new Dictionary$2(String_$type, Brush.$, 0);
            l.item("fill", j);
            l.item("outline", k);
            this_5.v.item(this_5.a[e], l);
        };
        var this_5 = this;
        for (var e = 0; e < d; e++) {
            _loop_5(e);
        }
        this.b0();
        if (XamLinearGaugeView.g == null || XamLinearGaugeView.h == null) {
            var m = BrushUtil.f("ui-lineargauge-range-fill-palette-", "ui-lineargauge-range-outline-palette-", "ui-lineargauge-range-palette-", this.ah, XamLinearGaugeView.g, XamLinearGaugeView.h, ["#216E99", "#216E99", "#44acd6", "#44acd6", "#cecece", "#cecece"]);
            XamLinearGaugeView.g = m.p4;
            XamLinearGaugeView.h = m.p5;
        }
        this.c = XamLinearGaugeView.g;
        this.d = XamLinearGaugeView.h;
        if (this.e == null) {
            this.m.ah = this.c;
        }
        if (this.f == null) {
            this.m.ai = this.d;
        }
        this.q = false;
    };
    XamLinearGaugeView.prototype.b0 = function () {
        this.q = true;
        var a = this.a.length;
        for (var b = 0; b < a; b++) {
            var c = this.a[b];
            this.bz(c, this.v.item(c));
        }
        this.q = false;
    };
    XamLinearGaugeView.prototype.bz = function (a, b) {
        var c = b.item("fill");
        var d = b.item("outline");
        switch (a) {
            case "needle":
                if (this.ca == null) {
                    this.m.hx = c;
                }
                if (this.cb == null) {
                    this.m.hy = d;
                }
                break;
            case "scale":
                if (this.cc == null) {
                    this.m.hz = c;
                }
                if (this.cd == null) {
                    this.m.h0 = d;
                }
                break;
            case "backing":
                if (this.b7 == null) {
                    this.m.hs = c;
                }
                if (this.b8 == null) {
                    this.m.ht = d;
                }
                break;
            case "tick":
                if (this.ce == null) {
                    this.m.h1 = c;
                }
                break;
            case "minortick":
                if (this.b9 == null) {
                    this.m.hw = c;
                }
                break;
            case "label":
                this.b6 = c;
                break;
        }
    };
    XamLinearGaugeView.prototype.a8 = function (a, b, c) {
        var d = b;
        var e = c;
        if (!this.q) {
            switch (a) {
                case XamLinearGauge.$$p[25]:
                    this.ca = e;
                    break;
                case XamLinearGauge.$$p[35]:
                    this.cb = e;
                    break;
                case XamLinearGauge.$$p[0]:
                    this.b7 = e;
                    break;
                case XamLinearGauge.$$p[3]:
                    this.b8 = e;
                    break;
                case XamLinearGauge.$$p[44]:
                    this.cc = e;
                    break;
                case XamLinearGauge.$$p[48]:
                    this.cd = e;
                    break;
                case XamLinearGauge.$$p[52]:
                    this.ce = e;
                    break;
                case XamLinearGauge.$$p[19]:
                    this.b9 = e;
                    break;
            }
            if (e == null) {
                this.b0();
            }
        }
    };
    XamLinearGaugeView.prototype.bd = function (a, b) {
        if (!this.q) {
            this.e = b;
            if (this.e == null) {
                this.m.ah = this.c;
            }
        }
    };
    XamLinearGaugeView.prototype.be = function (a, b) {
        if (!this.q) {
            this.f = b;
            if (this.f == null) {
                this.m.ai = this.d;
            }
        }
    };
    XamLinearGaugeView.prototype.b = function (a, b) {
        this.ah.startCSSQuery();
        for (var c = 0; c < b.length; c++) {
            b[c] = this.ah.getCssDefaultPropertyValue(a, b[c]);
        }
        this.ah.endCSSQuery();
        return b;
    };
    XamLinearGaugeView.prototype.bv = function () {
        this.a1();
        this.b1();
        this.br();
    };
    XamLinearGaugeView.prototype.cg = function (a) {
        var b = CanvasGestureDOMEventProxy.cy(this.ah.rootWrapper);
        return { $type: Point_$type, x: a.x - b.left, y: a.y - b.top };
    };
    XamLinearGaugeView.prototype.bu = function (a, b, c, d) {
        this.cf = a;
        this.an = c;
        this.aq = d;
        this.bq();
        if (this.ah != null) {
            this.am = this.ah.setTimeout(runOn(this, this.b2), this.al);
        }
        else {
            this.am = window.setTimeout(runOn(this, this.b2), this.al);
        }
        this.t = true;
    };
    XamLinearGaugeView.prototype.a2 = function () {
        if (this.t) {
            if (this.ah != null) {
                this.ah.clearTimeout(this.am);
            }
            else {
                window.clearTimeout(this.am);
            }
            this.t = false;
        }
        if (this.u) {
            var a = this.m.toolTip;
            if (this.ah != null) {
                this.ah.clearTimeout(this.ak);
            }
            else {
                window.clearTimeout(this.ak);
            }
            a.hide();
            this.u = false;
            this.k = null;
        }
        this.al = this.m.c3;
    };
    XamLinearGaugeView.prototype.bq = function () {
        if (this.t) {
            if (this.ah != null) {
                this.ah.clearTimeout(this.am);
            }
            else {
                window.clearTimeout(this.am);
            }
        }
        if (this.u) {
            var a = this.m.toolTip;
            if (this.ah != null) {
                this.ah.clearTimeout(this.ak);
            }
            else {
                window.clearTimeout(this.ak);
            }
            a.hide();
            this.u = false;
            this.al = intDivide(this.m.c3, 2);
        }
    };
    XamLinearGaugeView.prototype.b2 = function () {
        var _this = this;
        if (this.t) {
            if (this.ah != null) {
                this.ah.clearTimeout(this.am);
            }
            else {
                window.clearTimeout(this.am);
            }
            this.t = false;
        }
        var a = this.an;
        var b = this.aq;
        var c = this.cf;
        if (this.ah != null) {
            this.ak = this.ah.setTimeout(runOn(this, this.a2), 10 * this.m.c3);
        }
        else {
            this.ak = window.setTimeout(runOn(this, this.a2), 10 * this.m.c3);
        }
        var d = this.m.ranges._inner[a];
        if (this.ai != this.m.toolTip) {
            if (this.ai != null) {
                this.ai.remove();
            }
            this.ai = this.m.toolTip;
            this.ai.setStyleProperty("z-index", "10000");
            this.ai.setStyleProperty("position", "absolute");
            this.ah.append(this.ai);
        }
        this.k = this.j(b, a);
        var context_ = this.k;
        var tooltip_ = this.ai;
        var tooltipType_ = b;
        if (tooltip_.updateToolTip) {
            tooltip_.updateToolTip(context_, tooltipType_);
        }
        ;
        var e = this.ai.findByClass(".ui-tooltip-container");
        if (e != null && e.length > 0) {
            e[0].setAttribute("style", null);
        }
        var f = "ui-simple-default-tooltip-content";
        var g = this.ai.findByClass("." + f);
        if (g != null && g.length > 0) {
            var h = ["border-top-color", "border-top-width", "border-top-style", "border-top-left-radius", "background-color", "padding-top", "font-weight"];
            var i = ["border-color", "border-width", "border-style", "border-radius", "background-color", "padding", "font-weight"];
            var j = ((function () {
                var $ret = new List$1(String_$type, 0);
                $ret.add(_this.k.brush.color.colorString);
                $ret.add("2px");
                $ret.add("solid");
                $ret.add("4px");
                $ret.add("rgba(230, 230, 230, 0.74)");
                $ret.add("4px");
                $ret.add("bold");
                return $ret;
            })());
            var k = new Dictionary$2(String_$type, String_$type, 0);
            var l = new Array(h.length);
            arrayCopy1(h, 0, l, 0, h.length);
            this.b(f, l);
            for (var m = 0; m < l.length; m++) {
                this.ai.setStyleProperty(i[m], (l[m] == null) ? j._inner[m] : l[m]);
            }
        }
        this.ai.setStyleProperty("top", (c.y + 15).toString() + "px").setStyleProperty("left", (c.x + 15).toString() + "px");
        this.ai.show();
        this.u = true;
    };
    XamLinearGaugeView.prototype.j = function (a, b) {
        var c = new LinearGraphTooltipDataContext();
        switch (a) {
            case "range":
                var d = this.m.ranges._inner[b];
                c.item = d;
                c.itemName = d.u;
                c.label = d.u + ": " + d.o.toString() + "-" + d.j.toString();
                var e = d.an;
                var f = d.ao;
                c.brush = e != null ? e : this.m.hv(b, this.c);
                c.outline = f != null ? f : this.m.hv(b, this.d);
                c.thickness = d.p;
                break;
            case "needle":
                c.item = this.m.c0;
                c.itemName = this.m.d5;
                c.label = this.m.d5 != null ? this.m.d5 + ": " + this.m.c0.toString() : this.m.c0.toString();
                c.brush = this.m.hx;
                c.outline = this.m.hy;
                c.thickness = this.m.ci;
                break;
        }
        return c;
    };
    XamLinearGaugeView.prototype.a9 = function (a) {
        if (a == null) {
            this.aj = null;
            this.ah = null;
            this.ai = null;
            this.p = null;
            this.at();
            return;
        }
        var b = a;
        this.ah = b;
        this.m.av.u(this.ah);
        this.ah.rootWrapper.addClass("ui-lineargauge-container");
        this.ad = (isNaN_(this.m.cj) ? this.m.bt : this.m.cj);
        var c = this.ad;
        var d = Math.round(b.rootWrapper.width());
        var e = Math.round(b.rootWrapper.height());
        var f = d * c;
        var g = e * c;
        this.ah.rootWrapper.setStyleProperty("position", "relative");
        var h = this.ah.createElement("canvas");
        h.setStyleProperty("position", "absolute");
        this.ah.append(h);
        this.ap = f;
        this.ao = g;
        h.setAttribute("width", f.toString());
        h.setAttribute("height", g.toString());
        h.setStyleProperty("width", d.toString() + "px");
        h.setStyleProperty("height", e.toString() + "px");
        this.m.h9 = new Rect(0, 0, 0, d, e);
        this.m.h7 = new Rect(0, 0, 0, d, e);
        this.aj = h;
        var i = this.ah.get2DCanvasContext(this.aj);
        this.p = new RenderingContext(new CanvasViewRenderer(), i);
        this.a1();
        this.b1();
        this.p.ac(this.n);
        this.at();
        if (TypeRegistrar.isRegistered("CanvasGestureDOMEventProxy")) {
            this.i = typeCast(EventProxy.$, TypeRegistrar.create("CanvasGestureDOMEventProxy", this.ah.rootWrapper, this.ah, false));
        }
        if (this.i != null) {
            var j = this.i;
            j.onMouseOver = delegateCombine(j.onMouseOver, runOn(this, this.ay));
            var k = this.i;
            k.onMouseLeave = delegateCombine(k.onMouseLeave, runOn(this, this.ax));
            var l = this.i;
            l.onContactStarted = delegateCombine(l.onContactStarted, runOn(this, this.aw));
            var m = this.i;
            m.onContactMoved = delegateCombine(m.onContactMoved, runOn(this, this.av));
            var n = this.i;
            n.onContactCompleted = delegateCombine(n.onContactCompleted, runOn(this, this.au));
        }
        this.bp();
    };
    XamLinearGaugeView.prototype.au = function (a, b) {
        if (this.m != null) {
            this.m.onMouseUp(a);
        }
    };
    XamLinearGaugeView.prototype.av = function (a, b) {
        if (this.m != null) {
            this.m.onMouseMove(a, b);
        }
    };
    XamLinearGaugeView.prototype.aw = function (a, b) {
        if (this.m != null) {
            this.m.onMouseDown(a, b);
        }
    };
    XamLinearGaugeView.prototype.ay = function (a, b, c) {
        if (this.m != null) {
            this.m.onMouseOver(a, b, c);
        }
    };
    XamLinearGaugeView.prototype.ax = function (a) {
        if (this.m != null) {
            this.m.onMouseLeave();
        }
    };
    XamLinearGaugeView.prototype.at = function () {
        if (this.i != null) {
            var a = this.i;
            a.onMouseOver = delegateRemove(a.onMouseOver, runOn(this, this.ay));
            var b = this.i;
            b.onMouseLeave = delegateRemove(b.onMouseLeave, runOn(this, this.ax));
            var c = this.i;
            c.onContactStarted = delegateRemove(c.onContactStarted, runOn(this, this.aw));
            var d = this.i;
            d.onContactMoved = delegateRemove(d.onContactMoved, runOn(this, this.av));
            var e = this.i;
            e.onContactCompleted = delegateRemove(e.onContactCompleted, runOn(this, this.au));
            this.i.aq();
        }
    };
    XamLinearGaugeView.prototype.ba = function () {
        this.a3();
        var a = Math.round(this.ah.rootWrapper.width());
        var b = Math.round(this.ah.rootWrapper.height());
        this.m.h9 = new Rect(0, 0, 0, a, b);
        this.m.h7 = new Rect(0, 0, 0, a, b);
        if (this.i != null) {
            this.i.bf = this.m.h9;
        }
    };
    XamLinearGaugeView.prototype.as = function () {
        this.bp();
    };
    XamLinearGaugeView.prototype.bs = function (a) {
        this.x = a;
    };
    XamLinearGaugeView.prototype.bp = function () {
        var a = this.m.h9.width;
        var b = this.m.h9.height;
        var c = a * this.ad;
        var d = b * this.ad;
        if (this.ap != a || this.ao != b) {
            this.aj.setAttribute("width", c.toString());
            this.aj.setAttribute("height", d.toString());
            this.aj.setStyleProperty("width", a.toString() + "px");
            this.aj.setStyleProperty("height", b.toString() + "px");
            this.ap = truncate(Math.round(c));
            this.ao = truncate(Math.round(d));
        }
        if (this.p.d && this.ad != 1) {
            this.p.z();
            this.p.aa(this.ad, this.ad);
        }
        this.p.k(this.m.h9.left, this.m.h9.top, this.m.h9.width, this.m.h9.height);
        this.p.s(this.ch);
        this.p.s(this.cj);
        if (this.x != null) {
            for (var e = 0; e < this.x.count; e++) {
                this.p.s(this.x._inner[e]);
            }
        }
        for (var f = 0; f < this.y.count; f++) {
            this.p.ac(this.n);
            this.p.w(this.y._inner[f]);
        }
        for (var g = 0; g < this.z.count; g++) {
            this.p.s(this.z._inner[g]);
        }
        this.p.s(this.ci);
        if (this.p.d && this.ad != 1) {
            this.p.y();
        }
    };
    XamLinearGaugeView.prototype.b1 = function () {
        if (this.m.dd != null) {
            this.n = this.m.ax();
        }
        else {
            this.n = FontUtil.getFont(this.ah);
        }
        this.ac = this.ae(this.n);
        if (this.m.hu == null) {
            var a = this.ah.rootWrapper.getStyleProperty("color");
            if (stringIsNullOrEmpty(a) == false) {
                this.b5 = new Brush();
                this.b5._fill = a;
                this.m.hu = this.b5;
            }
        }
        if (this.p != null) {
            this.p.ac(this.n);
        }
    };
    XamLinearGaugeView.prototype.af = function (a) {
        var b = typeCast(TextBlock.$, a);
        if (b != null && b.ak != null) {
            return this.p.e(b) + 0;
        }
        return 0;
    };
    XamLinearGaugeView.prototype.cp = function (a) {
        if (isNaN_(this.ac)) {
            this.ac = this.ae(null);
        }
        var b = this.af(a);
        var c = this.ac;
        return new Size(1, b, c);
    };
    XamLinearGaugeView.prototype.bt = function (a, b) {
        if (b != null) {
            a.am = b;
        }
        else {
            a.am = this.b6;
        }
    };
    XamLinearGaugeView.prototype.bk = function (a, b, c) {
        a.n = b;
        a.o = c;
    };
    XamLinearGaugeView.prototype.bj = function (a, b) {
    };
    XamLinearGaugeView.prototype.bl = function (a, b) {
    };
    XamLinearGaugeView.prototype.ae = function (a) {
        return FontUtil.getCurrentFontHeight(this.ah, a);
    };
    XamLinearGaugeView.prototype.br = function () {
        if (!this.r) {
            this.r = true;
            window.setTimeout(runOn(this, this.ar), 0);
        }
    };
    XamLinearGaugeView.prototype.ar = function () {
        if (this.r) {
            this.r = false;
            this.m.e4();
        }
    };
    XamLinearGaugeView.prototype.flush = function () {
        if (this.r) {
            this.ar();
        }
    };
    XamLinearGaugeView.prototype.o = function (a, b) {
        return FontUtil.getFontInfo(this.ah, a, b);
    };
    XamLinearGaugeView.prototype.az = function (a) {
        var e_3, _a, e_4, _b, e_5, _c;
        a.scalePath = new PathVisualData(1, "Scale", this.cj);
        a.needlePath = new PathVisualData(1, "Needle", this.ci);
        a.backingPath = new PathVisualData(1, "Backing", this.ch);
        var b = this.n;
        try {
            for (var _d = tslib_1.__values(fromEnum(this.y)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var c = _e.value;
                if (c._visibility == 0) {
                    var d = this.o(c, b);
                    var e = new LinearGraphScaleLabelVisualData();
                    e.labelValue = c.ak;
                    e.labelPosition = PointData.b({ $type: Point_$type, x: c.n, y: c.o });
                    e.labelSize = SizeData.b(this.cp(c));
                    e.appearance = AppearanceHelper.c(c, d);
                    a.scaleLabels.add(e);
                }
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return))
                    _a.call(_d);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
        try {
            for (var _f = tslib_1.__values(fromEnum(this.z)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var f = _g.value;
                if (f._visibility == 0) {
                    var g = new LinearGraphScaleTickmarkVisualData();
                    g.tickPath = new PathVisualData(1, "tickmarks", f);
                    a.scaleTickmarks.add(g);
                }
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return))
                    _b.call(_f);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        try {
            for (var _h = tslib_1.__values(fromEnum(this.x)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var h = _j.value;
                if (h._visibility == 0) {
                    var i = new LinearGraphRangeVisualData();
                    var j = new PathVisualData(1, "range", h);
                    i.rangePath = j;
                    a.ranges.add(i);
                }
            }
        }
        catch (e_5_1) {
            e_5 = { error: e_5_1 };
        }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return))
                    _c.call(_h);
            }
            finally {
                if (e_5)
                    throw e_5.error;
            }
        }
    };
    XamLinearGaugeView.prototype.a7 = function () {
        this.a3();
        if (this.i != null) {
            this.i.ap(this.ah.rootWrapper, "");
        }
    };
    XamLinearGaugeView.prototype.bb = function () {
        if (this.i != null) {
            this.i.bb(this.ah.rootWrapper, "");
        }
    };
    XamLinearGaugeView.prototype.bm = function (a) {
        a._visibility = 0;
    };
    XamLinearGaugeView.prototype.bn = function (a) {
        a._visibility = 1;
    };
    XamLinearGaugeView.prototype.bo = function (a) {
        this.aa.remove(a);
    };
    XamLinearGaugeView.prototype.co = function () {
        var a = new Path();
        this.aa.add(a);
        return a;
    };
    XamLinearGaugeView.prototype.bw = function (a) {
        a._visibility = 0;
    };
    XamLinearGaugeView.prototype.bx = function (a) {
        a._visibility = 1;
    };
    XamLinearGaugeView.prototype.by = function (a) {
        this.ab.remove(a);
    };
    XamLinearGaugeView.prototype.b4 = function () {
        var a = new TextBlock();
        this.ab.add(a);
        return a;
    };
    XamLinearGaugeView.prototype.bf = function (a) {
        a._visibility = 0;
    };
    XamLinearGaugeView.prototype.bg = function (a) {
        a._visibility = 1;
    };
    XamLinearGaugeView.prototype.bh = function (a) {
        this.z.remove(a);
    };
    XamLinearGaugeView.prototype.cn = function () {
        var a = new Path();
        this.z.add(a);
        return a;
    };
    XamLinearGaugeView.prototype.a4 = function (a) {
        a._visibility = 0;
    };
    XamLinearGaugeView.prototype.a5 = function (a) {
        a._visibility = 1;
    };
    XamLinearGaugeView.prototype.a6 = function (a) {
        this.y.remove(a);
    };
    XamLinearGaugeView.prototype.b3 = function () {
        var a = new TextBlock();
        this.y.add(a);
        return a;
    };
    XamLinearGaugeView.prototype.l = function () {
        var _this = this;
        if (this.k == null) {
            return null;
        }
        return ((function () {
            var $ret = new ToolTipInfo();
            $ret.b = _this.an;
            $ret.d = _this.cf;
            $ret.c = _this.aq;
            $ret.a = _this.k;
            return $ret;
        })());
    };
    XamLinearGaugeView.prototype.bi = function () {
        this.ad = this.m.bt;
    };
    XamLinearGaugeView.$t = markType(XamLinearGaugeView, 'XamLinearGaugeView');
    XamLinearGaugeView.w = new Dictionary$2(String_$type, Brush.$, 0);
    XamLinearGaugeView.g = null;
    XamLinearGaugeView.h = null;
    return XamLinearGaugeView;
}(Base));
export { XamLinearGaugeView };
//# sourceMappingURL=XamLinearGauge_combined.js.map
