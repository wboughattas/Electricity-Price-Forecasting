/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, Point_$type, markType } from "igniteui-react-core";
import { MorphSegment } from "./MorphSegment";
import { BrushUtil } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
/**
 * @hidden
 */
var LinearGraphNeedleFrame = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(LinearGraphNeedleFrame, _super);
    function LinearGraphNeedleFrame() {
        var _this = _super.call(this) || this;
        _this.n = 0;
        _this.m = 0;
        _this.q = 0;
        _this.p = 0;
        _this.l = 0;
        _this.r = null;
        _this.s = null;
        _this.o = 0;
        _this.f = null;
        _this.g = null;
        _this.d = null;
        _this.j = null;
        _this.i = null;
        _this.k = null;
        _this.e = null;
        _this.h = null;
        _this.b = null;
        _this.c = null;
        _this.f = new MorphSegment();
        _this.g = new MorphSegment();
        _this.d = new MorphSegment();
        _this.j = new MorphSegment();
        _this.i = new MorphSegment();
        _this.k = new MorphSegment();
        _this.e = new MorphSegment();
        _this.h = new MorphSegment();
        _this.b = new MorphSegment();
        _this.c = new MorphSegment();
        return _this;
    }
    LinearGraphNeedleFrame.a = function (a, b, c, d) {
        var e = new LinearGraphNeedleFrame();
        e.n = c.n + (d.n - c.n) * a;
        e.m = c.m + (d.m - c.m) * a;
        e.q = c.q + (d.q - c.q) * a;
        e.l = c.l + (d.l - c.l) * a;
        e.p = c.p + (d.p - c.p) * a;
        e.r = BrushUtil.k(c.r, a, d.r, 0);
        e.s = BrushUtil.k(c.s, a, d.s, 0);
        e.o = c.o + (d.o - c.o) * a;
        e.f.j(a, c.f, d.f);
        e.g.j(a, c.g, d.g);
        e.d.j(a, c.d, d.d);
        e.j.j(a, c.j, d.j);
        e.i.j(a, c.i, d.i);
        e.k.j(a, c.k, d.k);
        e.e.j(a, c.e, d.e);
        e.h.j(a, c.h, d.h);
        e.b.j(a, c.b, d.b);
        e.c.j(a, c.c, d.c);
        return e;
    };
    LinearGraphNeedleFrame.prototype.t = function (a, b, c) {
        var d = new PathGeometry();
        var e = new PathFigure();
        var f = { $type: Point_$type, x: NaN, y: NaN };
        f = this.i.l(f, e, a, b, c);
        f = this.j.l(f, e, a, b, c);
        f = this.d.l(f, e, a, b, c);
        f = this.g.l(f, e, a, b, c);
        f = this.f.l(f, e, a, b, c);
        f = this.h.l(f, e, a, b, c);
        f = this.e.l(f, e, a, b, c);
        e._isClosed = true;
        d.c.add(e);
        var g = new PathFigure();
        if (this.b.f.count > 0 || this.c.f.count > 0) {
            f = this.b.l(f, g, a, b, c);
            f = this.c.l(f, g, a, b, c);
            g._isClosed = true;
            d.c.add(g);
        }
        return d;
    };
    LinearGraphNeedleFrame.$t = markType(LinearGraphNeedleFrame, 'LinearGraphNeedleFrame');
    return LinearGraphNeedleFrame;
}(Base));
export { LinearGraphNeedleFrame };
//# sourceMappingURL=LinearGraphNeedleFrame.js.map
