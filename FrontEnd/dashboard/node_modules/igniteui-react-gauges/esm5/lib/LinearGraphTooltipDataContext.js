/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { DependencyObject } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Base, PropertyChangedEventArgs, String_$type, typeCast, markType, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
var LinearGraphTooltipDataContext = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(LinearGraphTooltipDataContext, _super);
    function LinearGraphTooltipDataContext() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.propertyChanged = null;
        return _this;
    }
    Object.defineProperty(LinearGraphTooltipDataContext.prototype, "item", {
        get: function () {
            return this.c(LinearGraphTooltipDataContext.itemProperty);
        },
        set: function (a) {
            this.h(LinearGraphTooltipDataContext.itemProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGraphTooltipDataContext.prototype, "itemName", {
        get: function () {
            return this.c(LinearGraphTooltipDataContext.itemNameProperty);
        },
        set: function (a) {
            this.h(LinearGraphTooltipDataContext.itemNameProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGraphTooltipDataContext.prototype, "brush", {
        get: function () {
            return this.c(LinearGraphTooltipDataContext.itemBrushProperty);
        },
        set: function (a) {
            this.h(LinearGraphTooltipDataContext.itemBrushProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGraphTooltipDataContext.prototype, "label", {
        get: function () {
            return this.c(LinearGraphTooltipDataContext.labelProperty);
        },
        set: function (a) {
            this.h(LinearGraphTooltipDataContext.labelProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    LinearGraphTooltipDataContext.prototype.p = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
    };
    LinearGraphTooltipDataContext.$t = markType(LinearGraphTooltipDataContext, 'LinearGraphTooltipDataContext', DependencyObject.$, [INotifyPropertyChanged_$type]);
    LinearGraphTooltipDataContext.labelProperty = DependencyProperty.i("Label", String_$type, LinearGraphTooltipDataContext.$, new PropertyMetadata(2, null, function (a, b) { return (typeCast(LinearGraphTooltipDataContext.$, a)).p("Label", b.oldValue, b.newValue); }));
    LinearGraphTooltipDataContext.itemProperty = DependencyProperty.i("Item", Base.$, LinearGraphTooltipDataContext.$, new PropertyMetadata(2, null, function (a, b) { return (typeCast(LinearGraphTooltipDataContext.$, a)).p("Item", b.oldValue, b.newValue); }));
    LinearGraphTooltipDataContext.itemNameProperty = DependencyProperty.i("ItemName", Base.$, LinearGraphTooltipDataContext.$, new PropertyMetadata(2, null, function (a, b) { return (typeCast(LinearGraphTooltipDataContext.$, a)).p("ItemName", b.oldValue, b.newValue); }));
    LinearGraphTooltipDataContext.itemBrushProperty = DependencyProperty.i("ItemBrush", Brush.$, LinearGraphTooltipDataContext.$, new PropertyMetadata(2, null, function (a, b) { return (typeCast(LinearGraphTooltipDataContext.$, a)).p("ItemBrush", b.oldValue, b.newValue); }));
    LinearGraphTooltipDataContext.$$p = markDep(DependencyProperty, PropertyMetadata, LinearGraphTooltipDataContext, 'p', ['Outline', [Brush.$, null], 'Thickness', [1, 0]]);
    return LinearGraphTooltipDataContext;
}(DependencyObject));
export { LinearGraphTooltipDataContext };
//# sourceMappingURL=LinearGraphTooltipDataContext.js.map
