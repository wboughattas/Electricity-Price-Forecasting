/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Base, PropertyChangedEventArgs, runOn, delegateCombine, Point_$type, Number_$type, enumGetBox, Delegate_$type, typeCast, String_$type, Array_$type, delegateRemove, fromEn, fromEnum, markType, markDep, TypeRegistrar } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { SweepDirection_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { RadialGaugeNeedleShape_$type } from "./RadialGaugeNeedleShape";
import { RadialGaugePivotShape_$type } from "./RadialGaugePivotShape";
import { RadialGaugeScaleOversweepShape_$type } from "./RadialGaugeScaleOversweepShape";
import { RadialGaugeBackingShape_$type } from "./RadialGaugeBackingShape";
import { RadialGaugeRangeCollection } from "./RadialGaugeRangeCollection";
import { RadialGaugeDuplicateLabelOmissionStrategy_$type } from "./RadialGaugeDuplicateLabelOmissionStrategy";
import { BindingFormatter } from "igniteui-react-core";
import { RadialGaugeScaler } from "./RadialGaugeScaler";
import { Rect } from "igniteui-react-core";
import { RadialGaugeFrame } from "./RadialGaugeFrame";
import { StackPool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { Stack$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { GeometryUtil } from "igniteui-react-core";
import { FormatRadialGaugeLabelEventArgs } from "./FormatRadialGaugeLabelEventArgs";
import { AlignRadialGaugeLabelEventArgs } from "./AlignRadialGaugeLabelEventArgs";
import { DoubleValueChangedEventArgs } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { XamRadialGaugeRange } from "./XamRadialGaugeRange";
import { PathGeometry } from "igniteui-react-core";
import { PolygonUtil } from "igniteui-react-core";
import { TransformGroup } from "igniteui-react-core";
import { RotateTransform } from "igniteui-react-core";
import { RadialGaugeNeedleParameters } from "./RadialGaugeNeedleParameters";
import { RadialGaugeNeedlePreparer } from "./RadialGaugeNeedlePreparer";
import { PathFigure } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { RadialGaugeRangeFrame } from "./RadialGaugeRangeFrame";
import { ArcSegment } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { GaugeVisualData } from "./GaugeVisualData";
import { RectData } from "igniteui-react-core";
import { ScaleLabelVisualDataList } from "./ScaleLabelVisualDataList";
import { ScaleTickmarkVisualDataList } from "./ScaleTickmarkVisualDataList";
import { RangeVisualDataList } from "./RangeVisualDataList";
import { NeedleVisualData } from "./NeedleVisualData";
import { FontUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, truncate } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { ScaleLabelVisualData } from "./ScaleLabelVisualData";
import { ScaleTickmarkVisualData } from "./ScaleTickmarkVisualData";
import { RangeVisualData } from "./RangeVisualData";
import { PathVisualData } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { SizeData } from "igniteui-react-core";
import { AppearanceHelper } from "igniteui-react-core";
import { arrayCopy1 } from "igniteui-react-core";
/**
 * @hidden
 */
var XamRadialGauge = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(XamRadialGauge, _super);
    function XamRadialGauge() {
        var _this = _super.call(this) || this;
        _this.propertyChanged = null;
        _this._view = null;
        _this.ay = null;
        _this.bn = 0;
        _this.bm = 100;
        _this.a8 = false;
        _this.formatLabel = null;
        _this.aj = null;
        _this.alignLabel = null;
        _this.valueChanged = null;
        _this.a7 = false;
        _this.av = null;
        _this.io = new Size(1, NaN, NaN);
        _this.il = null;
        _this.bj = null;
        _this.bk = null;
        _this.aq = null;
        _this.ap = null;
        _this.ao = null;
        _this.bl = new Stack$1(TextBlock.$);
        _this.bi = new List$1(Path.$, 0);
        _this.bh = new List$1(Path.$, 0);
        _this.bg = new List$1(Path.$, 0);
        _this.bq = 0;
        _this.a5 = null;
        _this.a3 = null;
        _this.a2 = null;
        _this.a4 = null;
        _this.bp = NaN;
        _this.bo = 1;
        _this.view = new XamRadialGaugeView(_this);
        _this.view.av();
        _this.il = Rect.empty;
        _this.aq = new RadialGaugeFrame();
        _this.ap = new RadialGaugeFrame();
        _this.ao = new RadialGaugeFrame();
        _this.ranges = new RadialGaugeRangeCollection();
        _this.a7 = true;
        _this.ay = new DoubleAnimator(0, 1, _this.dn);
        var a = _this.ay;
        a.propertyChanged = delegateCombine(a.propertyChanged, runOn(_this, _this.fn));
        _this.ab = XamRadialGauge.$;
        _this.a2 = ((function () {
            var $ret = new StackPool$1(TextBlock.$);
            $ret.b = runOn(_this.view, _this.view.an);
            $ret.c = runOn(_this.view, _this.view.ao);
            $ret.d = runOn(_this.view, _this.view.ap);
            $ret.j = runOn(_this.view, _this.view.be);
            return $ret;
        })());
        _this.a5 = ((function () {
            var $ret = new StackPool$1(Path.$);
            $ret.b = runOn(_this.view, _this.view.ay);
            $ret.c = runOn(_this.view, _this.view.az);
            $ret.d = runOn(_this.view, _this.view.a0);
            $ret.j = runOn(_this.view, _this.view.b0);
            return $ret;
        })());
        _this.a3 = ((function () {
            var $ret = new StackPool$1(Path.$);
            $ret.b = runOn(_this.view, _this.view.ay);
            $ret.c = runOn(_this.view, _this.view.az);
            $ret.d = runOn(_this.view, _this.view.a0);
            $ret.j = runOn(_this.view, _this.view.b0);
            return $ret;
        })());
        _this.a4 = ((function () {
            var $ret = new StackPool$1(Path.$);
            $ret.b = runOn(_this.view, _this.view.a3);
            $ret.c = runOn(_this.view, _this.view.a4);
            $ret.d = runOn(_this.view, _this.view.a5);
            $ret.j = runOn(_this.view, _this.view.b1);
            return $ret;
        })());
        _this.av = new RadialGaugeScaler(_this.bs, _this.br, _this.da, _this.c5, _this.ii);
        return _this;
    }
    XamRadialGauge.prototype.fz = function (a) {
        this.f4(a);
    };
    XamRadialGauge.prototype.f4 = function (a) {
        var b = this.propertyChanged;
        if (b != null) {
            b(this, new PropertyChangedEventArgs(a));
        }
    };
    XamRadialGauge.prototype.onDetachedFromUI = function () {
        this.view.au();
    };
    XamRadialGauge.prototype.onAttachedToUI = function () {
        this.view.aq();
    };
    XamRadialGauge.prototype.dd = function (a) {
        return this.av.h(a);
    };
    XamRadialGauge.prototype.dl = function (a) {
        return this.av.j(a);
    };
    XamRadialGauge.prototype.b5 = function (a) {
        var b = this.im;
        var c = Math.min(b.width / 2, b.height / 2) * this.c0;
        var d = this.ij();
        var e = d.x;
        var f = d.y;
        var g = GeometryUtil.e({ $type: Point_$type, x: e, y: f }, a);
        if (this.av != null && g < this.av.i) {
            g += Math.PI * 2;
        }
        if (this.av != null && g > this.av.g) {
            g -= Math.PI * 2;
        }
        var h = this.dl(g);
        return h;
    };
    XamRadialGauge.prototype.ik = function (a, b) {
        var c = this.dd(a);
        var d = Math.min(this.im.width / 2, this.im.height / 2) * this.c0 * b;
        var e = this.ij();
        var f = e.x + Math.cos(c) * d;
        var g = e.y + Math.sin(c) * d;
        return { $type: Point_$type, x: f, y: g };
    };
    XamRadialGauge.prototype.h9 = function (a, b) {
        if (b != null && b.count > 0) {
            return b.item(a % b.count);
        }
        else {
            return null;
        }
    };
    Object.defineProperty(XamRadialGauge.prototype, "view", {
        get: function () {
            return this._view;
        },
        set: function (a) {
            this._view = a;
        },
        enumerable: true,
        configurable: true
    });
    XamRadialGauge.prototype.fn = function (a, b) {
        this.dk = this.ay.o;
    };
    Object.defineProperty(XamRadialGauge.prototype, "bs", {
        get: function () {
            return this.bn;
        },
        set: function (a) {
            this.bn = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamRadialGauge.prototype, "br", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            this.bm = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamRadialGauge.prototype, "cw", {
        get: function () {
            return this.c(XamRadialGauge.hl);
        },
        set: function (a) {
            this.h(XamRadialGauge.hl, a);
        },
        enumerable: true,
        configurable: true
    });
    XamRadialGauge.prototype.refresh = function () {
        this.a7 = true;
        this.view.a7();
    };
    XamRadialGauge.prototype.fy = function (a, b, c) {
        switch (a) {
            case XamRadialGauge.$$p[29]:
            case XamRadialGauge.$$p[32]:
            case XamRadialGauge.$$p[33]:
            case XamRadialGauge.$$p[35]:
            case XamRadialGauge.$$p[0]:
            case XamRadialGauge.$$p[4]:
            case XamRadialGauge.$$p[48]:
            case XamRadialGauge.$$p[56]:
            case XamRadialGauge.$$p[22]:
                this.view.ar(a, b, c);
                break;
            case XamRadialGauge.$$p[45]:
                this.view.aw(b, c);
                break;
            case XamRadialGauge.$$p[46]:
                this.view.ax(b, c);
                break;
            case "PixelScalingRatio":
                if (isNaN_(DeviceUtils.a(this.cz))) {
                    this.bt = 1;
                }
                else {
                    this.bt = DeviceUtils.a(this.cz);
                }
                break;
            case "ActualPixelScalingRatio":
                this.view.a1();
                break;
        }
        switch (a) {
            case XamRadialGauge.$$p[17]:
            case XamRadialGauge.$$p[18]:
                if (this.d9 != null) {
                    this.aj = new BindingFormatter();
                    this.aj.j = this.d9;
                    this.aj.d = this.ag;
                }
                else {
                    this.aj = null;
                }
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[62]:
                if (this.valueChanged != null) {
                    this.valueChanged(this, new DoubleValueChangedEventArgs(b, c));
                }
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[0]:
            case XamRadialGauge.$$p[4]:
            case XamRadialGauge.$$p[7]:
            case XamRadialGauge.$$p[6]:
            case XamRadialGauge.$$p[2]:
            case XamRadialGauge.$$p[3]:
            case XamRadialGauge.$$p[5]:
            case XamRadialGauge.$$p[1]:
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[55]:
            case XamRadialGauge.$$p[53]:
            case XamRadialGauge.$$p[49]:
            case XamRadialGauge.$$p[51]:
            case XamRadialGauge.$$p[52]:
                this.av = new RadialGaugeScaler(this.bs, this.br, this.da, this.c5, this.ii);
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[21]:
            case XamRadialGauge.$$p[20]:
                var d = this.cc;
                var e = this.ca;
                if (isInfinity(d) || isNaN_(d)) {
                    d = 0;
                }
                if (isInfinity(e) || isNaN_(e)) {
                    e = 100;
                }
                this.bs = Math.min(d, e);
                this.br = Math.max(d, e);
                this.av = new RadialGaugeScaler(this.bs, this.br, this.da, this.c5, this.ii);
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[13]:
            case XamRadialGauge.$$p[54]:
            case XamRadialGauge.$$p[50]:
            case XamRadialGauge.$$p[16]:
            case XamRadialGauge.$$p[58]:
            case XamRadialGauge.$$p[57]:
            case XamRadialGauge.$$p[56]:
            case XamRadialGauge.$$p[48]:
            case XamRadialGauge.$$p[19]:
            case XamRadialGauge.$$p[23]:
            case XamRadialGauge.$$p[59]:
            case XamRadialGauge.$$p[26]:
            case XamRadialGauge.$$p[22]:
            case XamRadialGauge.$$p[25]:
            case XamRadialGauge.$$p[24]:
            case XamRadialGauge.$$p[8]:
            case XamRadialGauge.$$p[9]:
            case XamRadialGauge.$$p[44]:
            case XamRadialGauge.$$p[10]:
                this.av = new RadialGaugeScaler(this.bs, this.br, this.da, this.c5, this.ii);
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[42]:
            case XamRadialGauge.$$p[30]:
            case XamRadialGauge.$$p[29]:
            case XamRadialGauge.$$p[32]:
            case "NeedleStartWidth":
            case XamRadialGauge.$$p[31]:
            case XamRadialGauge.$$p[33]:
            case XamRadialGauge.$$p[35]:
            case XamRadialGauge.$$p[43]:
            case XamRadialGauge.$$p[37]:
            case XamRadialGauge.$$p[27]:
            case XamRadialGauge.$$p[28]:
            case XamRadialGauge.$$p[39]:
            case XamRadialGauge.$$p[40]:
            case XamRadialGauge.$$p[38]:
            case XamRadialGauge.$$p[34]:
            case XamRadialGauge.$$p[36]:
            case XamRadialGauge.$$p[41]:
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[60]:
                this.ay.r = this.dn;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[61]:
                this.ay.b = this.a0;
                break;
            case "TransitionProgress":
                if (this.dk >= 1) {
                    this.ay.w();
                    var f = this.ap;
                    this.ap = this.aq;
                    this.aq = f;
                    this.f1();
                    this.f2();
                    this.f3();
                    this.f9(this.ap);
                    this.ga(this.ap);
                    this.gb(this.ap);
                    this.view.ae();
                    return;
                }
                this.ao.e(this.dk, this.aq, this.ap);
                this.f9(this.ao);
                this.ga(this.ao);
                this.gb(this.ao);
                this.view.ae();
                break;
            case XamRadialGauge.$$p[47]:
                var g = b;
                var h = c;
                if (g != null) {
                    var i = g;
                    i.collectionChanged = delegateRemove(i.collectionChanged, runOn(this, this.f7));
                }
                if (h != null) {
                    var j = h;
                    j.collectionChanged = delegateCombine(j.collectionChanged, runOn(this, this.f7));
                }
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[46]:
            case XamRadialGauge.$$p[45]:
                this.a7 = true;
                this.view.a7();
                break;
            case XamRadialGauge.$$p[11]:
            case XamRadialGauge.$$p[12]:
                this.a7 = true;
                this.view.bd();
                this.view.a7();
                break;
        }
        this.fz(a);
    };
    XamRadialGauge.prototype.gd = function () {
        this.view.ba();
    };
    XamRadialGauge.prototype.f7 = function (a, b) {
        var e_1, _a, e_2, _b;
        if (b.oldItems != null) {
            try {
                for (var _c = tslib_1.__values(fromEn(b.oldItems)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var c = _d.value;
                    c.propertyChanged = delegateRemove(c.propertyChanged, runOn(this, this.f6));
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        }
        if (b.newItems != null) {
            try {
                for (var _e = tslib_1.__values(fromEn(b.newItems)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var d = _f.value;
                    d.propertyChanged = delegateCombine(d.propertyChanged, runOn(this, this.f6));
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
        this.a7 = true;
        this.view.a7();
    };
    XamRadialGauge.prototype.f6 = function (a, b) {
        this.a7 = true;
        this.view.a7();
    };
    Object.defineProperty(XamRadialGauge.prototype, "im", {
        get: function () {
            return this.il;
        },
        set: function (a) {
            var b = this.il;
            this.il = a;
            if (!b.equals1(this.il)) {
                this.f0(b, this.il);
            }
        },
        enumerable: true,
        configurable: true
    });
    XamRadialGauge.prototype.f0 = function (a, b) {
        this.a7 = true;
        this.view.a7();
    };
    XamRadialGauge.prototype.bb = function () {
        return !isNaN_(this.bs) && !isNaN_(this.br) && !isNaN_(this.dm) && !this.im.isEmpty && this.view.n();
    };
    XamRadialGauge.prototype.fo = function () {
        if (!this.bb()) {
            return;
        }
        if (this.a7) {
            if (this.a6) {
                if (this.ay.g) {
                    this.ay.t();
                }
                var a = this.aq;
                this.aq = this.ao;
                this.ao = a;
            }
            else {
                var b = this.aq;
                this.aq = this.ap;
                this.ap = b;
            }
        }
        else if (this.a6) {
            this.ao.e(this.dk, this.aq, this.ap);
            this.f9(this.ao);
            this.ga(this.ao);
            this.gb(this.ao);
        }
        if (this.a7) {
            this.f2();
            this.f3();
            this.f1();
        }
        if (this.a7 && this.be) {
            this.gc();
            this.ao.e(this.dk, this.aq, this.ap);
            this.f9(this.ao);
            this.ga(this.ao);
            this.gb(this.ao);
        }
        else {
            if (this.a7) {
                this.f9(this.ap);
                this.ga(this.ap);
                this.gb(this.ap);
            }
        }
        this.a7 = false;
        this.view.ae();
    };
    XamRadialGauge.prototype.gc = function () {
        this.bq = 0;
        this.ay.w();
        this.ay.v();
    };
    Object.defineProperty(XamRadialGauge.prototype, "be", {
        get: function () {
            return this.dn > 0;
        },
        enumerable: true,
        configurable: true
    });
    XamRadialGauge.prototype.f9 = function (a) {
        var b = this.im;
        var c = this.view.bv();
        var d = a.a;
        var e = Math.min(b.width / 2, b.height / 2) * a.d;
        var f = this.ij();
        var g = f.x;
        var h = f.y;
        var i = d.n(e, g, h);
        c.ak = i;
        c._fill = d.l;
        c._stroke = d.m;
        c.ac = d.h;
    };
    XamRadialGauge.prototype.bc = function (a) {
        if (this.bj == null) {
            return false;
        }
        return PolygonUtil.a(this.bj, a);
    };
    XamRadialGauge.prototype.needleContainsPoint = function (a, b) {
        if (this.bj == null) {
            return false;
        }
        return b ? PolygonUtil.a(this.bk, a) : PolygonUtil.a(this.bj, a);
    };
    XamRadialGauge.prototype.ga = function (a) {
        var b = this.im;
        var c = a.b.ab;
        var d = a.b.aj;
        var e = a.b.ak;
        var f = a.b.ae;
        var g = a.b.ah;
        var h = a.b.ai;
        var i = a.b.aa;
        var j = this.view.bw();
        var k = this.view.bz();
        var l = this.view.bx();
        var m = a.b;
        var n = Math.min(b.width / 2, b.height / 2) * a.d;
        var o = this.ij();
        var p = o.x;
        var q = o.y;
        var r = m.am(n, p, q);
        var s = c * 180 / Math.PI;
        j.ak = r;
        var t = new TransformGroup();
        t.j.add(((function () {
            var $ret = new RotateTransform();
            $ret.k = p;
            $ret.l = q;
            $ret.j = s;
            return $ret;
        })()));
        j.j = t;
        j._fill = d;
        j._stroke = e;
        j.ac = f;
        k.ak = m.an(n, p, q);
        l.ak = m.al(n, p, q);
        k._fill = g;
        k._stroke = h;
        k.ac = i;
        l._fill = g;
        l._stroke = h;
        l.ac = i;
        var u = new List$1(Point_$type, 0);
        var v = Math.cos(c);
        var w = Math.sin(c);
        var x = m.af / 2;
        var y = { $type: Point_$type, x: m.ad * n, y: x * n };
        var z = { $type: Point_$type, x: m.ac * n, y: x * n };
        var aa = { $type: Point_$type, x: m.ac * n, y: -x * n };
        var ab = { $type: Point_$type, x: m.ad * n, y: -x * n };
        y = { $type: Point_$type, x: y.x * v - y.y * w + p, y: y.y * v + y.x * w + q };
        z = { $type: Point_$type, x: z.x * v - z.y * w + p, y: z.y * v + z.x * w + q };
        aa = { $type: Point_$type, x: aa.x * v - aa.y * w + p, y: aa.y * v + aa.x * w + q };
        ab = { $type: Point_$type, x: ab.x * v - ab.y * w + p, y: ab.y * v + ab.x * w + q };
        u.add(y);
        u.add(z);
        u.add(aa);
        u.add(ab);
        this.bj = u;
        x = (m.af / 2) * n;
        var ac = { $type: Point_$type, x: m.ad * n, y: x };
        var ad = { $type: Point_$type, x: m.ac * n, y: x };
        var ae = { $type: Point_$type, x: m.ac * n, y: -x };
        var af = { $type: Point_$type, x: m.ad * n, y: -x };
        ac = { $type: Point_$type, x: ac.x * v - ac.y * w + p, y: ac.y * v + ac.x * w + q };
        ad = { $type: Point_$type, x: ad.x * v - ad.y * w + p, y: ad.y * v + ad.x * w + q };
        ae = { $type: Point_$type, x: ae.x * v - ae.y * w + p, y: ae.y * v + ae.x * w + q };
        af = { $type: Point_$type, x: af.x * v - af.y * w + p, y: af.y * v + af.x * w + q };
        this.bk = new List$1(Point_$type, 0);
        this.bk.add(ac);
        this.bk.add(ad);
        this.bk.add(ae);
        this.bk.add(af);
    };
    XamRadialGauge.prototype.ij = function () {
        var a = this.im;
        var b = isNaN_(this.b3) ? 0.5 : this.b3;
        var c = isNaN_(this.b4) ? 0.5 : this.b4;
        var d = a.left + b * a.width;
        var e = a.top + c * a.height;
        return { $type: Point_$type, x: d, y: e };
    };
    XamRadialGauge.prototype.c2 = function (a) {
        if (isInfinity(a)) {
            return NaN;
        }
        return a;
    };
    XamRadialGauge.prototype.f2 = function () {
        var a = this.ap;
        a.d = this.c0;
        var b = this.im;
        var c = this.av;
        var d = this.c4(this.dm, 0);
        var e = this.av.h(d);
        var f = new RadialGaugeNeedlePreparer();
        var g = new RadialGaugeNeedleParameters();
        g.b = this.ar;
        g.o = this.c2(this.cx);
        g.t = this.ib;
        g.u = this.ic;
        g.m = this.c2(this.cv);
        g.k = this.c2(this.cn);
        g.d = this.c2(this.cl);
        g.e = this.c2(this.cm);
        g.p = this.c2(this.ct);
        g.q = this.c2(this.cu);
        g.i = this.c2(this.cs);
        g.f = this.c2(this.cp);
        g.r = this.id;
        g.s = this.ie;
        g.c = this.as;
        g.h = this.c2(this.cq);
        g.n = this.c2(this.cw);
        g.l = this.c2(this.co);
        if (isNaN_(g.o)) {
            g.o = XamRadialGauge.cy;
        }
        if (isNaN_(g.h)) {
            g.h = XamRadialGauge.cr;
        }
        f.b = g;
        f.e(a.b);
        a.b.ab = e;
    };
    XamRadialGauge.prototype.gb = function (a) {
        var e_3, _a;
        var b = this.im;
        var c = a.c;
        var d = c.c;
        var e = c.e;
        var f = c.g;
        var g = c.h;
        var h = c.f;
        var i = c.d;
        var j = c.l;
        var k = c.t;
        var l = c.q;
        var m = c.j;
        var n = c.i;
        var o = c.v;
        var p = c.u;
        var q = c.s;
        var r = c.p;
        var s = c.ab;
        var t = c.ac;
        var u = c.w;
        var v = c.aa;
        var w = c.n;
        var x = c.m;
        var y = c.o;
        var z = this.view.by();
        var aa = c.r;
        k = Math.max(0, k);
        l = Math.max(0, l);
        var ab = true;
        if (this.au == 1 || (this.au == 0 && this.am == 0)) {
            ab = false;
        }
        var ac = Math.min(b.width / 2, b.height / 2) * a.d;
        var ad = this.ij();
        var ae = ad.x;
        var af = ad.y;
        var ag = q;
        var ah = r;
        q -= aa;
        r += aa;
        var ai = false;
        if ((r - q) >= 2 * Math.PI) {
            ai = true;
            q = 0;
            r = Math.PI;
        }
        var aj = new PathGeometry();
        var ak = new PathFigure();
        var al = Math.cos(q);
        var am = Math.sin(q);
        var an = Math.cos(r);
        var ao = Math.sin(r);
        var ap = ae + (ac * k) * al;
        var aq = af + (ac * k) * am;
        var ar = ae + (ac * l) * al;
        var as = af + (ac * l) * am;
        var at = ae + (ac * k) * an;
        var au = af + (ac * k) * ao;
        var av = ae + (ac * l) * an;
        var aw = af + (ac * l) * ao;
        var ax = ai;
        if (aa != 0 && !ai && ab) {
            var ay = Math.cos(ag);
            var az = Math.sin(ag);
            var a0 = Math.cos(ah);
            var a1 = Math.sin(ah);
            var a2 = ae + (ac * k) * ay;
            var a3 = af + (ac * k) * az;
            var a4 = ae + (ac * l) * ay;
            var a5 = af + (ac * l) * az;
            var a6 = ae + (ac * k) * a0;
            var a7 = af + (ac * k) * a1;
            var a8 = ae + (ac * l) * a0;
            var a9 = af + (ac * l) * a1;
            var ba = aq;
            var bb = ar;
            if (a4 - a2 != 0) {
                bb = ae;
                var bc = (a5 - a3) / (a4 - a2);
                ba = bc * (ae - ar) + as;
            }
            var bd = { $type: Point_$type, x: bb, y: ba };
            var be = GeometryUtil.i(bd, { $type: Point_$type, x: ar, y: as }, { $type: Point_$type, x: ae, y: af }, ac * k);
            var bf = au;
            var bg = av;
            if (a8 - a6 != 0) {
                bg = ae;
                var bh = (a9 - a7) / (a8 - a6);
                bf = bh * (ae - av) + aw;
            }
            var bi = { $type: Point_$type, x: bg, y: bf };
            var bj = GeometryUtil.i(bi, { $type: Point_$type, x: av, y: aw }, { $type: Point_$type, x: ae, y: af }, ac * k);
            if (isNaN_(be.c.x) || isNaN_(be.c.y) || isNaN_(be.d.x) || isNaN_(be.d.y) || isNaN_(bj.c.x) || isNaN_(bj.c.y) || isNaN_(bj.d.x) || isNaN_(bj.d.y)) {
                ai = true;
                q = 0;
                r = Math.PI;
            }
            else {
                var bk = void 0;
                var bl = void 0;
                if ((Math.pow(be.c.x - ar, 2) + Math.pow(be.c.y - as, 2)) < (Math.pow(be.d.x - ar, 2) + Math.pow(be.d.y - as, 2))) {
                    bk = be.c;
                }
                else {
                    bk = be.d;
                }
                if ((Math.pow(bj.c.x - av, 2) + Math.pow(bj.c.y - aw, 2)) < (Math.pow(bj.d.x - av, 2) + Math.pow(bj.d.y - aw, 2))) {
                    bl = bj.c;
                }
                else {
                    bl = bj.d;
                }
                if ((Math.pow(bl.x - ar, 2) + Math.pow(bl.y - as, 2)) <= (Math.pow(bk.x - ar, 2) + Math.pow(bk.y - as, 2))) {
                    ai = true;
                    q = 0;
                    r = Math.PI;
                }
                else {
                    var bm = GeometryUtil.e({ $type: Point_$type, x: ae, y: af }, bk);
                    var bn = GeometryUtil.e({ $type: Point_$type, x: ae, y: af }, bl);
                    var bo = q;
                    var bp = r;
                    while (bo > Math.PI * 2) {
                        bo -= Math.PI * 2;
                    }
                    while (bp > Math.PI * 2) {
                        bp -= Math.PI * 2;
                    }
                    var bq = Math.min(Math.abs(bm - bo), Math.abs((Math.PI * 2 - bm) - bo));
                    var br = Math.min(Math.abs(bn - bp), Math.abs((Math.PI * 2 - bn) - bp));
                    if ((r - q) + bq + br >= 2 * Math.PI) {
                        ai = true;
                        q = 0;
                        r = Math.PI;
                    }
                    else {
                        ap = bk.x;
                        aq = bk.y;
                        at = bl.x;
                        au = bl.y;
                    }
                }
            }
        }
        if (ai && !ax) {
            al = Math.cos(q);
            am = Math.sin(q);
            an = Math.cos(r);
            ao = Math.sin(r);
            ap = ae + (ac * k) * al;
            aq = af + (ac * k) * am;
            ar = ae + (ac * l) * al;
            as = af + (ac * l) * am;
            at = ae + (ac * k) * an;
            au = af + (ac * k) * ao;
            av = ae + (ac * l) * an;
            aw = af + (ac * l) * ao;
        }
        if (ai) {
            ak._startPoint = { $type: Point_$type, x: ar, y: as };
            ak._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.e = { $type: Point_$type, x: av, y: aw };
                $ret.b = false;
                $ret.d = 1;
                $ret.f = new Size(1, ac * l, ac * l);
                return $ret;
            })()));
            ak._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.e = { $type: Point_$type, x: ar, y: as };
                $ret.b = false;
                $ret.d = 1;
                $ret.f = new Size(1, ac * l, ac * l);
                return $ret;
            })()));
            var bs = new PathFigure();
            bs._startPoint = { $type: Point_$type, x: ap, y: aq };
            bs._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.e = { $type: Point_$type, x: at, y: au };
                $ret.b = false;
                $ret.d = 0;
                $ret.f = new Size(1, ac * k, ac * k);
                return $ret;
            })()));
            bs._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.e = { $type: Point_$type, x: ap, y: aq };
                $ret.b = false;
                $ret.d = 0;
                $ret.f = new Size(1, ac * k, ac * k);
                return $ret;
            })()));
            aj.c.add(ak);
            aj.c.add(bs);
        }
        else {
            ak._startPoint = { $type: Point_$type, x: ap, y: aq };
            ak._segments.add(((function () {
                var $ret = new LineSegment(1);
                $ret.c = { $type: Point_$type, x: ar, y: as };
                return $ret;
            })()));
            ak._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.e = { $type: Point_$type, x: av, y: aw };
                $ret.b = (r - q) > Math.PI;
                $ret.d = 1;
                $ret.f = new Size(1, ac * l, ac * l);
                return $ret;
            })()));
            ak._segments.add(((function () {
                var $ret = new LineSegment(1);
                $ret.c = { $type: Point_$type, x: at, y: au };
                return $ret;
            })()));
            ak._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.e = { $type: Point_$type, x: ap, y: aq };
                $ret.b = (r - q) > Math.PI;
                $ret.d = 0;
                $ret.f = new Size(1, ac * k, ac * k);
                return $ret;
            })()));
            aj.c.add(ak);
        }
        z.ak = aj;
        z._fill = s;
        var bt = this.a2;
        bt.f = true;
        try {
            for (var _b = tslib_1.__values(fromEnum(this.bl)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var bu = _c.value;
                bt.n(bu);
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
        this.bl.g();
        var bv = c.z;
        for (var bw = 0; bw < d.length; bw++) {
            var bx = ae + (ac * j) * Math.cos(d[bw]);
            var by = af + (ac * j) * Math.sin(d[bw]);
            var bz = bt.a();
            if (bz.ak != e[bw]) {
                bz.ak = e[bw];
            }
            this.view.a9(bz, bv);
            var b0 = h[bw];
            var b1 = i[bw];
            var b2 = f[bw];
            var b3 = g[bw];
            this.view.a2(bz, bx + b2, by + b3);
            this.bl.h(bz);
        }
        bt.f = false;
        var b4 = this.a5;
        b4.f = true;
        for (var b5 = 0; b5 < this.bi.count; b5++) {
            b4.n(this.bi._inner[b5]);
        }
        this.bi.clear();
        var _loop_1 = function (b6) {
            var b7 = ae + (ac * o) * Math.cos(m[b6]);
            var b8 = af + (ac * o) * Math.sin(m[b6]);
            var b9 = ae + (ac * p) * Math.cos(m[b6]);
            var ca = af + (ac * p) * Math.sin(m[b6]);
            var cb = b4.a();
            var cc = new PathGeometry();
            var cd = new PathFigure();
            cd._startPoint = { $type: Point_$type, x: b7, y: b8 };
            cd._segments.add(((function () {
                var $ret = new LineSegment(1);
                $ret.c = { $type: Point_$type, x: b9, y: ca };
                return $ret;
            })()));
            cc.c.add(cd);
            cb.ak = cc;
            cb._stroke = t;
            cb.ac = u;
            this_1.bi.add(cb);
        };
        var this_1 = this;
        for (var b6 = 0; b6 < m.length; b6++) {
            _loop_1(b6);
        }
        b4.f = false;
        var ce = this.a3;
        ce.f = true;
        for (var cf = 0; cf < this.bg.count; cf++) {
            ce.n(this.bg._inner[cf]);
        }
        this.bg.clear();
        var _loop_2 = function (cg) {
            var ch = ae + (ac * w) * Math.cos(n[cg]);
            var ci = af + (ac * w) * Math.sin(n[cg]);
            var cj = ae + (ac * x) * Math.cos(n[cg]);
            var ck = af + (ac * x) * Math.sin(n[cg]);
            var cl = ce.a();
            var cm = new PathGeometry();
            var cn = new PathFigure();
            cn._startPoint = { $type: Point_$type, x: ch, y: ci };
            cn._segments.add(((function () {
                var $ret = new LineSegment(1);
                $ret.c = { $type: Point_$type, x: cj, y: ck };
                return $ret;
            })()));
            cm.c.add(cn);
            cl.ak = cm;
            cl._stroke = v;
            cl.ac = y;
            this_2.bg.add(cl);
        };
        var this_2 = this;
        for (var cg = 0; cg < n.length; cg++) {
            _loop_2(cg);
        }
        ce.f = false;
        var co = this.a4;
        co.f = true;
        for (var cp = this.bh.count - 1; cp >= 0; cp--) {
            co.n(this.bh._inner[cp]);
        }
        this.bh.clear();
        for (var cq = 0; cq < c.k.count; cq++) {
            var cr = c.k._inner[cq];
            var cs = co.a();
            cs.ak = cr.m(ac, ae, af);
            cs._fill = cr.k;
            cs._stroke = cr.l;
            cs.ac = cr.h;
            this.bh.add(cs);
        }
        this.view.a8(this.bh);
        co.f = false;
    };
    XamRadialGauge.prototype.bf = function (a, b, c) {
        var d = c / 10000;
        if (isNaN_(d)) {
            d = 1E-05;
        }
        var e = Math.abs(a - b);
        if (e < d) {
            return true;
        }
        return false;
    };
    XamRadialGauge.prototype.c3 = function (a) {
        if (isInfinity(a)) {
            return NaN;
        }
        return a;
    };
    XamRadialGauge.prototype.c1 = function (a, b) {
        if (isInfinity(a)) {
            return b;
        }
        return a;
    };
    XamRadialGauge.prototype.c4 = function (a, b) {
        if (isInfinity(a) || isNaN_(a)) {
            return b;
        }
        return a;
    };
    XamRadialGauge.prototype.f3 = function () {
        var a = this.ap;
        a.d = this.c3(this.c0);
        if (isNaN_(a.d)) {
            a.d = 1;
        }
        var b = this.im;
        var c = this.av;
        var d = this.c3(this.b6);
        var e = this.c3(this.b9);
        var f = this.c3(this.ce);
        if (isNaN_(d)) {
            d = (this.br - this.bs) / 10;
        }
        if (isNaN_(e)) {
            e = d;
        }
        if (isNaN_(f)) {
            f = 3;
        }
        var g = new List$1(Tuple$2.$.specialize(Number_$type, Number_$type), 0);
        var h = c.i;
        var i = c.g;
        while (h >= Math.PI * 2) {
            h -= Math.PI * 2;
        }
        while (i >= Math.PI * 2) {
            i -= Math.PI * 2;
        }
        var j = Math.abs(i - h) < 0.0001;
        var k = this.an == 1 || this.an == 3;
        var l = this.an == 0 || this.an == 3;
        for (var m = this.bs; m <= this.br || this.bf(m, this.br, e); m += e) {
            if (j && this.bf(m, this.bs, e) && k) {
                continue;
            }
            if (j && this.bf(m, this.br, e) && l) {
                continue;
            }
            g.add(new Tuple$2(Number_$type, Number_$type, m, c.h(m)));
            if (e == 0) {
                break;
            }
        }
        var n = new List$1(Number_$type, 0);
        var o = new List$1(Number_$type, 0);
        for (var p = this.bs; p <= this.br || this.bf(p, this.br, d); p += d) {
            n.add(c.h(p));
            for (var q = 0; q < f; q++) {
                var r = (d / (f + 1)) * (q + 1);
                if (r + p > this.br) {
                    continue;
                }
                o.add(c.h(r + p));
            }
            if (d == 0) {
                break;
            }
        }
        if (a.c.c.length != g.count) {
            a.c.c = new Array(g.count);
            a.c.e = new Array(g.count);
            a.c.f = new Array(g.count);
            a.c.d = new Array(g.count);
            a.c.g = new Array(g.count);
            a.c.h = new Array(g.count);
        }
        if (a.c.j.length != n.count || a.c.i.length != o.count) {
            a.c.j = new Array(n.count);
            a.c.i = new Array(o.count);
        }
        var s = new FormatRadialGaugeLabelEventArgs();
        s.startAngle = this.av.i;
        s.endAngle = this.av.g;
        s.actualMinimumValue = this.bs;
        s.actualMaximumValue = this.br;
        var t = new AlignRadialGaugeLabelEventArgs();
        t.startAngle = s.startAngle;
        t.endAngle = s.endAngle;
        t.actualMinimumValue = s.actualMinimumValue;
        t.actualMaximumValue = s.actualMaximumValue;
        var _loop_3 = function (u) {
            s.angle = g._inner[u].d;
            t.angle = s.angle;
            a.c.c[u] = g._inner[u].d;
            var v = g._inner[u].c;
            s.value = v;
            var w = v;
            if (this_3.aj == null) {
                w = Math.round(v * 100) / 100;
            }
            s.label = (w).toString();
            if (this_3.aj != null) {
                s.label = this_3.aj.i(w);
            }
            if (this_3.formatLabel != null) {
                this_3.formatLabel(this_3, s);
            }
            t.value = s.value;
            t.label = s.label;
            var x = s.label;
            var y = this_3.view.b2(((function () {
                var $ret = new TextBlock();
                $ret.ak = x;
                return $ret;
            })()));
            t.width = y.width;
            t.height = y.height;
            t.offsetX = -1 * (y.width / 2);
            t.offsetY = -1 * (y.height / 2);
            if (this_3.alignLabel != null) {
                this_3.alignLabel(this_3, t);
            }
            a.c.f[u] = t.width;
            a.c.d[u] = t.height;
            a.c.g[u] = t.offsetX;
            a.c.h[u] = t.offsetY;
            a.c.e[u] = t.label;
        };
        var this_3 = this;
        for (var u = 0; u < g.count; u++) {
            _loop_3(u);
        }
        for (var z = 0; z < n.count; z++) {
            a.c.j[z] = n._inner[z];
        }
        for (var aa = 0; aa < o.count; aa++) {
            a.c.i[aa] = o._inner[aa];
        }
        a.c.t = this.c4(this.db, 0.5);
        a.c.q = this.c4(this.c6, 0.57);
        a.c.l = this.c4(this.b7, 0.65);
        a.c.v = this.c4(this.dg, 0.5);
        a.c.u = this.c4(this.de, 0.57);
        a.c.n = this.c4(this.ch, 0.54);
        a.c.m = this.c4(this.cf, 0.57);
        a.c.s = c.i;
        a.c.p = c.g;
        var ab = this.c8;
        if (isNaN_((ab))) {
            ab = 2.8;
        }
        var ac = ab * Math.PI / 180;
        if (ac < 0) {
            ac = 0;
        }
        a.c.r = ac;
        a.c.ac = this.ih;
        a.c.z = this.h8;
        a.c.aa = this.ia;
        a.c.ab = this.ig;
        a.c.w = this.c3(this.di);
        a.c.o = this.c3(this.cj);
        if (isNaN_(a.c.w)) {
            a.c.w = XamRadialGauge.dj;
        }
        if (isNaN_(a.c.o)) {
            a.c.o = XamRadialGauge.ck;
        }
        a.c.k.clear();
        for (var ad = 0; ad < this.ranges.count; ad++) {
            var ae = this.ranges._inner[ad];
            var af = this.c3(Math.min(ae.o, ae.j));
            var ag = this.c3(Math.max(ae.o, ae.j));
            if (isNaN_(af) || isNaN_(ag)) {
                continue;
            }
            var ah = c.h(af);
            var ai = c.h(ag);
            var aj = RadialGaugeScaler.k(ah, ai, this.ii);
            ah = aj.c;
            ai = aj.d;
            var ak = new RadialGaugeRangeFrame();
            ak.e = ah;
            ak.b = ai;
            ak.k = ae.ao != null ? ae.ao : this.h9(ad, this.ah);
            ak.l = ae.ap != null ? ae.ap : this.h9(ad, this.ai);
            ak.h = this.c4(ae.p, XamRadialGaugeRange.q);
            ak.f = this.c3(ae.l);
            if (isNaN_(ak.f)) {
                ak.f = Math.max(0, this.db);
            }
            ak.c = this.c3(ae.k);
            if (isNaN_(ak.c)) {
                ak.c = Math.max(0, this.db);
            }
            ak.g = this.c3(ae.n);
            if (isNaN_(ak.g)) {
                ak.g = Math.max(0, this.c6);
            }
            ak.d = this.c3(ae.m);
            if (isNaN_(ak.d)) {
                ak.d = Math.max(0, this.c6);
            }
            if (this.ii == 0) {
                var al = ak.f;
                ak.f = ak.c;
                ak.c = al;
                al = ak.g;
                ak.g = ak.d;
                ak.d = al;
            }
            a.c.k.add(ak);
        }
    };
    XamRadialGauge.prototype.f1 = function () {
        var a = this.ap;
        a.d = this.c0;
        var b = a.a;
        var c = this.h6;
        var d = this.h7;
        var e = this.c1(this.b1, XamRadialGauge.b2);
        var f = this.am;
        var g = this.by;
        var h = this.bw;
        if (isInfinity(h) || isNaN_(h)) {
            h = 0.12;
        }
        if (isInfinity(g) || isNaN_(g)) {
            g = 0.82;
        }
        var i = this.bu;
        if (isInfinity(i) || isNaN_(i)) {
            i = 4;
        }
        if (h > g) {
            var j = g;
            g = h;
            h = j;
        }
        var k = this.av;
        var l = k.i;
        var m = k.g;
        b.l = c;
        b.m = d;
        b.h = e;
        if (f == 0) {
            b.b = 0;
            b.g = 0;
            b.c = 0;
            b.d = 0;
            b.e = this.by;
        }
        else {
            b.b = i;
            var n = this.b0 * Math.PI / 180;
            if (n < 0) {
                n = 0;
            }
            if ((Math.PI * 2) - (m - l) < n) {
                b.f = 0;
                b.b = 0;
                b.g = 0;
                b.c = 0;
                b.d = 0;
                b.e = g;
            }
            else {
                b.f = n;
                b.g = l;
                b.c = m;
                b.b = i;
                b.d = h;
                b.e = g;
            }
        }
    };
    Object.defineProperty(XamRadialGauge.prototype, "a6", {
        get: function () {
            return this.ay.f();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamRadialGauge.prototype, "dk", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            var b = this.bq;
            this.bq = a;
            this.fy("TransitionProgress", b, this.bq);
        },
        enumerable: true,
        configurable: true
    });
    XamRadialGauge.prototype.fr = function (a, b) {
        var c = this.b5(a);
        if (this.a9) {
            var d = this.dl(this.av.g - Math.PI * 2);
            switch (this.ii) {
                case 1:
                    if (c < this.bs) {
                        c = c < d * 0.5 ? this.br : this.bs;
                    }
                    break;
                case 0:
                    if (c > this.br) {
                        c = c < (d + this.br) * 0.5 ? this.br : this.bs;
                    }
                    break;
            }
        }
        if (c != this.dm) {
            this.dm = c;
        }
    };
    XamRadialGauge.prototype.destroy = function () {
        this.provideContainer(null);
    };
    XamRadialGauge.prototype.provideContainer = function (a) {
        this.view.as(a);
    };
    XamRadialGauge.prototype.onMouseMove = function (a, b) {
        if (this.a8) {
            this.fr(a, b);
        }
    };
    XamRadialGauge.prototype.onMouseDown = function (a, b) {
        if (b === void 0) {
            b = false;
        }
        if (this.ba && this.needleContainsPoint(a, b) && !this.a8) {
            this.a8 = true;
        }
    };
    XamRadialGauge.prototype.onMouseUp = function (a) {
        if (this.a8) {
            this.a8 = false;
        }
    };
    XamRadialGauge.prototype.containerResized = function () {
        this.view.at();
    };
    XamRadialGauge.prototype.fs = function () {
        this.view.flush();
    };
    XamRadialGauge.prototype.aw = function () {
        var a = new GaugeVisualData();
        a.viewport = new RectData(this.im.left, this.im.top, this.im.width, this.im.height);
        a.scaleLabels = new ScaleLabelVisualDataList();
        a.scaleTickmarks = new ScaleTickmarkVisualDataList();
        a.ranges = new RangeVisualDataList();
        a.needle = new NeedleVisualData();
        this.view.aj(a);
        return a;
    };
    XamRadialGauge.prototype.d1 = function () {
        var a = this.aw();
        a.scaleByViewport();
        return a.serialize();
    };
    XamRadialGauge.prototype.a1 = function () {
        return FontUtil.toFontInfo(this.view.z, this.d2);
    };
    Object.defineProperty(XamRadialGauge.prototype, "cz", {
        get: function () {
            return this.bp;
        },
        set: function (a) {
            var b = this.bp;
            this.bp = a;
            this.fy("PixelScalingRatio", b, this.bp);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamRadialGauge.prototype, "bt", {
        get: function () {
            return this.bo;
        },
        set: function (a) {
            var b = this.bo;
            this.bo = a;
            this.fy("ActualPixelScalingRatio", b, this.bo);
        },
        enumerable: true,
        configurable: true
    });
    XamRadialGauge.$t = markType(XamRadialGauge, 'XamRadialGauge', Control.$, [INotifyPropertyChanged_$type]);
    XamRadialGauge.hl = DependencyProperty.i("NeedleStartWidth", Number_$type, XamRadialGauge.$, new PropertyMetadata(2, NaN, function (a, b) { return a.fy("NeedleStartWidth", b.oldValue, b.newValue); }));
    XamRadialGauge.cy = DeviceUtils.g(1);
    XamRadialGauge.cr = DeviceUtils.g(1);
    XamRadialGauge.dj = DeviceUtils.g(3);
    XamRadialGauge.ck = DeviceUtils.g(2);
    XamRadialGauge.b2 = DeviceUtils.g(12);
    XamRadialGauge.$$p = markDep(DependencyProperty, PropertyMetadata, XamRadialGauge, 'fy', ['BackingBrush:h6:ge', [Brush.$, null], 'BackingCornerRadius:bu:gf', [1, 4], 'BackingInnerExtent:bw:gg', [1, 0.12], 'BackingOuterExtent:by:gh', [1, 0.82], 'BackingOutline:h7:gi', [Brush.$, null], 'BackingOversweep:b0:gj', [1, 3], 'BackingShape:am:gk', [RadialGaugeBackingShape_$type, enumGetBox(RadialGaugeBackingShape_$type, 0)], 'BackingStrokeThickness:b1:gl', [1, XamRadialGauge.b2], 'CenterX:b3:gm', [1, 0.5], 'CenterY:b4:gn', [1, 0.5], 'DuplicateLabelOmissionStrategy:an:go', [RadialGaugeDuplicateLabelOmissionStrategy_$type, enumGetBox(RadialGaugeDuplicateLabelOmissionStrategy_$type, 0)], 'FontBrush:h8:gp', [Brush.$, null], 'Font:d2:gq', [2, null], 'Interval:b6:gr', [1, NaN], 'IsNeedleDraggingConstrained:a9:gs', [0, true], 'IsNeedleDraggingEnabled:ba:gt', [0, false], 'LabelExtent:b7:gu', [1, 0.65], 'LabelFormat:d9:gv', [2, null], 'LabelFormatSpecifiers:ag:gw', [Array_$type, null], 'LabelInterval:b9:gx', [1, NaN], 'MaximumValue:ca:gy', [1, 100], 'MinimumValue:cc:gz', [1, 0], 'MinorTickBrush:ia:g0', [Brush.$, null], 'MinorTickCount:ce:g1', [1, 3], 'MinorTickEndExtent:cf:g2', [1, 0.57], 'MinorTickStartExtent:ch:g3', [1, 0.54], 'MinorTickStrokeThickness:cj:g4', [1, XamRadialGauge.ck], 'NeedleBaseFeatureExtent:cl:g5', [1, NaN], 'NeedleBaseFeatureWidthRatio:cm:g6', [1, NaN], 'NeedleBrush:ib:g7', [Brush.$, null], 'NeedleEndExtent:cn:g8', [1, NaN], 'NeedleEndWidthRatio:co:g9', [1, NaN], 'NeedleOutline:ic:ha', [Brush.$, null], 'NeedlePivotBrush:id:hb', [Brush.$, null], 'NeedlePivotInnerWidthRatio:cp:hc', [1, NaN], 'NeedlePivotOutline:ie:hd', [Brush.$, null], 'NeedlePivotShape:as:he', [RadialGaugePivotShape_$type, enumGetBox(RadialGaugePivotShape_$type, 3)], 'NeedlePivotStrokeThickness:cq:hf', [1, XamRadialGauge.cr], 'NeedlePivotWidthRatio:cs:hg', [1, NaN], 'NeedlePointFeatureExtent:ct:hh', [1, NaN], 'NeedlePointFeatureWidthRatio:cu:hi', [1, NaN], 'NeedleShape:ar:hj', [RadialGaugeNeedleShape_$type, enumGetBox(RadialGaugeNeedleShape_$type, 4)], 'NeedleStartExtent:cv:hk', [1, NaN], 'NeedleStrokeThickness:cx:hm', [1, XamRadialGauge.cy], 'RadiusMultiplier:c0:hn', [1, 1], 'RangeBrushes:ah:ho', [BrushCollection.$, null], 'RangeOutlines:ai:hp', [BrushCollection.$, null], 'Ranges::hq', [RadialGaugeRangeCollection.$, null], 'ScaleBrush:ig:hr', [Brush.$, null], 'ScaleEndAngle:c5:hs', [1, 45], 'ScaleEndExtent:c6:ht', [1, 0.57], 'ScaleOversweep:c8:hu', [1, 2.8], 'ScaleOversweepShape:au:hv', [RadialGaugeScaleOversweepShape_$type, enumGetBox(RadialGaugeScaleOversweepShape_$type, 0)], 'ScaleStartAngle:da:hw', [1, 135], 'ScaleStartExtent:db:hx', [1, 0.5], 'ScaleSweepDirection:ii:hy', [SweepDirection_$type, enumGetBox(SweepDirection_$type, 1)], 'TickBrush:ih:hz', [Brush.$, null], 'TickEndExtent:de:h0', [1, 0.57], 'TickStartExtent:dg:h1', [1, 0.5], 'TickStrokeThickness:di:h2', [1, XamRadialGauge.dj], 'TransitionDuration:dn:h3', [1, 0], 'TransitionEasingFunction:a0:h4', [Delegate_$type, null], 'Value:dm:h5', [1, 0]]);
    return XamRadialGauge;
}(Control));
export { XamRadialGauge };
/**
 * @hidden
 */
var XamRadialGaugeView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(XamRadialGaugeView, _super);
    function XamRadialGaugeView(a) {
        var _this = _super.call(this) || this;
        _this.h = null;
        _this.s = null;
        _this.r = null;
        _this.q = null;
        _this.br = new Path();
        _this.bt = new Path();
        _this.bq = new Path();
        _this.bs = new Path();
        _this.bu = new Path();
        _this.o = null;
        _this.a = ["needle", "needlePivot", "backing", "scale", "tick", "minorTick", "label"];
        _this.c = null;
        _this.d = null;
        _this.l = false;
        _this.m = false;
        _this.g = null;
        _this.aa = null;
        _this.k = null;
        _this.z = null;
        _this.i = null;
        _this.bf = new Brush();
        _this.bg = ((function () {
            var $ret = new Brush();
            $ret.fill = "black";
            return $ret;
        })());
        _this.t = NaN;
        _this.p = null;
        _this.ac = -1;
        _this.ab = -1;
        _this.bk = null;
        _this.bl = null;
        _this.bm = null;
        _this.bn = null;
        _this.bh = null;
        _this.bi = null;
        _this.bo = null;
        _this.bp = null;
        _this.bj = null;
        _this.e = null;
        _this.f = null;
        _this.u = 0;
        _this.h = a;
        _this.o = new Dictionary$2(String_$type, Dictionary$2.$.specialize(String_$type, String_$type), 0);
        _this.q = new List$1(TextBlock.$, 0);
        _this.r = new List$1(Path.$, 0);
        _this.s = new List$1(Path.$, 0);
        return _this;
    }
    XamRadialGaugeView.prototype.an = function (a) {
        a._visibility = 0;
    };
    XamRadialGaugeView.prototype.ao = function (a) {
        a._visibility = 1;
    };
    XamRadialGaugeView.prototype.ap = function (a) {
        this.q.remove(a);
    };
    XamRadialGaugeView.prototype.be = function () {
        var a = new TextBlock();
        this.q.add(a);
        return a;
    };
    XamRadialGaugeView.prototype.ay = function (a) {
        a._visibility = 0;
    };
    XamRadialGaugeView.prototype.az = function (a) {
        a._visibility = 1;
    };
    XamRadialGaugeView.prototype.a0 = function (a) {
        this.r.remove(a);
    };
    XamRadialGaugeView.prototype.b0 = function () {
        var a = new Path();
        this.r.add(a);
        return a;
    };
    XamRadialGaugeView.prototype.a3 = function (a) {
        a._visibility = 0;
    };
    XamRadialGaugeView.prototype.a4 = function (a) {
        a._visibility = 1;
    };
    XamRadialGaugeView.prototype.a5 = function (a) {
        this.s.remove(a);
    };
    XamRadialGaugeView.prototype.b1 = function () {
        var a = new Path();
        this.s.add(a);
        return a;
    };
    XamRadialGaugeView.prototype.n = function () {
        return true;
    };
    XamRadialGaugeView.prototype.bw = function () {
        return this.br;
    };
    XamRadialGaugeView.prototype.by = function () {
        return this.bt;
    };
    XamRadialGaugeView.prototype.w = function (a) {
        var b = typeCast(TextBlock.$, a);
        if (b != null && b.ak != null) {
            return this.k.e(b) + 0;
        }
        return 0;
    };
    XamRadialGaugeView.prototype.b2 = function (a) {
        if (isNaN_(this.t)) {
            this.t = this.v(null);
        }
        var b = this.w(a);
        var c = this.t;
        return new Size(1, b, c);
    };
    XamRadialGaugeView.prototype.al = function () {
        this.l = true;
        var a = ["#CED3D8", "#CED3D8", "#EBEDEF", "#FFC73C", "#617583", "rgba(100,107,114,.74)", "rgba(100,107,114,.74)"];
        var b = ["#B2B9C0", "#B2B9C0", "#B2B9C0", null, null, null, null];
        var c = ["background-color", "border-top-color"];
        var d = ((function () {
            var $ret = new List$1(Array_$type, 0);
            $ret.add(a);
            $ret.add(b);
            return $ret;
        })());
        this.o.clear();
        var e = this.a.length;
        for (var f = 0; f < e; f++) {
            var g = new Dictionary$2(String_$type, String_$type, 0);
            var h = this.a[f];
            var i = new Array(c.length);
            arrayCopy1(c, 0, i, 0, c.length);
            this.b("ui-radialgauge-" + h, i);
            for (var j = 0; j < i.length; j++) {
                g.item(c[j], (i[j] == null) ? d._inner[j][f] : i[j]);
            }
            this.o.item(h, g);
        }
        this.bc();
        var k;
        var l;
        var m = BrushUtil.e("radialgauge-range", this.z, k, l);
        k = m.p2;
        l = m.p3;
        this.c = k;
        this.d = l;
        if (this.e == null) {
            this.h.ah = this.c;
        }
        if (this.f == null) {
            this.h.ai = this.d;
        }
        this.l = false;
    };
    XamRadialGaugeView.prototype.aq = function () {
        this.am();
        if (this.g != null) {
            this.g.ap(this.z.rootWrapper, "");
        }
    };
    XamRadialGaugeView.prototype.au = function () {
        if (this.g != null) {
            this.g.bb(this.z.rootWrapper, "");
        }
    };
    XamRadialGaugeView.prototype.bc = function () {
        this.l = true;
        var a = this.a.length;
        for (var b = 0; b < a; b++) {
            var c = this.a[b];
            this.bb(c, this.o.item(c));
        }
        this.l = false;
    };
    XamRadialGaugeView.prototype.bb = function (a, b) {
        var e_4, _a;
        var c = null;
        var d = null;
        var e = b.count;
        try {
            for (var _b = tslib_1.__values(fromEnum(b.keys)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                switch (f) {
                    case "background-color":
                        c = new Brush();
                        if (b.item(f) != null) {
                            c._fill = b.item(f);
                        }
                        break;
                    case "border-top-color":
                        d = new Brush();
                        if (b.item(f) != null) {
                            d._fill = b.item(f);
                        }
                        break;
                }
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        switch (a) {
            case "needle":
                if (this.bk == null) {
                    this.h.ib = c;
                }
                if (this.bl == null) {
                    this.h.ic = d;
                }
                break;
            case "needlePivot":
                if (this.bm == null) {
                    this.h.id = c;
                }
                if (this.bn == null) {
                    this.h.ie = d;
                }
                break;
            case "backing":
                if (this.bh == null) {
                    this.h.h6 = c;
                }
                if (this.bi == null) {
                    this.h.h7 = d;
                }
                break;
            case "scale":
                if (this.bo == null) {
                    this.h.ig = c;
                }
                break;
            case "tick":
                if (this.bp == null) {
                    this.h.ih = c;
                }
                break;
            case "minorTick":
                if (this.bj == null) {
                    this.h.ia = c;
                }
                break;
            case "label":
                this.bg = c;
                break;
        }
    };
    XamRadialGaugeView.prototype.b = function (a, b) {
        this.z.startCSSQuery();
        for (var c = 0; c < b.length; c++) {
            b[c] = this.z.getCssDefaultPropertyValue(a, b[c]);
        }
        this.z.endCSSQuery();
        return b;
    };
    XamRadialGaugeView.y = function (a, b) {
        var c = a == null ? 0 : a.length;
        if (c < 1) {
            return b;
        }
        var d = a.split('.');
        var e = (d[0].length > 0) ? parseInt(d[0]) : 0;
        if (d.length != 2) {
            return e;
        }
        c = d[1].length;
        var f = parseInt(d[1]);
        while (c-- > 0) {
            f /= 10;
        }
        return f + e;
    };
    XamRadialGaugeView.prototype.av = function () {
        this.l = true;
        this.h.ib = ((function () {
            var $ret = new Brush();
            $ret.fill = "#CED3D8";
            return $ret;
        })());
        this.h.ic = ((function () {
            var $ret = new Brush();
            $ret.fill = "#B2B9C0";
            return $ret;
        })());
        this.h.ih = ((function () {
            var $ret = new Brush();
            $ret.fill = "#617583";
            return $ret;
        })());
        this.h.ig = ((function () {
            var $ret = new Brush();
            $ret.fill = "#FFC73C";
            return $ret;
        })());
        this.h.h6 = ((function () {
            var $ret = new Brush();
            $ret.fill = "#EBEDEF";
            return $ret;
        })());
        this.h.h7 = ((function () {
            var $ret = new Brush();
            $ret.fill = "#B2B9C0";
            return $ret;
        })());
        this.h.id = ((function () {
            var $ret = new Brush();
            $ret.fill = "#CED3D8";
            return $ret;
        })());
        this.h.ie = ((function () {
            var $ret = new Brush();
            $ret.fill = "#B2B9C0";
            return $ret;
        })());
        this.h.ia = ((function () {
            var $ret = new Brush();
            $ret.fill = "rgba(100,107,114,.74)";
            return $ret;
        })());
        this.l = false;
        this.am();
    };
    XamRadialGaugeView.prototype.am = function () {
        var a = this.h.cz;
        var b = this.h.bt;
        if (!isNaN_(a) && a != 0) {
            return;
        }
        if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
            this.h.bt = window.devicePixelRatio;
        }
    };
    XamRadialGaugeView.prototype.a7 = function () {
        if (!this.m) {
            this.m = true;
            if (this.z != null) {
                this.z.setTimeout(runOn(this, this.ad), 0);
            }
            else {
                window.setTimeout(runOn(this, this.ad), 0);
            }
        }
    };
    XamRadialGaugeView.prototype.ad = function () {
        if (this.m) {
            this.m = false;
            this.h.fo();
        }
    };
    XamRadialGaugeView.prototype.flush = function () {
        if (this.m) {
            this.ad();
        }
    };
    XamRadialGaugeView.prototype.a2 = function (a, b, c) {
        a.n = b;
        a.o = c;
    };
    XamRadialGaugeView.prototype.as = function (a) {
        var _this = this;
        if (a == null) {
            this.aa = null;
            this.z = null;
            this.k = null;
            this.af();
            return;
        }
        this.u = (isNaN_(this.h.cz) ? this.h.bt : this.h.cz);
        var b = a;
        this.z = b;
        this.h.ay.u(this.z);
        this.z.rootWrapper.addClass("ui-radialgauge-container");
        var c = this.u;
        var d = Math.round(b.rootWrapper.width());
        var e = Math.round(b.rootWrapper.height());
        var f = d * c;
        var g = e * c;
        this.z.rootWrapper.setStyleProperty("position", "relative");
        var h = this.z.createElement("canvas");
        h.setStyleProperty("position", "absolute");
        this.z.append(h);
        this.ac = truncate(Math.round(f));
        this.ab = truncate(Math.round(g));
        h.setAttribute("width", f.toString());
        h.setAttribute("height", g.toString());
        h.setStyleProperty("width", d.toString() + "px");
        h.setStyleProperty("height", e.toString() + "px");
        this.h.im = new Rect(0, 0, 0, d, e);
        this.aa = h;
        var i = this.z.get2DCanvasContext(this.aa);
        this.k = new RenderingContext(new CanvasViewRenderer(), i);
        this.al();
        this.bd();
        this.k.ac(this.i);
        this.af();
        if (TypeRegistrar.isRegistered("CanvasGestureDOMEventProxy")) {
            this.g = typeCast(EventProxy.$, TypeRegistrar.create("CanvasGestureDOMEventProxy", this.z.rootWrapper, this.z, false));
        }
        if (this.g != null) {
            var j = this.g;
            j.onContactStarted = delegateCombine(j.onContactStarted, runOn(this, this.ai));
            var k = this.g;
            k.onContactMoved = delegateCombine(k.onContactMoved, runOn(this, this.ah));
            var l = this.g;
            l.onContactCompleted = delegateCombine(l.onContactCompleted, runOn(this, this.ag));
            this.g.ak = function (m) { return _this.h.ba && (_this.h.a8 || _this.h.bc(m)); };
        }
        this.a6();
    };
    XamRadialGaugeView.prototype.ag = function (a, b) {
        if (this.h != null) {
            this.h.onMouseUp(a);
        }
    };
    XamRadialGaugeView.prototype.ah = function (a, b) {
        if (this.h != null) {
            this.h.onMouseMove(a, b);
        }
    };
    XamRadialGaugeView.prototype.ai = function (a, b) {
        if (this.h != null) {
            this.h.onMouseDown(a);
        }
    };
    XamRadialGaugeView.prototype.af = function () {
        if (this.g != null) {
            var a = this.g;
            a.onContactStarted = delegateRemove(a.onContactStarted, runOn(this, this.ai));
            var b = this.g;
            b.onContactMoved = delegateRemove(b.onContactMoved, runOn(this, this.ah));
            var c = this.g;
            c.onContactCompleted = delegateRemove(c.onContactCompleted, runOn(this, this.ag));
            this.g.ak = null;
            this.g.aq();
        }
    };
    XamRadialGaugeView.prototype.a9 = function (a, b) {
        if (b != null) {
            a.am = b;
        }
        else {
            a.am = this.bg;
        }
    };
    XamRadialGaugeView.prototype.ba = function () {
        this.al();
        this.bd();
        this.a7();
    };
    XamRadialGaugeView.prototype.bd = function () {
        this.i = FontUtil.getFont(this.z);
        if (this.h.d2 != null) {
            this.i = this.h.a1();
        }
        this.t = this.v(this.i);
        this.bf = new Brush();
        this.bf._fill = this.z.rootWrapper.getStyleProperty("color");
        if (this.k != null) {
            this.k.ac(this.i);
        }
    };
    XamRadialGaugeView.prototype.ae = function () {
        this.a6();
    };
    XamRadialGaugeView.prototype.a6 = function () {
        var a = this.h.im.width;
        var b = this.h.im.height;
        var c = Math.round(a * this.u);
        var d = Math.round(b * this.u);
        if (this.ac != c || this.ab != d) {
            this.aa.setAttribute("width", c.toString());
            this.aa.setAttribute("height", d.toString());
            this.aa.setStyleProperty("width", a.toString() + "px");
            this.aa.setStyleProperty("height", b.toString() + "px");
            this.ac = truncate(Math.round(c));
            this.ab = truncate(Math.round(d));
        }
        if (this.k.d && this.u != 1) {
            this.k.z();
            this.k.aa(this.u, this.u);
        }
        this.k.k(this.h.im.left, this.h.im.top, this.h.im.width, this.h.im.height);
        this.k.s(this.bq);
        this.k.s(this.bt);
        if (this.p != null) {
            for (var e = 0; e < this.p.count; e++) {
                this.k.s(this.p._inner[e]);
            }
        }
        for (var f = 0; f < this.q.count; f++) {
            this.k.ac(this.i);
            this.k.w(this.q._inner[f]);
        }
        for (var g = 0; g < this.r.count; g++) {
            this.k.s(this.r._inner[g]);
        }
        this.k.z();
        this.k.j(this.br.j);
        this.k.s(this.bu);
        this.k.s(this.br);
        this.k.s(this.bs);
        this.k.y();
        if (this.k.d && this.u != 1) {
            this.k.y();
        }
    };
    XamRadialGaugeView.prototype.v = function (a) {
        return FontUtil.getCurrentFontHeight(this.z, a);
    };
    XamRadialGaugeView.prototype.a8 = function (a) {
        this.p = a;
    };
    XamRadialGaugeView.prototype.bv = function () {
        return this.bq;
    };
    XamRadialGaugeView.prototype.bz = function () {
        return this.bu;
    };
    XamRadialGaugeView.prototype.bx = function () {
        return this.bs;
    };
    XamRadialGaugeView.prototype.at = function () {
        this.am();
        var a = Math.round(this.z.rootWrapper.width());
        var b = Math.round(this.z.rootWrapper.height());
        this.h.im = new Rect(0, 0, 0, a, b);
        if (this.g != null) {
            this.g.bf = this.h.im;
        }
    };
    XamRadialGaugeView.prototype.j = function (a, b) {
        return FontUtil.getFontInfo(this.z, a, b);
    };
    XamRadialGaugeView.prototype.aj = function (a) {
        var e_5, _a, e_6, _b, e_7, _c;
        a.scalePath = new PathVisualData(1, "Scale", this.bt);
        a.needlePath = new PathVisualData(1, "Needle", this.br);
        var b = this.br.j.j._inner[0].j;
        a.needle.angle = b;
        a.backingPath = new PathVisualData(1, "Backing", this.bq);
        a.overlayPath = new PathVisualData(1, "Overlay", this.bs);
        a.underlayPath = new PathVisualData(1, "Underlay", this.bu);
        var c = this.i;
        try {
            for (var _d = tslib_1.__values(fromEnum(this.q)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var d = _e.value;
                if (d._visibility == 0) {
                    var e = this.j(d, c);
                    var f = new ScaleLabelVisualData();
                    f.labelValue = d.ak;
                    f.labelPosition = PointData.b({ $type: Point_$type, x: d.n, y: d.o });
                    f.labelSize = SizeData.b(this.b2(d));
                    f.appearance = AppearanceHelper.c(d, e);
                    a.scaleLabels.add(f);
                }
            }
        }
        catch (e_5_1) {
            e_5 = { error: e_5_1 };
        }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return))
                    _a.call(_d);
            }
            finally {
                if (e_5)
                    throw e_5.error;
            }
        }
        try {
            for (var _f = tslib_1.__values(fromEnum(this.r)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var g = _g.value;
                if (g._visibility == 0) {
                    var h = new ScaleTickmarkVisualData();
                    h.tickPath = new PathVisualData(1, "tickmarks", g);
                    a.scaleTickmarks.add(h);
                }
            }
        }
        catch (e_6_1) {
            e_6 = { error: e_6_1 };
        }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return))
                    _b.call(_f);
            }
            finally {
                if (e_6)
                    throw e_6.error;
            }
        }
        try {
            for (var _h = tslib_1.__values(fromEnum(this.s)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var i = _j.value;
                if (i._visibility == 0) {
                    var j = new RangeVisualData();
                    var k = new PathVisualData(1, "range", i);
                    j.rangePath = k;
                    a.ranges.add(j);
                }
            }
        }
        catch (e_7_1) {
            e_7 = { error: e_7_1 };
        }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return))
                    _c.call(_h);
            }
            finally {
                if (e_7)
                    throw e_7.error;
            }
        }
    };
    XamRadialGaugeView.prototype.ar = function (a, b, c) {
        var d = b;
        var e = c;
        if (!this.l) {
            switch (a) {
                case XamRadialGauge.$$p[29]:
                    this.bk = e;
                    break;
                case XamRadialGauge.$$p[32]:
                    this.bl = e;
                    break;
                case XamRadialGauge.$$p[33]:
                    this.bm = e;
                    break;
                case XamRadialGauge.$$p[35]:
                    this.bn = e;
                    break;
                case XamRadialGauge.$$p[0]:
                    this.bh = e;
                    break;
                case XamRadialGauge.$$p[4]:
                    this.bi = e;
                    break;
                case XamRadialGauge.$$p[48]:
                    this.bo = e;
                    break;
                case XamRadialGauge.$$p[56]:
                    this.bp = e;
                    break;
                case XamRadialGauge.$$p[22]:
                    this.bj = e;
                    break;
            }
            if (e == null) {
                this.bc();
            }
        }
    };
    XamRadialGaugeView.prototype.aw = function (a, b) {
        if (!this.l) {
            this.e = b;
            if (this.e == null) {
                this.h.ah = this.c;
            }
        }
    };
    XamRadialGaugeView.prototype.ax = function (a, b) {
        if (!this.l) {
            this.f = b;
            if (this.f == null) {
                this.h.ai = this.d;
            }
        }
    };
    XamRadialGaugeView.prototype.a1 = function () {
        this.u = this.h.bt;
    };
    XamRadialGaugeView.$t = markType(XamRadialGaugeView, 'XamRadialGaugeView');
    return XamRadialGaugeView;
}(Base));
export { XamRadialGaugeView };
//# sourceMappingURL=XamRadialGauge_combined.js.map
