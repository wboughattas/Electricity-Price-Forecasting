/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { LinearGraphVisualData } from "./LinearGraphVisualData";
import { StringBuilder } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var LinearGaugeVisualData = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(LinearGaugeVisualData, _super);
    function LinearGaugeVisualData() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._needlePath = null;
        _this._needle = null;
        return _this;
    }
    Object.defineProperty(LinearGaugeVisualData.prototype, "needlePath", {
        get: function () {
            return this._needlePath;
        },
        set: function (a) {
            this._needlePath = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearGaugeVisualData.prototype, "needle", {
        get: function () {
            return this._needle;
        },
        set: function (a) {
            this._needle = a;
        },
        enumerable: true,
        configurable: true
    });
    LinearGaugeVisualData.prototype.scaleByViewport = function () {
        _super.prototype.scaleByViewport.call(this);
        if (this.needlePath != null) {
            this.needlePath.scaleByViewport(this.viewport);
        }
    };
    LinearGaugeVisualData.prototype.serialize = function () {
        var a = _super.prototype.serialize.call(this);
        var b = new StringBuilder(0);
        var c = a.length == 0;
        if (this.needlePath != null) {
            if (c) {
                c = false;
            }
            else {
                b.l(", ");
            }
            b.l("needlePath: ");
            b.u(this.needlePath.serialize());
        }
        if (this.needle != null) {
            if (c) {
                c = false;
            }
            else {
                b.l(", ");
            }
            b.l("needle: ");
            b.u(this.needle.serialize());
        }
        if (c) {
            return a;
        }
        b.l("}");
        return a.substr(0, a.length - 1) + b.toString();
    };
    LinearGaugeVisualData.$t = markType(LinearGaugeVisualData, 'LinearGaugeVisualData', LinearGraphVisualData.$);
    return LinearGaugeVisualData;
}(LinearGraphVisualData));
export { LinearGaugeVisualData };
//# sourceMappingURL=LinearGaugeVisualData.js.map
