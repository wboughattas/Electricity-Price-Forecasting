/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Base, PropertyChangedEventArgs, runOn, delegateCombine, enumGetBox, Number_$type, String_$type, Array_$type, Point_$type, delegateRemove, fromEn, markType, markDep, typeCast, fromEnum, TypeRegistrar } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { BulletGraphFrame } from "./BulletGraphFrame";
import { LinearGraphScaler } from "./LinearGraphScaler";
import { LinearScaleOrientation_$type } from "./LinearScaleOrientation";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { LinearGraphRangeCollection } from "./LinearGraphRangeCollection";
import { BrushCollection } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { StackPool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { XamLinearGraphRange } from "./XamLinearGraphRange";
import { FormatLinearGraphLabelEventArgs } from "./FormatLinearGraphLabelEventArgs";
import { AlignLinearGraphLabelEventArgs } from "./AlignLinearGraphLabelEventArgs";
import { BulletGraphVisualData } from "./BulletGraphVisualData";
import { ToolTipInfo } from "./ToolTipInfo";
import { RectData } from "igniteui-react-core";
import { LinearGraphScaleLabelVisualDataList } from "./LinearGraphScaleLabelVisualDataList";
import { LinearGraphScaleTickmarkVisualDataList } from "./LinearGraphScaleTickmarkVisualDataList";
import { LinearGraphRangeVisualDataList } from "./LinearGraphRangeVisualDataList";
import { ValueVisualData } from "./ValueVisualData";
import { BulletGraphTargetValueVisualData } from "./BulletGraphTargetValueVisualData";
import { LinearGraphRangeVisualData } from "./LinearGraphRangeVisualData";
import { LinearGraphToolTipVisualData } from "./LinearGraphToolTipVisualData";
import { LinearGraphTooltipDataContext } from "./LinearGraphTooltipDataContext";
import { AppearanceHelper } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { PathVisualData } from "igniteui-react-core";
import { GetPointsSettings } from "igniteui-react-core";
import { PolygonUtil } from "igniteui-react-core";
import { LinearGraphRectFrame } from "./LinearGraphRectFrame";
import { Size } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, intDivide, truncate } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { CanvasGestureDOMEventProxy } from "igniteui-react-core";
import { LinearGraphScaleLabelVisualData } from "./LinearGraphScaleLabelVisualData";
import { LinearGraphScaleTickmarkVisualData } from "./LinearGraphScaleTickmarkVisualData";
import { SizeData } from "igniteui-react-core";
import { arrayCopy1 } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let XamBulletGraph = /*@__PURE__*/ (() => {
    class XamBulletGraph extends Control {
        constructor() {
            super();
            this.propertyChanged = null;
            this.av = null;
            this.bj = 0;
            this.formatLabel = null;
            this.alignLabel = null;
            this.an = null;
            this.am = null;
            this.al = null;
            this.aq = null;
            this.au = null;
            this.bg = 0;
            this.bf = 100;
            this.aj = null;
            this.a8 = false;
            this.a0 = null;
            this.ay = null;
            this.ax = null;
            this.a1 = null;
            this.az = null;
            this._view = null;
            this.ht = null;
            this.hs = null;
            this.hr = null;
            this.bi = NaN;
            this.bh = 1;
            this.ba = new List$1(TextBlock.$, 0);
            this.bd = new List$1(TextBlock.$, 0);
            this.bc = new List$1(Path.$, 0);
            this.bb = new List$1(Path.$, 0);
            this.a3 = false;
            this.bi = NaN;
            this.bh = 1;
            this.au = new XamLinearGraphRange();
            let a = this.au;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.ff));
            this.view = new XamBulletGraphView(this);
            this.view.a9();
            this.ht = Rect.empty;
            this.hs = Rect.empty;
            this.hr = Rect.empty;
            this.an = new BulletGraphFrame();
            this.am = new BulletGraphFrame();
            this.al = new BulletGraphFrame();
            this.ranges = new LinearGraphRangeCollection();
            this.a3 = true;
            this.av = new DoubleAnimator(0, 1, this.cy);
            let b = this.av;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.ev));
            this.ab = XamBulletGraph.$;
            this.az = ((() => {
                let $ret = new StackPool$1(Path.$);
                $ret.b = runOn(this.view, this.view.bj);
                $ret.c = runOn(this.view, this.view.bk);
                $ret.d = runOn(this.view, this.view.bl);
                $ret.j = runOn(this.view, this.view.cq);
                return $ret;
            })());
            this.a0 = ((() => {
                let $ret = new StackPool$1(Path.$);
                $ret.b = runOn(this.view, this.view.bc);
                $ret.c = runOn(this.view, this.view.bd);
                $ret.d = runOn(this.view, this.view.be);
                $ret.j = runOn(this.view, this.view.cp);
                return $ret;
            })());
            this.ay = ((() => {
                let $ret = new StackPool$1(Path.$);
                $ret.b = runOn(this.view, this.view.bc);
                $ret.c = runOn(this.view, this.view.bd);
                $ret.d = runOn(this.view, this.view.be);
                $ret.j = runOn(this.view, this.view.cp);
                return $ret;
            })());
            this.ax = ((() => {
                let $ret = new StackPool$1(TextBlock.$);
                $ret.b = runOn(this.view, this.view.a1);
                $ret.c = runOn(this.view, this.view.a2);
                $ret.d = runOn(this.view, this.view.a3);
                $ret.j = runOn(this.view, this.view.b0);
                return $ret;
            })());
            this.a1 = ((() => {
                let $ret = new StackPool$1(TextBlock.$);
                $ret.b = runOn(this.view, this.view.bt);
                $ret.c = runOn(this.view, this.view.bu);
                $ret.d = runOn(this.view, this.view.bv);
                $ret.j = runOn(this.view, this.view.b1);
                return $ret;
            })());
        }
        e6(a) {
            this.fd(a);
        }
        fd(a) {
            let b = this.propertyChanged;
            if (b != null) {
                b(this, new PropertyChangedEventArgs(a));
            }
        }
        onDetachedFromUI() {
            this.view.a8();
        }
        onAttachedToUI() {
            this.view.a4();
        }
        ev(a, b) {
            this.cq = this.av.o;
        }
        get a2() {
            return this.av.f();
        }
        get cq() {
            return this.bj;
        }
        set cq(a) {
            let b = this.bj;
            this.bj = a;
            this.e5("TransitionProgress", b, this.bj);
        }
        fq() {
            this.bj = 0;
            this.av.w();
            this.av.v();
        }
        get a7() {
            return this.cy > 0;
        }
        get hj() {
            return this.c(XamBulletGraph.gl);
        }
        set hj(a) {
            this.h(XamBulletGraph.gl, a);
        }
        get hk() {
            return this.c(XamBulletGraph.gm);
        }
        set hk(a) {
            this.h(XamBulletGraph.gm, a);
        }
        get b8() {
            return this.c(XamBulletGraph.gn);
        }
        set b8(a) {
            this.h(XamBulletGraph.gn, a);
        }
        get bl() {
            return this.bg;
        }
        set bl(a) {
            this.bg = a;
        }
        get bk() {
            return this.bf;
        }
        set bk(a) {
            this.bf = a;
        }
        br(a) {
            let b = 0;
            let c = a.x;
            if (this.ar == 1) {
                b = a.y;
                c = this.hw.height;
            }
            return this.aq.k(c - b);
        }
        as() {
            let a = new BulletGraphVisualData();
            a.viewport = new RectData(this.hw.left, this.hw.top, this.hw.width, this.hw.height);
            a.scaleLabels = new LinearGraphScaleLabelVisualDataList();
            a.scaleTickmarks = new LinearGraphScaleTickmarkVisualDataList();
            a.ranges = new LinearGraphRangeVisualDataList();
            a.value = ((() => {
                let $ret = new ValueVisualData();
                $ret.value = this.cr;
                return $ret;
            })());
            a.targetValue = ((() => {
                let $ret = new BulletGraphTargetValueVisualData();
                $ret.value = this.ce;
                return $ret;
            })());
            this.view.aw(a);
            let b = this.view.l();
            if (b != null) {
                let c;
                switch (b.c) {
                    case "range":
                        c = a.ranges._inner[b.b];
                        break;
                    case "value":
                        c = a.value;
                        break;
                    default:
                        c = a.targetValue;
                        break;
                }
                a.toolTip = ((() => {
                    let $ret = new LinearGraphToolTipVisualData();
                    $ret.item = c;
                    $ret.itemBrush = AppearanceHelper.b(b.a.brush);
                    $ret.outline = AppearanceHelper.b(b.a.outline);
                    $ret.thickness = b.a.thickness;
                    return $ret;
                })());
            }
            return a;
        }
        c6() {
            let a = this.as();
            a.scaleByViewport();
            return a.serialize();
        }
        destroy() {
            this.provideContainer(null);
        }
        provideContainer(a) {
            this.view.a6(a);
        }
        onMouseOver(a, b, c) {
            if (this.a8) {
                this.fp(a, null);
            }
        }
        onMouseLeave() {
            if (this.a8) {
                this.fp({ $type: Point_$type, x: -10000, y: -10000 }, null);
            }
        }
        containerResized() {
            this.view.a7();
        }
        fr() {
            this.view.bs();
        }
        ez() {
            this.view.flush();
        }
        be(a) {
            let b = new List$1(Point_$type, 0);
            for (let c = 0; c < a.count; c++) {
                b.add({ $type: Point_$type, x: a._inner[c].x, y: a._inner[c].y });
            }
            return b;
        }
        fp(a, b) {
            let c = new PathVisualData(1, "targetValue", this.view.cn());
            let d = c.getPoints(new GetPointsSettings());
            if (d.count > 0) {
                let e = PolygonUtil.a(this.be(d._inner[0]), a);
                if (e == true) {
                    this.view.br(a, b, -1, "targetvalue");
                    return;
                }
            }
            let f = new PathVisualData(1, "value", this.view.co());
            let g = f.getPoints(new GetPointsSettings());
            if (g.count > 0) {
                let h = PolygonUtil.a(this.be(g._inner[0]), a);
                if (h == true) {
                    this.view.br(a, b, -1, "value");
                    return;
                }
            }
            for (let i = 0; i < this.bb.count; i++) {
                let j = new PathVisualData(1, "range", this.bb._inner[i]);
                let k = j.getPoints(new GetPointsSettings());
                if (k.count > 0) {
                    let l = PolygonUtil.a(this.be(k._inner[0]), a);
                    if (l == true) {
                        this.view.br(a, b, i, "range");
                        return;
                    }
                }
            }
            this.view.az();
        }
        fi() {
            if (!this.a3) {
                return;
            }
            let a = this.am.c;
            if (this.ar == 0) {
                let b = 0;
                for (let c = 0; c < a.c.length; c++) {
                    b = Math.max(b, a.c[c]);
                }
                let d = this.hw.height >= b ? this.hw.height - b : this.hw.height;
                this.hv = new Rect(0, 0, 0, this.hw.width, d);
            }
            else {
                let e = 0;
                for (let f = 0; f < a.f.length; f++) {
                    e = Math.max(e, a.f[f]);
                }
                let g = this.hw.width >= e ? this.hw.width - e : this.hw.width;
                this.hv = new Rect(0, e, 0, g, this.hw.height);
            }
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        get hw() {
            return this.ht;
        }
        set hw(a) {
            let b = this.ht;
            this.ht = a;
            if (!b.equals1(this.ht)) {
                this.e7(b, this.ht);
            }
        }
        get hv() {
            return this.hs;
        }
        set hv(a) {
            this.hs = a;
        }
        get hu() {
            return this.hr;
        }
        set hu(a) {
            this.hr = a;
        }
        get b5() {
            return this.bi;
        }
        set b5(a) {
            let b = this.bi;
            this.bi = a;
            this.e5("PixelScalingRatio", b, this.bi);
        }
        get bm() {
            return this.bh;
        }
        set bm(a) {
            let b = this.bh;
            this.bh = a;
            this.e5("ActualPixelScalingRatio", b, this.bh);
        }
        a5() {
            return !isNaN_(this.bl) && !isNaN_(this.bk) && !this.hw.isEmpty && this.view.s();
        }
        ew() {
            if (!this.a5()) {
                return;
            }
            let a = this.cc();
            this.aq = new LinearGraphScaler(this.bl, this.bk, a, a + this.cb(), this.a4);
            if (this.a3) {
                if (this.a2) {
                    if (this.av.g) {
                        this.av.t();
                    }
                    let b = this.an;
                    this.an = this.al;
                    this.al = b;
                }
                else {
                    let c = this.an;
                    this.an = this.am;
                    this.am = c;
                }
            }
            else if (this.a2) {
                this.al.d(this.cq, this.an, this.am);
                this.fj(this.al);
                this.fl(this.al);
                this.fm(this.al);
                this.fo(this.al);
            }
            if (this.a3) {
                this.e9();
                this.fi();
                this.fb();
                this.fc();
                this.fa();
                this.e8();
            }
            if (this.a3 && this.a7) {
                this.fq();
                this.al.d(this.cq, this.an, this.am);
                this.fj(this.al);
                this.fl(this.al);
                this.fm(this.al);
                this.fo(this.al);
                this.fn(this.al);
                this.fk(this.al);
            }
            else {
                if (this.a3) {
                    this.fj(this.am);
                    this.fl(this.am);
                    this.fm(this.am);
                    this.fo(this.am);
                    this.fn(this.am);
                    this.fk(this.am);
                }
            }
            this.a3 = false;
            this.view.as();
        }
        fa() {
            let a = this.am;
            let b = a.c;
            let c = this.aq;
            let d = this.bz;
            let e = this.hv;
            if (isNaN_(d)) {
                d = 3;
            }
            b.u = this.cd;
            b.r = this.ca;
            b.s = 0;
            b.t = 1;
            b.m.clear();
            for (let f = 0; f < this.ranges.count; f++) {
                let g = this.ranges._inner[f];
                if (g.j <= this.bl || g.o > this.bk) {
                    continue;
                }
                let h = g.o;
                let i = g.j;
                if (h < this.bl) {
                    h = this.bl;
                }
                if (i > this.bk) {
                    i = this.bk;
                }
                let j = new LinearGraphRectFrame();
                j.i = g.an != null ? g.an : this.hh(f, this.ah);
                j.j = g.ao != null ? g.ao : this.hh(f, this.ai);
                j.h = g.p;
                j.g = c.i(h);
                j.d = c.i(i);
                j.e = g.l;
                j.b = g.k;
                j.f = g.n;
                j.c = g.m;
                if (isNaN_(j.e)) {
                    j.e = this.b6;
                }
                j.b = g.k;
                if (isNaN_(j.b)) {
                    j.b = this.b6;
                }
                j.f = g.n;
                if (isNaN_(j.f)) {
                    j.f = this.b7;
                }
                j.c = g.m;
                if (isNaN_(j.c)) {
                    j.c = this.b7;
                }
                b.m.add(j);
            }
            b.l.i = this.hj;
            b.l.j = this.hk;
            b.l.h = this.b8;
            b.l.g = c.i(this.bl);
            b.l.d = c.i(this.bk);
            b.l.e = this.b6;
            b.l.b = this.b6;
            b.l.f = this.b7;
            b.l.c = this.b7;
            b.ab = this.hg;
            b.ad = this.hn;
            b.x = this.cp;
            b.w = this.cn;
            b.v = this.cj;
            b.ac = this.hi;
            b.q = this.b4;
            b.p = this.b2;
            b.o = this.b0;
            let k = this.bs;
            if (isNaN_(k)) {
                k = (this.bk - this.bl) / 10;
            }
            if (k == 0) {
                k = this.bk - this.bl;
            }
            let l = new List$1(Number_$type, 0);
            let m = new List$1(Number_$type, 0);
            if (k > 0) {
                let n = this.bl + this.cl;
                let o = this.bk - this.cm;
                let p = 100000;
                let q = Math.abs(o - n) / p;
                if (k >= q) {
                    for (let r = n; r <= o || this.a9(r, o, k); r = r + k) {
                        l.add(c.i(r));
                        for (let s = 0; s < d; s++) {
                            let t = (k / (d + 1)) * (s + 1);
                            if (t + r > o) {
                                continue;
                            }
                            m.add(c.i(t + r));
                        }
                    }
                }
            }
            if (b.j.length != l.count || b.i.length != m.count) {
                b.j = new Array(l.count);
                b.i = new Array(m.count);
            }
            for (let u = 0; u < l.count; u++) {
                b.j[u] = l._inner[u];
            }
            for (let v = 0; v < m.count; v++) {
                b.i[v] = m._inner[v];
            }
        }
        hx() {
            let a = this.bs;
            let b = this.bu;
            if (isNaN_(a)) {
                a = (this.bk - this.bl) / 10;
            }
            if (isNaN_(b)) {
                b = a;
            }
            if (b == 0) {
                b = this.bk - this.bl;
            }
            let c = new List$1(Number_$type, 0);
            if (b > 0) {
                let d = this.bv + this.bl;
                let e = this.bk - this.bw;
                let f = 100000;
                let g = Math.abs(e - d) / f;
                if (b >= g) {
                    for (let h = d; h <= e || this.a9(h, e, a); h += b) {
                        c.add(h);
                    }
                }
            }
            let i = new Array(c.count);
            let j = new Array(c.count);
            for (let k = 0; k < c.count; k++) {
                let l = c._inner[k];
                if (this.formatLabel == null && this.aj == null) {
                    l = (Math.round(l * 100) / 100);
                }
                let m = l.toString();
                if (this.aj != null) {
                    m = this.aj.i(l);
                }
                let n = new FormatLinearGraphLabelEventArgs();
                n.value = l;
                n.label = m;
                if (this.formatLabel != null) {
                    this.formatLabel(this, n);
                }
                m = n.label;
                let o = this.view.cr(((() => {
                    let $ret = new TextBlock();
                    $ret.ak = m;
                    return $ret;
                })()));
                i[k] = o.width;
                j[k] = o.height;
            }
            let p = 0;
            let q = 0;
            let r = 1 - this.ca + this.cd;
            if (this.ar == 0) {
                for (let s = 0; s < j.length; s++) {
                    q = Math.max(q, j[s]);
                }
                for (let t = 0; t < i.length; t++) {
                    p += i[t];
                }
                if (i.length > 0) {
                    p += i[0] / 2;
                }
                if (i.length > 1) {
                    p += i[i.length - 1] / 2;
                }
                if (i.length > 0) {
                    p += (i.length - 1) * 5;
                }
                if (r > 0) {
                    p = p / Math.abs(1 - r);
                }
            }
            else {
                for (let u = 0; u < i.length; u++) {
                    p = Math.max(p, i[u]);
                }
                for (let v = 0; v < j.length; v++) {
                    q += j[v];
                }
                if (j.length > 0) {
                    q -= j[0] / 2;
                }
                if (j.length > 1) {
                    q -= j[j.length - 1] / 2;
                }
                if (r > 0) {
                    q = q / Math.abs(1 - r);
                }
                if (j.length > 0) {
                    q += (j.length - 1) * 5;
                }
            }
            return new Size(1, p, q);
        }
        e9() {
            let a = this.am;
            let b = a.c;
            let c = this.aq;
            let d = this.bs;
            let e = this.bu;
            let f = this.bz;
            if (isNaN_(d)) {
                d = (this.bk - this.bl) / 10;
            }
            if (isNaN_(e)) {
                e = d;
            }
            if (e == 0) {
                e = this.bk - this.bl;
            }
            let g = new List$1(Tuple$2.$.specialize(Number_$type, Number_$type), 0);
            if (e > 0) {
                let h = this.bv + this.bl;
                let i = this.bk - this.bw;
                let j = 100000;
                let k = Math.abs(i - h) / j;
                if (e >= k) {
                    for (let l = h; l <= i || this.a9(l, i, e); l = l + e) {
                        g.add(new Tuple$2(Number_$type, Number_$type, l, c.i(l)));
                    }
                }
            }
            if (b.d.length != g.count) {
                b.e = new Array(g.count);
                b.d = new Array(g.count);
                b.f = new Array(g.count);
                b.c = new Array(g.count);
                b.g = new Array(g.count);
                b.h = new Array(g.count);
            }
            b.n = this.bt;
            let m = new FormatLinearGraphLabelEventArgs();
            m.actualMinimumValue = this.bl;
            m.actualMaximumValue = this.bk;
            let n = new AlignLinearGraphLabelEventArgs();
            n.actualMinimumValue = this.bl;
            n.actualMaximumValue = this.bk;
            for (let o = 0; o < g.count; o++) {
                let p = g._inner[o].c;
                if (this.formatLabel == null) {
                    p = (Math.round(p * 100) / 100);
                }
                let q = (p).toString();
                if (this.aj != null) {
                    q = this.aj.i(p);
                }
                m.value = p;
                n.value = p;
                m.label = q;
                if (this.formatLabel != null) {
                    this.formatLabel(this, m);
                }
                q = m.label;
                n.label = q;
                let r = this.view.cr(((() => {
                    let $ret = new TextBlock();
                    $ret.ak = q;
                    return $ret;
                })()));
                n.width = r.width;
                n.height = r.height;
                if (this.ar == 0) {
                    n.offsetX = -1 * (r.width / 2);
                    n.offsetY = -1 * (r.height);
                }
                else {
                    n.offsetX = -1 * r.width;
                    n.offsetY = -1 * (r.height / 2);
                }
                if (this.alignLabel != null) {
                    this.alignLabel(this, n);
                }
                b.f[o] = n.width;
                b.c[o] = n.height;
                b.g[o] = n.offsetX;
                ;
                b.h[o] = n.offsetY;
                b.d[o] = q;
                b.e[o] = g._inner[o].d;
            }
        }
        a9(a, b, c) {
            let d = c / 10000;
            if (isNaN_(d)) {
                d = 1E-05;
            }
            let e = Math.abs(a - b);
            if (e < d) {
                return true;
            }
            return false;
        }
        e8() {
            let a = this.am;
            let b = a.a;
            b.e = this.he;
            b.f = this.hf;
            b.c = this.bp;
            b.a = this.bn;
            b.b = this.bo;
        }
        fb() {
            let a = this.am;
            let b = a.b;
            let c = this.aq;
            b.e = this.cg;
            b.b = this.cg;
            b.f = this.ch;
            b.c = this.ch;
            b.i = this.hl;
            b.j = this.hm;
            b.h = this.ci;
            if (isNaN_(this.ce)) {
                return;
            }
            let d = c.i(this.ce);
            let e = (this.cf / 2);
            b.g = d - e;
            b.d = d + e;
        }
        fc() {
            let a = this.am.c;
            let b = this.aq;
            let c = this.cr;
            if (isNaN_(c)) {
                return;
            }
            let d = this.bl;
            if (isNaN_(d)) {
                d = this.bl;
            }
            let e = this.cr;
            let f = new LinearGraphRectFrame();
            f.i = this.ho;
            f.j = this.hp;
            f.h = this.cu;
            f.g = b.i(d);
            f.d = b.i(e);
            f.e = this.cs;
            f.b = this.cs;
            f.f = this.ct;
            f.c = this.ct;
            a.af = f;
        }
        hh(a, b) {
            if (b != null && b.count > 0) {
                return b.item(a % b.count);
            }
            else {
                return null;
            }
        }
        fn(a) {
            let b = this.hv;
            let c = a.c;
            let d = this.a0;
            let e = c.j;
            let f = c.w;
            let g = c.v;
            let h = c.ad;
            let i = c.x;
            let j = this.ay;
            let k = c.i;
            let l = c.p;
            let m = c.o;
            let n = c.ac;
            let o = c.q;
            d.f = true;
            for (let p = 0; p < this.bc.count; p++) {
                d.n(this.bc._inner[p]);
            }
            this.bc.clear();
            let q = this.b9();
            let r = this.cw();
            for (let s = 0; s < e.length; s++) {
                let t, u, v, w;
                if (this.ar == 1) {
                    t = b.left + q * f;
                    u = r - e[s];
                    v = b.left + q * g;
                    w = u;
                }
                else {
                    t = b.left + e[s];
                    u = q * (1 - f);
                    v = t;
                    w = q * (1 - g);
                }
                let x = d.a();
                let y = new PathGeometry();
                let z = new PathFigure();
                z._startPoint = { $type: Point_$type, x: t, y: u };
                z._segments.add(((() => {
                    let $ret = new LineSegment(1);
                    $ret.c = { $type: Point_$type, x: v, y: w };
                    return $ret;
                })()));
                y.c.add(z);
                x.ak = y;
                x._stroke = h;
                x.ac = i;
                this.bc.add(x);
            }
            for (let aa = 0; aa < k.length; aa++) {
                let ab, ac, ad, ae;
                if (this.ar == 1) {
                    ab = b.left + q * l;
                    ac = r - k[aa];
                    ad = b.left + q * m;
                    ae = ac;
                }
                else {
                    ab = k[aa];
                    ac = q * (1 - l);
                    ad = ab;
                    ae = q * (1 - m);
                }
                let af = d.a();
                let ag = new PathGeometry();
                let ah = new PathFigure();
                ah._startPoint = { $type: Point_$type, x: ab, y: ac };
                ah._segments.add(((() => {
                    let $ret = new LineSegment(1);
                    $ret.c = { $type: Point_$type, x: ad, y: ae };
                    return $ret;
                })()));
                ag.c.add(ah);
                af.ak = ag;
                af._stroke = n;
                af.ac = o;
                this.bc.add(af);
            }
            d.f = false;
        }
        fk(a) {
            let b = this.hv;
            let c = a.c;
            let d = c.e;
            let e = c.d;
            let f = c.g;
            let g = c.h;
            let h = c.f;
            let i = c.c;
            let j = c.n;
            let k = this.ax;
            k.f = true;
            for (let l = 0; l < this.ba.count; l++) {
                k.n(this.ba._inner[l]);
            }
            this.ba.clear();
            let m = c.ab;
            let n = this.cv();
            let o = this.cw();
            for (let p = 0; p < e.length; p++) {
                let q, r;
                if (this.ar == 1) {
                    q = b.left + n * j;
                    r = b.top + o - d[p];
                }
                else {
                    q = b.left + d[p];
                    r = b.top + n * (1 - j);
                }
                let s = k.a();
                s.ak = e[p];
                this.view.bq(s, m);
                let t = h[p];
                let u = i[p];
                let v = f[p];
                let w = g[p];
                this.view.bh(s, q + v, r + w);
                this.ba.add(s);
            }
            k.f = false;
        }
        fl(a) {
            let b = a.c;
            let c = this.az;
            c.f = true;
            for (let d = 0; d < this.bb.count; d++) {
                c.n(this.bb._inner[d]);
            }
            this.bb.clear();
            let e = this.b9();
            let f = this.cw();
            let g = this.hq();
            let h = this.view.cm();
            h.ak = b.ae(g, e, f, this.ar);
            for (let i = 0; i < b.m.count; i++) {
                let j = b.m._inner[i];
                let k = c.a();
                k.ak = j.k(g, e, f, this.ar);
                k._fill = j.i;
                k._stroke = j.j;
                k.ac = j.h;
                this.bb.add(k);
            }
            this.view.bp(this.bb);
            c.f = false;
            let l = this.view.cl();
            l.ak = b.l.k(g, e, f, this.ar);
            l._fill = b.l.i;
            l._stroke = b.l.j;
            l.ac = b.l.h;
        }
        fj(a) {
            let b = this.hu;
            let c = this.view.ck();
            let d = a.a;
            let e = this.ar == 0 ? b.height : b.width;
            let f = this.ar == 0 ? b.width : b.height;
            let g = d.g(e, f, this.ar);
            c.ak = g;
            c._fill = d.e;
            c._stroke = d.f;
            c.ac = d.c;
        }
        fm(a) {
            let b = this.view.cn();
            if (isNaN_(this.ce) || this.ce < this.bl || this.ce > this.bk) {
                b.ak = null;
                return;
            }
            let c = a.b;
            let d = this.b9();
            let e = this.cw();
            let f = this.hq();
            let g = c.k(f, d, e, this.ar);
            b.ak = g;
            b._fill = c.i;
            b._stroke = c.j;
            b.ac = c.h;
        }
        fo(a) {
            let b = this.view.co();
            let c = this.cr;
            if (c <= this.bl || c > this.bk || isNaN_(c)) {
                b.ak = null;
                return;
            }
            let d = a.c;
            let e = this.b9();
            let f = this.cw();
            let g = this.hq();
            let h = d.af;
            b.ak = h.k(g, e, f, this.ar);
            b._fill = h.i;
            b._stroke = h.j;
            b.ac = h.h;
        }
        e7(a, b) {
            this.a3 = true;
            this.view.bo();
        }
        e2(a, b) {
            this.a3 = true;
            this.view.bo();
        }
        b9() {
            if (this.ar == 0) {
                return this.a6 ? this.hw.height : this.hv.height;
            }
            return this.a6 ? this.hw.width : this.hv.width;
        }
        cb() {
            if (this.ar == 0) {
                return this.hw.width * (this.ca - this.cd);
            }
            return this.hw.height * (this.ca - this.cd);
        }
        cv() {
            if (this.ar == 0) {
                return this.hw.height;
            }
            return this.hw.width;
        }
        cw() {
            if (this.ar == 0) {
                return this.hw.width;
            }
            return this.hw.height;
        }
        cc() {
            let a = this.cd;
            if (this.ar == 0) {
                if (this.a4) {
                    a = 1 - this.ca;
                }
                return this.hw.left + this.hw.width * a;
            }
            if (this.a4) {
                a = 1 - this.ca;
            }
            return this.hw.top + this.hw.height * a;
        }
        hq() {
            let a = this.hv.left;
            if (this.a6) {
                a = 0;
            }
            let b = this.cd;
            if (this.ar == 0) {
                if (this.a4) {
                    b = 1 - this.ca;
                }
                return { $type: Point_$type, x: a + this.hv.width * b, y: this.hv.top };
            }
            if (!this.a4) {
                b = 1 - this.ca;
            }
            return { $type: Point_$type, x: a, y: this.hv.top + this.hv.height * b };
        }
        e5(a, b, c) {
            switch (a) {
                case XamBulletGraph.$$p[48]:
                case XamBulletGraph.$$p[33]:
                case XamBulletGraph.$$p[37]:
                case XamBulletGraph.$$p[0]:
                case XamBulletGraph.$$p[3]:
                case XamBulletGraph.$$p[52]:
                case XamBulletGraph.$$p[40]:
                case XamBulletGraph.$$p[18]:
                    this.view.a5(a, b, c);
                    break;
                case XamBulletGraph.$$p[24]:
                    this.view.ba(b, c);
                    break;
                case XamBulletGraph.$$p[27]:
                    this.view.bb(b, c);
                    break;
            }
            switch (a) {
                case XamBulletGraph.$$p[10]:
                case XamBulletGraph.$$p[11]:
                    if (this.dd != null) {
                        this.aj = new BindingFormatter();
                        this.aj.j = this.dd;
                        this.aj.d = this.ag;
                    }
                    else {
                        this.aj = null;
                    }
                    this.a3 = true;
                    this.view.bo();
                    break;
                case XamBulletGraph.$$p[47]:
                    this.av.r = this.cy;
                    this.view.bo();
                    break;
                case "TransitionProgress":
                    if (this.cq >= 1) {
                        this.av.w();
                        let d = this.am;
                        this.am = this.an;
                        this.an = d;
                        this.e9();
                        this.fb();
                        this.fc();
                        this.fa();
                        this.e8();
                        this.fj(this.am);
                        this.fl(this.am);
                        this.fm(this.am);
                        this.fo(this.am);
                        this.fn(this.am);
                        this.fk(this.am);
                    }
                    this.al.d(this.cq, this.an, this.am);
                    this.fj(this.al);
                    this.fl(this.al);
                    this.fm(this.al);
                    this.fo(this.al);
                    this.fn(this.al);
                    this.fk(this.al);
                    this.view.as();
                    break;
                case XamBulletGraph.$$p[53]:
                case XamBulletGraph.$$p[49]:
                case XamBulletGraph.$$p[51]:
                case XamBulletGraph.$$p[48]:
                case XamBulletGraph.$$p[52]:
                case XamBulletGraph.$$p[54]:
                case XamBulletGraph.$$p[33]:
                case XamBulletGraph.$$p[37]:
                case XamBulletGraph.$$p[39]:
                case XamBulletGraph.$$p[32]:
                case XamBulletGraph.$$p[34]:
                case XamBulletGraph.$$p[36]:
                case XamBulletGraph.$$p[0]:
                case XamBulletGraph.$$p[3]:
                case XamBulletGraph.$$p[40]:
                case XamBulletGraph.$$p[18]:
                case XamBulletGraph.$$p[24]:
                case XamBulletGraph.$$p[27]:
                case XamBulletGraph.$$p[16]:
                case XamBulletGraph.$$p[38]:
                case XamBulletGraph.$$p[35]:
                case XamBulletGraph.$$p[25]:
                case XamBulletGraph.$$p[26]:
                case XamBulletGraph.$$p[4]:
                case XamBulletGraph.$$p[1]:
                case XamBulletGraph.$$p[2]:
                case XamBulletGraph.$$p[7]:
                case XamBulletGraph.$$p[12]:
                case XamBulletGraph.$$p[9]:
                case XamBulletGraph.$$p[13]:
                case XamBulletGraph.$$p[14]:
                case XamBulletGraph.$$p[42]:
                case XamBulletGraph.$$p[43]:
                case XamBulletGraph.$$p[44]:
                case XamBulletGraph.$$p[41]:
                case XamBulletGraph.$$p[45]:
                case XamBulletGraph.$$p[21]:
                case XamBulletGraph.$$p[20]:
                case XamBulletGraph.$$p[19]:
                case XamBulletGraph.$$p[22]:
                case "ScaleBackgroundBrush":
                case "ScaleBackgroundOutline":
                case "ScaleBackgroundThickness":
                    this.a3 = true;
                    this.view.bo();
                    break;
                case XamBulletGraph.$$p[28]:
                    let e = b;
                    let f = c;
                    if (e != null) {
                        let g = e;
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.fg));
                    }
                    if (f != null) {
                        let h = f;
                        h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.fg));
                    }
                    this.a3 = true;
                    this.view.bo();
                    break;
                case XamBulletGraph.$$p[23]:
                case XamBulletGraph.$$p[8]:
                case XamBulletGraph.$$p[17]:
                case XamBulletGraph.$$p[15]:
                case XamBulletGraph.$$p[29]:
                case XamBulletGraph.$$p[30]:
                    this.bl = Math.min(this.by, this.bx);
                    this.bk = Math.max(this.by, this.bx);
                    let i = this.cc();
                    this.aq = new LinearGraphScaler(this.bl, this.bk, i, i + this.cb(), this.a4);
                    this.a3 = true;
                    this.view.bo();
                    break;
                case XamBulletGraph.$$p[5]:
                case XamBulletGraph.$$p[6]:
                    this.view.by();
                    this.a3 = true;
                    this.view.bo();
                    break;
                case "PixelScalingRatio":
                    if (isNaN_(DeviceUtils.a(this.b5))) {
                        this.bm = 1;
                    }
                    else {
                        this.bm = DeviceUtils.a(this.b5);
                    }
                    break;
                case "ActualPixelScalingRatio":
                    this.view.bf();
                    break;
            }
            this.e6(a);
        }
        fg(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    c.propertyChanged = delegateRemove(c.propertyChanged, runOn(this, this.ff));
                }
            }
            if (b.newItems != null) {
                for (let d of fromEn(b.newItems)) {
                    d.propertyChanged = delegateCombine(d.propertyChanged, runOn(this, this.ff));
                }
            }
            this.a3 = true;
            this.view.bo();
        }
        ff(a, b) {
            this.a3 = true;
            this.view.bo();
        }
        refresh() {
            this.a3 = true;
            this.view.bo();
        }
        aw() {
            return FontUtil.toFontInfo(this.view.ag, this.c7);
        }
    }
    XamBulletGraph.$t = /*@__PURE__*/ markType(XamBulletGraph, 'XamBulletGraph', Control.$, [INotifyPropertyChanged_$type]);
    XamBulletGraph.gl = /*@__PURE__*/ DependencyProperty.i("ScaleBackgroundBrush", Brush.$, XamBulletGraph.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.e5("ScaleBackgroundBrush", b.oldValue, b.newValue)));
    XamBulletGraph.gm = /*@__PURE__*/ DependencyProperty.i("ScaleBackgroundOutline", Brush.$, XamBulletGraph.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.e5("ScaleBackgroundOutline", b.oldValue, b.newValue)));
    XamBulletGraph.gn = /*@__PURE__*/ DependencyProperty.i("ScaleBackgroundThickness", Number_$type, XamBulletGraph.$, /*@__PURE__*/ new PropertyMetadata(2, 1, (a, b) => a.e5("ScaleBackgroundThickness", b.oldValue, b.newValue)));
    XamBulletGraph.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, XamBulletGraph, 'e5', ['BackingBrush:he:fs', [Brush.$, null], 'BackingInnerExtent:bn:ft', [1, 0], 'BackingOuterExtent:bo:fu', [1, 1], 'BackingOutline:hf:fv', [Brush.$, null], 'BackingStrokeThickness:bp:fw', [1, 2], 'FontBrush:hg:fx', [Brush.$, null], 'Font:c7:fy', [2, null], 'Interval:bs:fz', [1, NaN], 'IsScaleInverted:a4:f0', [0, false], 'LabelExtent:bt:f1', [1, 0], 'LabelFormat:dd:f2', [2, null], 'LabelFormatSpecifiers:ag:f3', [Array_$type, null], 'LabelInterval:bu:f4', [1, NaN], 'LabelsPostInitial:bv:f5', [1, 0], 'LabelsPreTerminal:bw:f6', [1, 0], 'MaximumValue:bx:f7', [1, 100], 'MergeViewPorts:a6:f8', [0, false], 'MinimumValue:by:f9', [1, 0], 'MinorTickBrush:hi:ga', [Brush.$, null], 'MinorTickCount:bz:gb', [1, 3], 'MinorTickEndExtent:b0:gc', [1, 0.2], 'MinorTickStartExtent:b2:gd', [1, 0.1], 'MinorTickStrokeThickness:b4:ge', [1, 1], 'Orientation:ar:gf', [LinearScaleOrientation_$type, /*@__PURE__*/ enumGetBox(LinearScaleOrientation_$type, 0)], 'RangeBrushes:ah:gg', [BrushCollection.$, null], 'RangeInnerExtent:b6:gh', [1, 0.2], 'RangeOuterExtent:b7:gi', [1, 0.95], 'RangeOutlines:ai:gj', [BrushCollection.$, null], 'Ranges::gk', [LinearGraphRangeCollection.$, null], 'ScaleEndExtent:ca:go', [1, 0.95], 'ScaleStartExtent:cd:gp', [1, 0.05], 'ShowToolTipTimeout:cx:gq', [1, 500], 'TargetValueBreadth:cf:gr', [1, 3], 'TargetValueBrush:hl:gs', [Brush.$, null], 'TargetValueInnerExtent:cg:gt', [1, 0.3], 'TargetValueName:d8:gu', [2, null], 'TargetValueOuterExtent:ch:gv', [1, 0.85], 'TargetValueOutline:hm:gw', [Brush.$, null], 'TargetValue:ce:gx', [1, NaN], 'TargetValueStrokeThickness:ci:gy', [1, 1], 'TickBrush:hn:gz', [Brush.$, null], 'TickEndExtent:cj:g0', [1, 0.2], 'TicksPostInitial:cl:g1', [1, 0], 'TicksPreTerminal:cm:g2', [1, 0], 'TickStartExtent:cn:g3', [1, 0.06], 'TickStrokeThickness:cp:g4', [1, 2], 'ToolTip::g5', [4, null], 'TransitionDuration:cy:g6', [1, 0], 'ValueBrush:ho:g7', [Brush.$, null], 'ValueInnerExtent:cs:g8', [1, 0.5], 'ValueName:ep:g9', [2, null], 'ValueOuterExtent:ct:ha', [1, 0.65], 'ValueOutline:hp:hb', [Brush.$, null], 'Value:cr:hc', [1, NaN], 'ValueStrokeThickness:cu:hd', [1, 1]]);
    return XamBulletGraph;
})();
/**
 * @hidden
 */
export let XamBulletGraphView = /*@__PURE__*/ (() => {
    class XamBulletGraphView extends Base {
        constructor(a) {
            super();
            this.ao = 0;
            this.an = 0;
            this.ap = 0;
            this.m = null;
            this.i = null;
            this.ai = null;
            this.p = null;
            this.ag = null;
            this.aa = null;
            this.z = null;
            this.y = null;
            this.ab = null;
            this.cj = null;
            this.ci = null;
            this.ch = null;
            this.cf = null;
            this.cg = null;
            this.b7 = null;
            this.b8 = null;
            this.b4 = null;
            this.b5 = null;
            this.b9 = null;
            this.ca = null;
            this.b6 = null;
            this.c = null;
            this.d = null;
            this.e = null;
            this.f = null;
            this.cb = null;
            this.cc = null;
            this.q = false;
            this.v = null;
            this.a = ["value", "targetvalue", "backing", "scale", "tick", "minortick", "label"];
            this.u = false;
            this.t = false;
            this.ah = null;
            this.k = null;
            this.aj = 0;
            this.al = 0;
            this.aq = null;
            this.am = -1;
            this.cd = null;
            this.ak = 0;
            this.x = null;
            this.b3 = ((() => {
                let $ret = new Brush();
                $ret.fill = "black";
                return $ret;
            })());
            this.r = false;
            this.n = null;
            this.b2 = null;
            this.ac = 0;
            this.m = a;
            this.v = new Dictionary$2(String_$type, Dictionary$2.$.specialize(String_$type, Brush.$), 0);
            this.ci = new Path();
            this.cj = new Path();
            this.ch = new Path();
            this.cf = new Path();
            this.cg = new Path();
            this.aa = new List$1(Path.$, 0);
            this.z = new List$1(Path.$, 0);
            this.y = new List$1(TextBlock.$, 0);
            this.ab = new List$1(TextBlock.$, 0);
        }
        a4() {
            this.a0();
            if (this.i != null) {
                this.i.ap(this.ag.rootWrapper, "");
            }
        }
        a8() {
            if (this.i != null) {
                this.i.bb(this.ag.rootWrapper, "");
            }
        }
        a9() {
            this.k = new LinearGraphTooltipDataContext();
            this.ak = this.m.cx;
            this.a0();
        }
        a0() {
            let a = this.m.b5;
            let b = this.m.bm;
            if (!isNaN_(a) && a != 0) {
                return;
            }
            if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
                this.m.bm = window.devicePixelRatio;
            }
        }
        s() {
            return true;
        }
        cn() {
            return this.ci;
        }
        co() {
            return this.cj;
        }
        cm() {
            return this.ch;
        }
        ck() {
            return this.cf;
        }
        cl() {
            return this.cg;
        }
        ay() {
            this.q = true;
            let a = ["#778899", "black", "#EBEDEF", "#617583", "#617583", "rgba(100,107,114,.74)", "rgba(100,107,114,.74)"];
            let b = ["#778899", "black", "#B2B9C0", "#B2B9C0", null, null, null];
            let c = ((() => {
                let $ret = new List$1(Array_$type, 0);
                $ret.add(a);
                $ret.add(b);
                return $ret;
            })());
            this.v.clear();
            let d = this.a.length;
            for (let e = 0; e < d; e++) {
                let f = this.a[e];
                let g = "ui-bulletgraph-" + f;
                let h = "ui-bulletgraph-" + f + "-fill";
                let i = "ui-bulletgraph-" + f + "-outline";
                let j;
                if (!((() => { let k = XamBulletGraphView.w.tryGetValue(h, j); j = k.p1; return k.ret; })())) {
                    j = BrushUtil.j(h, g, "background-color", this.ag, a[e]);
                    XamBulletGraphView.w.addItem(h, j);
                }
                let k;
                if (!((() => { let l = XamBulletGraphView.w.tryGetValue(i, k); k = l.p1; return l.ret; })())) {
                    k = BrushUtil.j(i, g, "border-top-color", this.ag, b[e]);
                    XamBulletGraphView.w.addItem(i, k);
                }
                let l = new Dictionary$2(String_$type, Brush.$, 0);
                l.item("fill", j);
                l.item("outline", k);
                this.v.item(this.a[e], l);
            }
            this.bx();
            if (XamBulletGraphView.g == null || XamBulletGraphView.h == null) {
                let m = BrushUtil.f("ui-bulletgraph-range-fill-palette-", "ui-bulletgraph-range-outline-palette-", "ui-bulletgraph-range-palette-", this.ag, XamBulletGraphView.g, XamBulletGraphView.h, ["#216E99", "#216E99", "#44acd6", "#44acd6", "#cecece", "#cecece"]);
                XamBulletGraphView.g = m.p4;
                XamBulletGraphView.h = m.p5;
            }
            this.c = XamBulletGraphView.g;
            this.d = XamBulletGraphView.h;
            if (this.e == null) {
                this.m.ah = this.c;
            }
            if (this.f == null) {
                this.m.ai = this.d;
            }
            this.q = false;
        }
        bx() {
            this.q = true;
            let a = this.a.length;
            for (let b = 0; b < a; b++) {
                let c = this.a[b];
                this.bw(c, this.v.item(c));
            }
            this.q = false;
        }
        bw(a, b) {
            let c = b.item("fill");
            let d = b.item("outline");
            switch (a) {
                case "targetvalue":
                    if (this.b7 == null) {
                        this.m.hl = c;
                    }
                    if (this.b8 == null) {
                        this.m.hm = d;
                    }
                    break;
                case "value":
                    if (this.cb == null) {
                        this.m.ho = c;
                    }
                    if (this.cc == null) {
                        this.m.hp = d;
                    }
                    break;
                case "backing":
                    if (this.b4 == null) {
                        this.m.he = c;
                    }
                    if (this.b5 == null) {
                        this.m.hf = d;
                    }
                    break;
                case "tick":
                    if (this.ca == null) {
                        this.m.hn = c;
                    }
                    break;
                case "minortick":
                    if (this.b6 == null) {
                        this.m.hi = c;
                    }
                    break;
                case "label":
                    this.b3 = c;
                    break;
            }
        }
        a5(a, b, c) {
            let d = b;
            let e = c;
            if (!this.q) {
                switch (a) {
                    case XamBulletGraph.$$p[33]:
                        this.b7 = e;
                        break;
                    case XamBulletGraph.$$p[37]:
                        this.b8 = e;
                        break;
                    case XamBulletGraph.$$p[0]:
                        this.b4 = e;
                        break;
                    case XamBulletGraph.$$p[3]:
                        this.b5 = e;
                        break;
                    case XamBulletGraph.$$p[48]:
                        this.cb = e;
                        break;
                    case XamBulletGraph.$$p[52]:
                        this.cc = e;
                        break;
                    case XamBulletGraph.$$p[40]:
                        this.ca = e;
                        break;
                    case XamBulletGraph.$$p[18]:
                        this.b6 = e;
                        break;
                }
                if (e == null) {
                    this.bx();
                }
            }
        }
        ba(a, b) {
            if (!this.q) {
                this.e = b;
                if (this.e == null) {
                    this.m.ah = this.c;
                }
            }
        }
        bb(a, b) {
            if (!this.q) {
                this.f = b;
                if (this.f == null) {
                    this.m.ai = this.d;
                }
            }
        }
        b(a, b) {
            this.ag.startCSSQuery();
            for (let c = 0; c < b.length; c++) {
                b[c] = this.ag.getCssDefaultPropertyValue(a, b[c]);
            }
            this.ag.endCSSQuery();
            return b;
        }
        bs() {
            this.ay();
            this.by();
            this.bo();
        }
        ce(a) {
            let b = CanvasGestureDOMEventProxy.cy(this.ag.rootWrapper);
            return { $type: Point_$type, x: a.x - b.left, y: a.y - b.top };
        }
        br(a, b, c, d) {
            this.cd = a;
            this.am = c;
            this.aq = d;
            this.bn();
            this.al = window.setTimeout(runOn(this, this.bz), this.ak);
            this.t = true;
        }
        az() {
            if (this.t) {
                window.clearTimeout(this.al);
                this.t = false;
            }
            if (this.u) {
                let a = this.m.toolTip;
                window.clearTimeout(this.aj);
                a.hide();
                this.u = false;
                this.k = null;
            }
            this.ak = this.m.cx;
        }
        bn() {
            if (this.t) {
                window.clearTimeout(this.al);
            }
            if (this.u) {
                let a = this.m.toolTip;
                window.clearTimeout(this.aj);
                a.hide();
                this.u = false;
                this.ak = intDivide(this.m.cx, 2);
            }
        }
        bz() {
            if (this.t) {
                window.clearTimeout(this.al);
                this.t = false;
            }
            let a = this.am;
            let b = this.aq;
            let c = this.cd;
            if (this.ag != null) {
                this.aj = this.ag.setTimeout(runOn(this, this.az), 10 * this.m.cx);
            }
            else {
                this.aj = window.setTimeout(runOn(this, this.az), 10 * this.m.cx);
            }
            let d = this.m.ranges._inner[a];
            if (this.ah != this.m.toolTip) {
                if (this.ah != null) {
                    this.ah.remove();
                }
                this.ah = this.m.toolTip;
                this.ah.setStyleProperty("z-index", "10000");
                this.ah.setStyleProperty("position", "absolute");
                this.ag.append(this.ah);
            }
            this.k = this.j(b, a);
            let context_ = this.k;
            let tooltip_ = this.ah;
            let tooltipType_ = b;
            if (tooltip_.updateToolTip) {
                tooltip_.updateToolTip(context_, tooltipType_);
            }
            ;
            let e = this.ah.findByClass(".ui-tooltip-container");
            if (e != null && e.length > 0) {
                e[0].setAttribute("style", null);
            }
            let f = "ui-simple-default-tooltip-content";
            let g = this.ah.findByClass("." + f);
            if (g != null && g.length > 0) {
                let h = ["border-top-color", "border-top-width", "border-top-style", "border-top-left-radius", "background-color", "padding-top", "font-weight"];
                let i = ["border-color", "border-width", "border-style", "border-radius", "background-color", "padding", "font-weight"];
                let j = ((() => {
                    let $ret = new List$1(String_$type, 0);
                    $ret.add(this.k.brush.color.colorString);
                    $ret.add("2px");
                    $ret.add("solid");
                    $ret.add("4px");
                    $ret.add("rgba(230, 230, 230, 0.74)");
                    $ret.add("4px");
                    $ret.add("bold");
                    return $ret;
                })());
                let k = new Dictionary$2(String_$type, String_$type, 0);
                let l = new Array(h.length);
                arrayCopy1(h, 0, l, 0, h.length);
                this.b(f, l);
                for (let m = 0; m < l.length; m++) {
                    this.ah.setStyleProperty(i[m], (l[m] == null) ? j._inner[m] : l[m]);
                }
            }
            this.ah.setStyleProperty("top", (c.y + 15).toString() + "px").setStyleProperty("left", (c.x + 15).toString() + "px");
            this.ah.show();
            this.u = true;
        }
        j(a, b) {
            let c = new LinearGraphTooltipDataContext();
            switch (a) {
                case "range":
                    let d = this.m.ranges._inner[b];
                    c.item = d;
                    c.itemName = d.u;
                    c.label = d.u + ": " + d.o.toString() + "-" + d.j.toString();
                    let e = d.an;
                    let f = d.ao;
                    c.brush = e != null ? e : this.m.hh(b, this.c);
                    c.outline = f != null ? f : this.m.hh(b, this.d);
                    c.thickness = d.p;
                    break;
                case "value":
                    c.item = this.m.cr;
                    c.itemName = this.m.ep;
                    c.label = this.m.ep != null ? this.m.ep + ": " + this.m.cr.toString() : this.m.cr.toString();
                    c.brush = this.m.ho;
                    c.outline = this.m.hp;
                    c.thickness = this.m.cu;
                    break;
                case "targetvalue":
                    c.item = this.m.ce;
                    c.itemName = this.m.d8;
                    c.label = this.m.d8 != null ? this.m.d8 + ": " + this.m.ce.toString() : this.m.ce.toString();
                    c.brush = this.m.hl;
                    c.outline = this.m.hm;
                    c.thickness = this.m.ci;
                    break;
            }
            return c;
        }
        a6(a) {
            if (a == null) {
                this.ai = null;
                this.ag = null;
                this.ah = null;
                this.p = null;
                this.at();
                return;
            }
            let b = a;
            this.ag = b;
            this.m.av.u(this.ag);
            this.ag.rootWrapper.addClass("ui-bulletgraph-container");
            this.ap = (isNaN_(this.m.b5) ? this.m.bm : this.m.b5);
            let c = this.ap;
            let d = Math.round(b.rootWrapper.width());
            let e = Math.round(b.rootWrapper.height());
            let f = d * c;
            let g = e * c;
            this.ag.rootWrapper.setStyleProperty("position", "relative");
            let h = this.ag.createElement("canvas");
            h.setStyleProperty("position", "absolute");
            this.ag.append(h);
            this.ao = f;
            this.an = g;
            h.setAttribute("width", f.toString());
            h.setAttribute("height", g.toString());
            h.setStyleProperty("width", d.toString());
            h.setStyleProperty("height", e.toString());
            this.m.hw = new Rect(0, 0, 0, d, e);
            this.m.hu = new Rect(0, 0, 0, d, e);
            this.ai = h;
            let i = this.ag.get2DCanvasContext(this.ai);
            this.p = new RenderingContext(new CanvasViewRenderer(), i);
            this.ay();
            this.by();
            this.p.ac(this.n);
            this.at();
            if (TypeRegistrar.isRegistered("CanvasGestureDOMEventProxy")) {
                this.i = typeCast(EventProxy.$, TypeRegistrar.create("CanvasGestureDOMEventProxy", this.ag.rootWrapper, this.ag, false));
            }
            if (this.i != null) {
                let j = this.i;
                j.onMouseOver = delegateCombine(j.onMouseOver, runOn(this, this.av));
                let k = this.i;
                k.onMouseLeave = delegateCombine(k.onMouseLeave, runOn(this, this.au));
            }
            this.bm();
        }
        at() {
            if (this.i != null) {
                let a = this.i;
                a.onMouseOver = delegateRemove(a.onMouseOver, runOn(this, this.av));
                let b = this.i;
                b.onMouseLeave = delegateRemove(b.onMouseLeave, runOn(this, this.au));
                this.i.aq();
            }
        }
        av(a, b, c) {
            if (this.m != null) {
                this.m.onMouseOver(a, b, c);
            }
        }
        au(a) {
            if (this.m != null) {
                this.m.onMouseLeave();
            }
        }
        a7() {
            this.a0();
            let a = Math.round(this.ag.rootWrapper.width());
            let b = Math.round(this.ag.rootWrapper.height());
            this.m.hw = new Rect(0, 0, 0, a, b);
            this.m.hu = new Rect(0, 0, 0, a, b);
            if (this.i != null) {
                this.i.bf = this.m.hw;
            }
        }
        as() {
            this.bm();
        }
        bp(a) {
            this.x = a;
        }
        bm() {
            let a = this.m.hw.width;
            let b = this.m.hw.height;
            let c = a * this.ap;
            let d = b * this.ap;
            if (this.ao != c || this.an != d) {
                this.ai.setAttribute("width", c.toString());
                this.ai.setAttribute("height", d.toString());
                this.ai.setStyleProperty("width", a.toString() + "px");
                this.ai.setStyleProperty("height", b.toString() + "px");
                this.ao = truncate(Math.round(c));
                this.an = truncate(Math.round(d));
            }
            if (this.p.d && this.ap != 1) {
                this.p.z();
                this.p.aa(this.ap, this.ap);
            }
            this.p.k(this.m.hw.left, this.m.hw.top, this.m.hw.width, this.m.hw.height);
            this.p.s(this.cf);
            this.p.s(this.cg);
            if (this.x != null) {
                for (let e = 0; e < this.x.count; e++) {
                    this.p.s(this.x._inner[e]);
                }
            }
            for (let f = 0; f < this.y.count; f++) {
                this.p.ac(this.n);
                this.p.w(this.y._inner[f]);
            }
            for (let g = 0; g < this.z.count; g++) {
                this.p.s(this.z._inner[g]);
            }
            this.p.s(this.cj);
            this.p.s(this.ci);
            if (this.p.d && this.ap != 1) {
                this.p.y();
            }
        }
        by() {
            if (this.m.c7 != null) {
                this.n = this.m.aw();
            }
            else {
                this.n = FontUtil.getFont(this.ag);
            }
            this.ac = this.ad(this.n);
            if (this.m.hg == null) {
                let a = this.ag.rootWrapper.getStyleProperty("color");
                if (stringIsNullOrEmpty(a) == false) {
                    this.b2 = new Brush();
                    this.b2._fill = a;
                    this.m.hg = this.b2;
                }
            }
            if (this.p != null) {
                this.p.ac(this.n);
            }
        }
        ae(a) {
            let b = typeCast(TextBlock.$, a);
            if (b != null && b.ak != null) {
                return this.p.e(b) + 0;
            }
            return 0;
        }
        cr(a) {
            if (isNaN_(this.ac)) {
                this.ac = this.ad(null);
            }
            let b = this.ae(a);
            let c = this.ac;
            return new Size(1, b, c);
        }
        bq(a, b) {
            if (b != null) {
                a.am = b;
            }
            else {
                a.am = this.b3;
            }
        }
        bh(a, b, c) {
            a.n = b;
            a.o = c;
        }
        bg(a, b) {
        }
        bi(a, b) {
        }
        ad(a) {
            return FontUtil.getCurrentFontHeight(this.ag, a);
        }
        bo() {
            if (!this.r) {
                this.r = true;
                if (this.ag != null) {
                    this.ag.setTimeout(runOn(this, this.ar), 0);
                }
                else {
                    window.setTimeout(runOn(this, this.ar), 0);
                }
            }
        }
        ar() {
            if (this.r) {
                this.r = false;
                this.m.ew();
            }
        }
        flush() {
            if (this.r) {
                this.ar();
            }
        }
        o(a, b) {
            return FontUtil.getFontInfo(this.ag, a, b);
        }
        aw(a) {
            a.scalePath = new PathVisualData(1, "Scale", this.ch);
            a.targetValuePath = new PathVisualData(1, "TargetValue", this.ci);
            a.valuePath = new PathVisualData(1, "Value", this.cj);
            a.backingPath = new PathVisualData(1, "Backing", this.cf);
            a.scaleBackgroundPath = new PathVisualData(1, "ScaleBackground", this.cg);
            let b = this.n;
            for (let c of fromEnum(this.y)) {
                if (c._visibility == 0) {
                    let d = this.o(c, b);
                    let e = new LinearGraphScaleLabelVisualData();
                    e.labelValue = c.ak;
                    e.labelPosition = PointData.b({ $type: Point_$type, x: c.n, y: c.o });
                    e.labelSize = SizeData.b(this.cr(c));
                    e.appearance = AppearanceHelper.c(c, d);
                    a.scaleLabels.add(e);
                }
            }
            for (let f of fromEnum(this.z)) {
                if (f._visibility == 0) {
                    let g = new LinearGraphScaleTickmarkVisualData();
                    g.tickPath = new PathVisualData(1, "tickmarks", f);
                    a.scaleTickmarks.add(g);
                }
            }
            for (let h of fromEnum(this.x)) {
                if (h._visibility == 0) {
                    let i = new LinearGraphRangeVisualData();
                    let j = new PathVisualData(1, "range", h);
                    i.rangePath = j;
                    a.ranges.add(i);
                }
            }
        }
        bj(a) {
            a._visibility = 0;
        }
        bk(a) {
            a._visibility = 1;
        }
        bl(a) {
            this.aa.remove(a);
        }
        cq() {
            let a = new Path();
            this.aa.add(a);
            return a;
        }
        bt(a) {
            a._visibility = 0;
        }
        bu(a) {
            a._visibility = 1;
        }
        bv(a) {
            this.ab.remove(a);
        }
        b1() {
            let a = new TextBlock();
            this.ab.add(a);
            return a;
        }
        bc(a) {
            a._visibility = 0;
        }
        bd(a) {
            a._visibility = 1;
        }
        be(a) {
            this.z.remove(a);
        }
        cp() {
            let a = new Path();
            this.z.add(a);
            return a;
        }
        a1(a) {
            a._visibility = 0;
        }
        a2(a) {
            a._visibility = 1;
        }
        a3(a) {
            this.y.remove(a);
        }
        b0() {
            let a = new TextBlock();
            this.y.add(a);
            return a;
        }
        l() {
            if (this.k == null) {
                return null;
            }
            return ((() => {
                let $ret = new ToolTipInfo();
                $ret.b = this.am;
                $ret.d = this.cd;
                $ret.c = this.aq;
                $ret.a = this.k;
                return $ret;
            })());
        }
        bf() {
            this.ap = this.m.bm;
        }
    }
    XamBulletGraphView.$t = /*@__PURE__*/ markType(XamBulletGraphView, 'XamBulletGraphView');
    XamBulletGraphView.w = /*@__PURE__*/ new Dictionary$2(String_$type, Brush.$, 0);
    XamBulletGraphView.g = null;
    XamBulletGraphView.h = null;
    return XamBulletGraphView;
})();
//# sourceMappingURL=XamBulletGraph_combined.js.map
