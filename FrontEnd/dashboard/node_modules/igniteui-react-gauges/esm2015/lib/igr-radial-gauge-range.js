/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as React from 'react';
import { TypeRegistrar } from "igniteui-react-core";
import { brushToString, stringToBrush, isValidProp, getModifiedProps, toSpinal, initializePropertiesFromCss, NamePatcher } from "igniteui-react-core";
import { XamRadialGaugeRange } from "./XamRadialGaugeRange";
export class IgrRadialGaugeRange extends React.Component {
    constructor(props) {
        super(props);
        this._renderer = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                {
                    this[p] = this.props[p];
                }
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    get rangeInternal() {
        return this.i;
    }
    createImplementation() {
        return new XamRadialGaugeRange();
    }
    _provideRenderer(renderer) {
        this._renderer = renderer;
    }
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    /**
 * Gets or sets the name of the range.
*/
    get name() {
        return this.i.v;
    }
    set name(v) {
        this.i.v = v;
    }
    /**
     * Gets or sets the brush to use to fill the range.
    */
    get brush() {
        return brushToString(this.i.ao);
    }
    set brush(v) {
        this.i.ao = stringToBrush(v);
    }
    /**
     * Gets or sets the outline to use when rendering the range.
    */
    get outline() {
        return brushToString(this.i.ap);
    }
    set outline(v) {
        this.i.ap = stringToBrush(v);
    }
    /**
     * Gets or sets the value at which the range starts along the scale.
    */
    get startValue() {
        return this.i.o;
    }
    set startValue(v) {
        this.i.o = +v;
    }
    /**
     * Gets or sets the value at which the range ends along the scale.
    */
    get endValue() {
        return this.i.j;
    }
    set endValue(v) {
        this.i.j = +v;
    }
    /**
     * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to start rendering the inner sweep of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    get innerStartExtent() {
        return this.i.l;
    }
    set innerStartExtent(v) {
        this.i.l = +v;
    }
    /**
     * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to end rendering the inner sweep of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    get innerEndExtent() {
        return this.i.k;
    }
    set innerEndExtent(v) {
        this.i.k = +v;
    }
    /**
     * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to start rendering the outer sweep of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    get outerStartExtent() {
        return this.i.n;
    }
    set outerStartExtent(v) {
        this.i.n = +v;
    }
    /**
     * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to end rendering the outer sweep of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    get outerEndExtent() {
        return this.i.m;
    }
    set outerEndExtent(v) {
        this.i.m = +v;
    }
    /**
     * Gets or sets the stroke thickness to use when rendering this range's outline.
    */
    get strokeThickness() {
        return this.i.p;
    }
    set strokeThickness(v) {
        this.i.p = +v;
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("RadialGaugeRange");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}
//# sourceMappingURL=igr-radial-gauge-range.js.map
