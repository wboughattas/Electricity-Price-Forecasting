/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { RadialGaugeRangeFrame } from "./RadialGaugeRangeFrame";
import { BrushUtil } from "igniteui-react-core";
import { InterpolationUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialGaugeScaleFrame = /*@__PURE__*/ (() => {
    class RadialGaugeScaleFrame extends Base {
        constructor() {
            super();
            this.j = null;
            this.i = null;
            this.c = null;
            this.e = null;
            this.f = null;
            this.d = null;
            this.g = null;
            this.h = null;
            this.t = 0;
            this.q = 0;
            this.l = 0;
            this.v = 0;
            this.u = 0;
            this.n = 0;
            this.m = 0;
            this.s = 0;
            this.p = 0;
            this.ac = null;
            this.w = 0;
            this.o = 0;
            this.aa = null;
            this.ab = null;
            this.z = null;
            this.r = 0;
            this.k = null;
            this.k = new List$1(RadialGaugeRangeFrame.$, 0);
            this.j = new Array(0);
            this.i = new Array(0);
            this.c = new Array(0);
            this.e = new Array(0);
            this.f = new Array(0);
            this.d = new Array(0);
            this.g = new Array(0);
            this.h = new Array(0);
        }
        a(a, b, c, d) {
            let e = Math.max(c.length, d.length);
            let f = Math.min(c.length, d.length);
            if (b.length != e) {
                b = new Array(e);
            }
            let g = 0;
            if (c.length > 0) {
                g = c[c.length - 1];
            }
            let h = 0;
            if (d.length > 0) {
                h = d[d.length - 1];
            }
            let i = c.length > d.length;
            let j = 0;
            for (j = 0; j < f; j++) {
                b[j] = c[j] + (d[j] - c[j]) * a;
            }
            let k;
            let l;
            for (j = f; j < e; j++) {
                if (i) {
                    k = c[j];
                    l = h;
                }
                else {
                    k = g;
                    l = d[j];
                }
                b[j] = k + (l - k) * a;
            }
            return b;
        }
        b(a, b, c, d) {
            let e = Math.max(c.length, d.length);
            let f = Math.min(c.length, d.length);
            if (b.length != e) {
                b = new Array(e);
            }
            let g = null;
            if (c.length > 0) {
                g = c[c.length - 1];
            }
            let h = null;
            if (d.length > 0) {
                h = d[d.length - 1];
            }
            let i = c.length > d.length;
            let j = 0;
            for (j = 0; j < f; j++) {
                b[j] = d[j];
            }
            let k;
            let l;
            for (j = f; j < e; j++) {
                if (i) {
                    k = c[j];
                    l = h;
                }
                else {
                    k = g;
                    l = d[j];
                }
                if (l != null) {
                    b[j] = l;
                }
                else {
                    b[j] = k;
                }
            }
            return b;
        }
        x(a, b, c) {
            this.ab = BrushUtil.k(b.ab, a, c.ab, 0);
            this.ac = BrushUtil.k(b.ac, a, c.ac, 0);
            this.aa = BrushUtil.k(b.aa, a, c.aa, 0);
            if (b.z == null && c.z == null) {
                this.z = null;
            }
            else {
                this.z = BrushUtil.k(b.z, a, c.z, 0);
            }
            this.t = b.t + (c.t - b.t) * a;
            this.q = b.q + (c.q - b.q) * a;
            this.s = b.s + (c.s - b.s) * a;
            this.p = b.p + (c.p - b.p) * a;
            this.r = b.r + (c.r - b.r) * a;
            this.l = b.l + (c.l - b.l) * a;
            this.v = b.v + (c.v - b.v) * a;
            this.u = b.u + (c.u - b.u) * a;
            this.n = b.n + (c.n - b.n) * a;
            this.m = b.m + (c.m - b.m) * a;
            this.w = b.w + (c.w - b.w) * a;
            this.o = b.o + (c.o - b.o) * a;
            this.j = this.a(a, this.j, b.j, c.j);
            this.i = this.a(a, this.i, b.i, c.i);
            this.c = this.a(a, this.c, b.c, c.c);
            this.f = this.a(a, this.f, b.f, c.f);
            this.d = this.a(a, this.d, b.d, c.d);
            this.g = this.a(a, this.g, b.g, c.g);
            this.h = this.a(a, this.h, b.h, c.h);
            this.e = this.b(a, this.e, b.e, c.e);
            this.y(a, this.k, b.k, c.k);
        }
        y(a, b, c, d) {
            InterpolationUtil.c(RadialGaugeRangeFrame.$, b, a, c, d, () => new RadialGaugeRangeFrame(), RadialGaugeRangeFrame.a);
        }
    }
    RadialGaugeScaleFrame.$t = /*@__PURE__*/ markType(RadialGaugeScaleFrame, 'RadialGaugeScaleFrame');
    return RadialGaugeScaleFrame;
})();
//# sourceMappingURL=RadialGaugeScaleFrame.js.map
