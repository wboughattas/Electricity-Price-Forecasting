/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { ReactRenderer, ReactWrapper } from "igniteui-react-core";
import { TypeRegistrar } from "igniteui-react-core";
import { XamBulletGraph } from './XamBulletGraph';
import { CollectionAdapter, brushToString, stringToBrush, toPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, NamePatcher, isValidProp, getModifiedProps, toSpinal, arrayFindByName } from "igniteui-react-core";
import { IgrDataContext } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { NotifyCollectionChangedAction } from "igniteui-react-core";
import { BulletGraphStylingDefaults } from './BulletGraphStylingDefaults';
import { LinearScaleOrientation_$type } from './LinearScaleOrientation';
import { IgrFormatLinearGraphLabelEventArgs } from './igr-format-linear-graph-label-event-args';
import { IgrAlignLinearGraphLabelEventArgs } from './igr-align-linear-graph-label-event-args';
//import { LinearGraphRange } from './LinearGraphRange';
import { XamLinearGraphRange } from './XamLinearGraphRange';
import { IgrLinearGraphRangeCollection } from './igr-linear-graph-range-collection';
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Represents a bullet graph.
*/
export class IgrBulletGraph extends React.Component {
    constructor(props) {
        super(props);
        this.contentRanges = [];
        /**
        * The ranges actually present in the chart. Do not directly modify this array.
        * This array's contents can be modified by causing Angular to reproject the child content.
        * Or adding and removing ranges from the manual ranges collection on the ranges property.
        */
        this.actualRanges = [];
        this._ranges = null;
        this._rangesAdapter = null;
        this._tooltipTemplate = null;
        this._tooltipContent = null;
        this._defaultTooltips = null;
        this._uniqueTooltipId = 0;
        this._initialized = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._formatLabel = null;
        this._formatLabel_wrapped = null;
        this._alignLabel = null;
        this._alignLabel_wrapped = null;
        this._actualMinimumValueChange = null;
        this._actualMinimumValueChange_wrapped = null;
        this._actualMaximumValueChange = null;
        this._actualMaximumValueChange_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._tooltipRef = this._tooltipRef.bind(this);
        this._activeTooltipElements = new Map();
        this._activeTooltips = new Map();
        this._currentTooltips = [];
        this._contentChildrenManager = new ContentChildrenManager((ch) => ch.key || ch.props.name, (ch) => ch.key || ch.props.name, () => this._updateContentChildren());
        let container = null;
        if (document) {
            container = document.createElement("div");
            container.style.display = "block";
            container.style.width = "100%";
            container.style.height = "100%";
        }
        var root;
        root = container;
        this._renderer = new ReactRenderer(root, document, true, BulletGraphStylingDefaults);
        this._container = this._renderer.getWrapper(container);
        this._implementation = this.createImplementation();
        //this._container = this._renderer.createElement("div");
        //this._renderer.rootWrapper.append(this._container);
        //this._container.setStyleProperty("display", "block");
        //this._container.setStyleProperty("width", "100%");
        //this._container.setStyleProperty("height", "100%");
        this._wrapper = this._renderer;
        //var root: any;
        //root = this._container;
        //if (this._container.nativeElement != null) {
        //    root = this._container.nativeElement;
        //}
        var gauge = this.i;
        this._gauge = gauge;
        this._rangesAdapter = new CollectionAdapter(this.contentRanges, this.i.ranges, this.actualRanges, (c) => c.i, (i) => {
            i._provideRenderer(this._wrapper);
            if (this._container && this._container.getNativeElement().parentElement) {
                i._styling(this._container.getNativeElement(), this, this);
            }
        }, (i) => { i._provideRenderer(null); });
        gauge.provideContainer(this._renderer);
        this._renderer.addSizeWatcher(() => {
            this._gauge.containerResized();
        });
        this._initialized = true;
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.containerResized();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.width = value;
            this.containerResized();
        }
    }
    get width() {
        return this._width;
    }
    _updateContentChildren() {
        this.contentRanges.length = 0;
        let contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (let i = 0; i < contentChildrenActual.length; i++) {
            if ((XamLinearGraphRange.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {
                this.contentRanges.push(contentChildrenActual[i]);
            }
        }
        if (this._rangesAdapter !== null) {
            this._rangesAdapter.notifyContentChanged();
        }
    }
    /**
     * A collection or manually added axes for the chart.
    */
    get ranges() {
        if (this._ranges === null) {
            let coll = new IgrLinearGraphRangeCollection();
            let inner = coll._innerColl;
            inner.addListener((sender, e) => {
                switch (e.action) {
                    case NotifyCollectionChangedAction.Add:
                        this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Remove:
                        this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                        break;
                    case NotifyCollectionChangedAction.Replace:
                        this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                        this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Reset:
                        this._rangesAdapter.clearManualItems();
                        break;
                }
            });
            this._ranges = coll;
        }
        return this._ranges;
    }
    _tooltipRef(t) {
        //console.log(t);
        if (t === null) {
            return;
        }
        if (t.currentOwner &&
            t.currentOwner.tooltipTemplate) {
            t.template = t.currentOwner.tooltipTemplate;
        }
        this._activeTooltips.set(t.currentOwner, t);
    }
    render() {
        // if (!this._childrenDiffer(this.props.children)) {
        // 	let div = React.createElement("div", {
        // 		ref: (ref) => {
        // 			this._elRef = ref;
        // 		},
        // 		children: this.props.children
        // 	});
        // 	return div;
        // } else {
        let children = this._contentChildrenManager.getChildren(this.props.children);
        if (this._currentTooltips && this._currentTooltips.length > 0) {
            for (let i = 0; i < this._currentTooltips.length; i++) {
                let t = this._currentTooltips[i];
                if (this._activeTooltipElements.has(t)) {
                    children.push(this._activeTooltipElements.get(t));
                }
                else {
                    if (!TypeRegistrar.isRegistered("IgrTooltipContainer")) {
                        continue;
                    }
                    let Tooltip = TypeRegistrar.get("IgrTooltipContainer");
                    let tEle = React.createElement(Tooltip, {
                        ref: this._tooltipRef,
                        key: this._currentTooltips[i].key,
                        owner: this._currentTooltips[i]
                    });
                    let portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);
                    this._activeTooltipElements.set(t, portal);
                    children.push(portal);
                }
            }
        }
        let div = React.createElement("div", {
            className: "ig-bullet-graph igr-bullet-graph",
            ref: this._getMainRef,
            children: children
        });
        return div;
        //}
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                {
                    this[p] = this.props[p];
                }
            }
        }
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._elRef.appendChild(this._container.getNativeElement());
        this.containerResized();
        this.initializeContent();
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    _getMainRef(div) {
        this._elRef = div;
    }
    destroy() {
        this._wrapper.rootWrapper.unlistenAll();
        this._gauge.destroy();
        this._wrapper.destroy();
    }
    createImplementation() {
        return new XamBulletGraph();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        if (this.actualRanges && this.actualRanges.length > 0) {
            var currRange = this.actualRanges;
            for (var i = 0; i < currRange.length; i++) {
                currRange[i]._styling(this._container.getNativeElement(), this, this);
            }
        }
        this._updateContentChildren();
        this.i.containerResized();
    }
    componentWillUnmount() {
        //this._grid.destroy();
        this.destroy();
    }
    set tooltipTemplate(value) {
        this._tooltipTemplate = value;
        if (value == null) {
            if (this._tooltipContent !== null) {
                this._tooltipContent.destroy();
                this._tooltipContent = null;
            }
        }
        if (this._tooltipContent != null) {
            this._tooltipContent.instance.template = this._tooltipTemplate;
        }
        else {
            this._ensureTooltipCreated();
        }
    }
    get tooltipTemplate() {
        return this._tooltipTemplate;
    }
    createWrapper(ele) {
        let wrapper = new ReactWrapper(ele, this._renderer);
        wrapper.updateToolTip = ele.updateToolTip;
        wrapper.hideToolTip = ele.hideToolTip;
        return wrapper;
    }
    _ensureDefaultTooltip() {
        if (this._defaultTooltips == null) {
            return;
        }
        this._defaultTooltips["ensureDefaultTooltip"](this);
    }
    _onDefaultTooltipsReady(cr) {
        this._ensureDefaultTooltip();
    }
    createTooltip() {
        // if (!TypeRegistrar.isRegistered("IgrTooltipContainer")) {
        // 	return null;
        // }
        // let Tooltip = TypeRegistrar.get("IgrTooltipContainer");
        let wrapper = this._wrapper.createElement("div");
        let ele = wrapper.getNativeElement();
        ele.key = "__tooltip_" + this._uniqueTooltipId;
        this._uniqueTooltipId++;
        this._currentTooltips = this._currentTooltips.slice(0);
        this._currentTooltips.push(ele);
        //let element = React.createElement(Tooltip,  );
        //let portal = ReactDOM.createPortal(element, ele);
        let self = this;
        ele.updateToolTip = function (c, isSubContent) {
            if (c.externalObject) {
                c = c.externalObject;
            }
            else {
                let ext = new IgrDataContext();
                ext._implementation = c;
                c = ext;
            }
            if (!isSubContent) {
                if (ele.parentElement != self._container.getNativeElement()) {
                    if (ele.parentElement != null) {
                        ele.parentElement.removeChild(ele);
                    }
                    self._container.getNativeElement().appendChild(ele);
                }
            }
            else {
                c.isSubContent = true;
            }
            if (self._activeTooltips.has(ele)) {
                let t = self._activeTooltips.get(ele);
                if (t.template === null &&
                    ele.tooltipTemplate !== null) {
                    t.template = ele.tooltipTemplate;
                }
                t.dataContext = c;
            }
            ele.style.display = "block";
            return true;
        };
        ele.hideToolTip = function () {
            ele.style.display = "none";
        };
        ele.style.display = "none";
        this._updateTooltipState();
        return ele;
    }
    _updateTooltipState() {
        if (this._initialized) {
            this.setState({ tooltips: this._currentTooltips });
        }
    }
    _ensureTooltipCreated() {
        if (this.i.toolTip == null) {
            let tooltip = this.createTooltip();
            let ele = tooltip;
            if (tooltip == null) {
                return;
            }
            this._tooltipContent = tooltip;
            //(<any>tooltip.instance).template = this._tooltipTemplate;
            this.i.toolTip = this.createWrapper(tooltip);
            if (this._activeTooltips.has(ele)) {
                let tCont = this._activeTooltips.get(ele);
                tCont.template = ele.tooltipTemplate;
            }
        }
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    /**
 * Gets a value indicating whether the bullet graph is currently animating.
*/
    get animating() {
        return this.i.a2;
    }
    /**
     * Gets the transition progress of the animation when the control is animating.
    */
    get transitionProgress() {
        return this.i.cq;
    }
    set transitionProgress(v) {
        this.i.cq = +v;
    }
    /**
     * Gets or sets the orientation of the scale.
    */
    get orientation() {
        return this.i.ar;
    }
    set orientation(v) {
        this.i.ar = ensureEnum(LinearScaleOrientation_$type, v);
    }
    /**
     * Gets or sets the background brush for the scale.
    */
    get scaleBackgroundBrush() {
        return brushToString(this.i.hj);
    }
    set scaleBackgroundBrush(v) {
        this.i.hj = stringToBrush(v);
    }
    /**
     * Gets or sets the background outline for the scale.
    */
    get scaleBackgroundOutline() {
        return brushToString(this.i.hk);
    }
    set scaleBackgroundOutline(v) {
        this.i.hk = stringToBrush(v);
    }
    /**
     * Gets or sets the background outline thickness for the scale.
    */
    get scaleBackgroundThickness() {
        return this.i.b8;
    }
    set scaleBackgroundThickness(v) {
        this.i.b8 = +v;
    }
    /**
     * Gets or sets a collection of brushes to be used as the palette for bullet graph ranges.
    */
    get rangeBrushes() {
        return fromBrushCollection(this.i.ah);
    }
    set rangeBrushes(v) {
        this.i.ah = toBrushCollection(v);
    }
    /**
     * Gets or sets a collection of brushes to be used as the palette for bullet graph outlines.
    */
    get rangeOutlines() {
        return fromBrushCollection(this.i.ai);
    }
    set rangeOutlines(v) {
        this.i.ai = toBrushCollection(v);
    }
    /**
     * Gets or sets the minimum value of the scale.
    */
    get minimumValue() {
        return this.i.by;
    }
    set minimumValue(v) {
        this.i.by = +v;
    }
    /**
     * Gets the resolved minimum value of the scale.
    */
    get actualMinimumValue() {
        return this.i.bl;
    }
    set actualMinimumValue(v) {
        this.i.bl = +v;
    }
    /**
     * Gets or sets the maximum value of the scale.
    */
    get maximumValue() {
        return this.i.bx;
    }
    set maximumValue(v) {
        this.i.bx = +v;
    }
    /**
     * Gets the resolved maximum value of the scale.
    */
    get actualMaximumValue() {
        return this.i.bk;
    }
    set actualMaximumValue(v) {
        this.i.bk = +v;
    }
    /**
     * Gets or sets the value indicated by the target value bar.
    */
    get targetValue() {
        return this.i.ce;
    }
    set targetValue(v) {
        this.i.ce = +v;
    }
    /**
     * Gets or sets the name used for the target value. The name is displayed in the default target value tooltip.
    */
    get targetValueName() {
        return this.i.d8;
    }
    set targetValueName(v) {
        this.i.d8 = v;
    }
    /**
     * Gets or sets the value at which the bar ends.
    */
    get value() {
        return this.i.cr;
    }
    set value(v) {
        this.i.cr = +v;
    }
    /**
     * Gets or sets the name used for actual value.
    */
    get valueName() {
        return this.i.ep;
    }
    set valueName(v) {
        this.i.ep = v;
    }
    /**
     * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get rangeInnerExtent() {
        return this.i.b6;
    }
    set rangeInnerExtent(v) {
        this.i.b6 = +v;
    }
    /**
     * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get rangeOuterExtent() {
        return this.i.b7;
    }
    set rangeOuterExtent(v) {
        this.i.b7 = +v;
    }
    /**
     * Gets or sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get valueInnerExtent() {
        return this.i.cs;
    }
    set valueInnerExtent(v) {
        this.i.cs = +v;
    }
    /**
     * Gets or sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get valueOuterExtent() {
        return this.i.ct;
    }
    set valueOuterExtent(v) {
        this.i.ct = +v;
    }
    /**
     * Gets or sets the interval to use for the scale.
    */
    get interval() {
        return this.i.bs;
    }
    set interval(v) {
        this.i.bs = +v;
    }
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
    */
    get ticksPostInitial() {
        return this.i.cl;
    }
    set ticksPostInitial(v) {
        this.i.cl = +v;
    }
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
    */
    get ticksPreTerminal() {
        return this.i.cm;
    }
    set ticksPreTerminal(v) {
        this.i.cm = +v;
    }
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
    */
    get labelInterval() {
        return this.i.bu;
    }
    set labelInterval(v) {
        this.i.bu = +v;
    }
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the bullet graph.
    */
    get labelExtent() {
        return this.i.bt;
    }
    set labelExtent(v) {
        this.i.bt = +v;
    }
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
    */
    get labelsPostInitial() {
        return this.i.bv;
    }
    set labelsPostInitial(v) {
        this.i.bv = +v;
    }
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
    */
    get labelsPreTerminal() {
        return this.i.bw;
    }
    set labelsPreTerminal(v) {
        this.i.bw = +v;
    }
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
    */
    get minorTickCount() {
        return this.i.bz;
    }
    set minorTickCount(v) {
        this.i.bz = +v;
    }
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get tickStartExtent() {
        return this.i.cn;
    }
    set tickStartExtent(v) {
        this.i.cn = +v;
    }
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get tickEndExtent() {
        return this.i.cj;
    }
    set tickEndExtent(v) {
        this.i.cj = +v;
    }
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
    */
    get tickStrokeThickness() {
        return this.i.cp;
    }
    set tickStrokeThickness(v) {
        this.i.cp = +v;
    }
    /**
     * Gets or sets the brush to use for the major tickmarks.
    */
    get tickBrush() {
        return brushToString(this.i.hn);
    }
    set tickBrush(v) {
        this.i.hn = stringToBrush(v);
    }
    /**
     * Gets or sets the brush to use for the label font.
    */
    get fontBrush() {
        return brushToString(this.i.hg);
    }
    set fontBrush(v) {
        this.i.hg = stringToBrush(v);
    }
    /**
     * Gets or sets the brush to use for the actual value element.
    */
    get valueBrush() {
        return brushToString(this.i.ho);
    }
    set valueBrush(v) {
        this.i.ho = stringToBrush(v);
    }
    /**
     * Gets or sets the brush to use for the outline of actual value element.
    */
    get valueOutline() {
        return brushToString(this.i.hp);
    }
    set valueOutline(v) {
        this.i.hp = stringToBrush(v);
    }
    /**
     * Gets or sets the stroke thickness to use when rendering single actual value element.
    */
    get valueStrokeThickness() {
        return this.i.cu;
    }
    set valueStrokeThickness(v) {
        this.i.cu = +v;
    }
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get minorTickStartExtent() {
        return this.i.b2;
    }
    set minorTickStartExtent(v) {
        this.i.b2 = +v;
    }
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get minorTickEndExtent() {
        return this.i.b0;
    }
    set minorTickEndExtent(v) {
        this.i.b0 = +v;
    }
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
    */
    get minorTickStrokeThickness() {
        return this.i.b4;
    }
    set minorTickStrokeThickness(v) {
        this.i.b4 = +v;
    }
    /**
     * Gets or sets the brush to use for the minor tickmarks.
    */
    get minorTickBrush() {
        return brushToString(this.i.hi);
    }
    set minorTickBrush(v) {
        this.i.hi = stringToBrush(v);
    }
    /**
     * Gets or sets a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
    */
    get isScaleInverted() {
        return this.i.a4;
    }
    set isScaleInverted(v) {
        this.i.a4 = ensureBool(v);
    }
    /**
     * Gets or sets the brush to use to fill the backing of the bullet graph.
    */
    get backingBrush() {
        return brushToString(this.i.he);
    }
    set backingBrush(v) {
        this.i.he = stringToBrush(v);
    }
    /**
     * Gets or sets the brush to use for the outline of the backing.
    */
    get backingOutline() {
        return brushToString(this.i.hf);
    }
    set backingOutline(v) {
        this.i.hf = stringToBrush(v);
    }
    /**
     * Gets or sets the stroke thickness of the backing outline.
    */
    get backingStrokeThickness() {
        return this.i.bp;
    }
    set backingStrokeThickness(v) {
        this.i.bp = +v;
    }
    /**
     * Gets or sets the inner extent of the bullet graph backing.
    */
    get backingInnerExtent() {
        return this.i.bn;
    }
    set backingInnerExtent(v) {
        this.i.bn = +v;
    }
    /**
     * Gets or sets the outer extent of the bullet graph backing.
    */
    get backingOuterExtent() {
        return this.i.bo;
    }
    set backingOuterExtent(v) {
        this.i.bo = +v;
    }
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get scaleStartExtent() {
        return this.i.cd;
    }
    set scaleStartExtent(v) {
        this.i.cd = +v;
    }
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get scaleEndExtent() {
        return this.i.ca;
    }
    set scaleEndExtent(v) {
        this.i.ca = +v;
    }
    /**
     * Gets or sets the brush to use when rendering the fill of the comparative marker.
    */
    get targetValueBrush() {
        return brushToString(this.i.hl);
    }
    set targetValueBrush(v) {
        this.i.hl = stringToBrush(v);
    }
    /**
     * Get or sets the breadth of the target value element.
    */
    get targetValueBreadth() {
        return this.i.cf;
    }
    set targetValueBreadth(v) {
        this.i.cf = +v;
    }
    /**
     * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get targetValueInnerExtent() {
        return this.i.cg;
    }
    set targetValueInnerExtent(v) {
        this.i.cg = +v;
    }
    /**
     * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
    */
    get targetValueOuterExtent() {
        return this.i.ch;
    }
    set targetValueOuterExtent(v) {
        this.i.ch = +v;
    }
    /**
     * Gets or sets the brush to use when rendering the outline of the target value.
    */
    get targetValueOutline() {
        return brushToString(this.i.hm);
    }
    set targetValueOutline(v) {
        this.i.hm = stringToBrush(v);
    }
    /**
     * Gets or sets the stroke thickness of the outline of the target value bar.
    */
    get targetValueStrokeThickness() {
        return this.i.ci;
    }
    set targetValueStrokeThickness(v) {
        this.i.ci = +v;
    }
    /**
     * Gets or sets the label composite format used when creating label values.
    */
    get labelFormat() {
        return this.i.dd;
    }
    set labelFormat(v) {
        this.i.dd = v;
    }
    /**
     * Gets or sets the format specifiers to use with the LabelFormat string.
    */
    get labelFormatSpecifiers() {
        return this.i.ag;
    }
    set labelFormatSpecifiers(v) {
        this.i.ag = v;
    }
    /**
     * Gets or sets the number of milliseconds over which changes to the bullet graph should be animated.
    */
    get transitionDuration() {
        return this.i.cy;
    }
    set transitionDuration(v) {
        this.i.cy = +v;
    }
    /**
     * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
    */
    get showToolTipTimeout() {
        return this.i.cx;
    }
    set showToolTipTimeout(v) {
        this.i.cx = +v;
    }
    /**
     * Gets or sets a value indicating whether tooltips are enabled.
    */
    get showToolTip() {
        return this.i.a8;
    }
    set showToolTip(v) {
        this.i.a8 = ensureBool(v);
    }
    /**
     * Gets or sets the font.
    */
    get font() {
        return this.i.c7;
    }
    set font(v) {
        this.i.c7 = v;
    }
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio() {
        return this.i.b5;
    }
    set pixelScalingRatio(v) {
        this.i.b5 = +v;
    }
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get actualPixelScalingRatio() {
        return this.i.bm;
    }
    set actualPixelScalingRatio(v) {
        this.i.bm = +v;
    }
    findByName(name) {
        if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {
            return this.ranges.findByName(name);
        }
        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {
            return arrayFindByName(this.labelFormatSpecifiers, name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("BulletGraph");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * Gets the value for the main scale of the bullet graph for a given point within the bounds of the bullet graph.

* @param point  * The point for which to retrieve the associated value.
*/
    getValueForPoint(point) {
        let iv = this.i.br(toPoint(point));
        return (iv);
    }
    /**
     * Returns visuals as a serialized string.
    
    */
    exportSerializedVisualData() {
        let iv = this.i.c6();
        return (iv);
    }
    /**
     * Provide a container for the bullet graph.
    
    * @param container  * The container.
    */
    provideContainer(container) {
        this.i.provideContainer(container);
    }
    /**
     * Notify that the container has resized.
    
    */
    containerResized() {
        this.i.containerResized();
    }
    /**
     * Notify that the bullet graph styling has updated.
    
    */
    styleUpdated() {
        this.i.fr();
    }
    /**
     * Use to force the bullet graph to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the bullet graph needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the bullet graph.
    
    */
    flush() {
        this.i.ez();
    }
    /**
     * Event which is raised when a label of the bullet graph is formatted.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the bullet graph widget.
     * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
     * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
     * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
     * Use ui.label to obtain the string value of the label.
    */
    get formatLabel() {
        return this._formatLabel;
    }
    set formatLabel(ev) {
        if (this._formatLabel_wrapped !== null) {
            this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);
            this._formatLabel_wrapped = null;
            this._formatLabel = null;
        }
        this._formatLabel = ev;
        this._formatLabel_wrapped = (o, e) => {
            let outerArgs = new IgrFormatLinearGraphLabelEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFormatLabel) {
                this.beforeFormatLabel(this, outerArgs);
            }
            if (this._formatLabel) {
                this._formatLabel(this, outerArgs);
            }
        };
        this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);
    }
    /**
     * Event which is raised when a label of the bullet graph is aligned along the scale.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to gauge widget.
     * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
     * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
     * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
     * Use ui.label to obtain the string value of the label.
     * Use ui.width to obtain the width of the label.
     * Use ui.height to obtain the height of the label.
     * Use ui.offsetX to obtain the X offset of the label on the bullet graph scale.
     * Use ui.offsetY to obtain the Y offset of the label on the bullet graph scale.
    */
    get alignLabel() {
        return this._alignLabel;
    }
    set alignLabel(ev) {
        if (this._alignLabel_wrapped !== null) {
            this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);
            this._alignLabel_wrapped = null;
            this._alignLabel = null;
        }
        this._alignLabel = ev;
        this._alignLabel_wrapped = (o, e) => {
            let outerArgs = new IgrAlignLinearGraphLabelEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeAlignLabel) {
                this.beforeAlignLabel(this, outerArgs);
            }
            if (this._alignLabel) {
                this._alignLabel(this, outerArgs);
            }
        };
        this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);
    }
    get actualMinimumValueChange() {
        return this._actualMinimumValueChange;
    }
    set actualMinimumValueChange(ev) {
        if (this._actualMinimumValueChange_wrapped !== null) {
            this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
            this._actualMinimumValueChange_wrapped = null;
            this._actualMinimumValueChange = null;
        }
        this._actualMinimumValueChange = ev;
        this._actualMinimumValueChange_wrapped = (o, e) => {
            let ext = this.actualMinimumValue;
            if (this.beforeActualMinimumValueChange) {
                this.beforeActualMinimumValueChange(this, ext);
            }
            if (this._actualMinimumValueChange) {
                this._actualMinimumValueChange(this, ext);
            }
        };
        this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
    }
    get actualMaximumValueChange() {
        return this._actualMaximumValueChange;
    }
    set actualMaximumValueChange(ev) {
        if (this._actualMaximumValueChange_wrapped !== null) {
            this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
            this._actualMaximumValueChange_wrapped = null;
            this._actualMaximumValueChange = null;
        }
        this._actualMaximumValueChange = ev;
        this._actualMaximumValueChange_wrapped = (o, e) => {
            let ext = this.actualMaximumValue;
            if (this.beforeActualMaximumValueChange) {
                this.beforeActualMaximumValueChange(this, ext);
            }
            if (this._actualMaximumValueChange) {
                this._actualMaximumValueChange(this, ext);
            }
        };
        this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
    }
}
//# sourceMappingURL=igr-bullet-graph.js.map
