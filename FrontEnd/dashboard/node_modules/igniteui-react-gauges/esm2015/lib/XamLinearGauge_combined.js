/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Base, PropertyChangedEventArgs, runOn, delegateCombine, enumGetBox, Number_$type, String_$type, Array_$type, Point_$type, delegateRemove, fromEn, markType, markDep, typeCast, fromEnum, TypeRegistrar } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { LinearGaugeFrame } from "./LinearGaugeFrame";
import { LinearGraphScaler } from "./LinearGraphScaler";
import { LinearScaleOrientation_$type } from "./LinearScaleOrientation";
import { DependencyProperty } from "igniteui-react-core";
import { LinearGraphRangeCollection } from "./LinearGraphRangeCollection";
import { BrushCollection } from "igniteui-react-core";
import { LinearGraphNeedleShape_$type } from "./LinearGraphNeedleShape";
import { Brush } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { StackPool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { FormatLinearGraphLabelEventArgs } from "./FormatLinearGraphLabelEventArgs";
import { AlignLinearGraphLabelEventArgs } from "./AlignLinearGraphLabelEventArgs";
import { DoubleValueChangedEventArgs } from "igniteui-react-core";
import { PolygonUtil } from "igniteui-react-core";
import { LinearGaugeVisualData } from "./LinearGaugeVisualData";
import { ToolTipInfo } from "./ToolTipInfo";
import { RectData } from "igniteui-react-core";
import { LinearGraphScaleLabelVisualDataList } from "./LinearGraphScaleLabelVisualDataList";
import { LinearGraphScaleTickmarkVisualDataList } from "./LinearGraphScaleTickmarkVisualDataList";
import { LinearGraphRangeVisualDataList } from "./LinearGraphRangeVisualDataList";
import { LinearNeedleVisualData } from "./LinearNeedleVisualData";
import { LinearGraphRangeVisualData } from "./LinearGraphRangeVisualData";
import { LinearGraphToolTipVisualData } from "./LinearGraphToolTipVisualData";
import { LinearGraphTooltipDataContext } from "./LinearGraphTooltipDataContext";
import { AppearanceHelper } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { PathVisualData } from "igniteui-react-core";
import { GetPointsSettings } from "igniteui-react-core";
import { LinearGraphRectFrame } from "./LinearGraphRectFrame";
import { Size } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { LinearGraphNeedleParameters } from "./LinearGraphNeedleParameters";
import { LinearGraphNeedleFrame } from "./LinearGraphNeedleFrame";
import { LinearGraphNeedlePreparer } from "./LinearGraphNeedlePreparer";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, intDivide, truncate } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { CanvasGestureDOMEventProxy } from "igniteui-react-core";
import { LinearGraphScaleLabelVisualData } from "./LinearGraphScaleLabelVisualData";
import { LinearGraphScaleTickmarkVisualData } from "./LinearGraphScaleTickmarkVisualData";
import { SizeData } from "igniteui-react-core";
import { arrayCopy1 } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let XamLinearGauge = /*@__PURE__*/ (() => {
    class XamLinearGauge extends Control {
        constructor() {
            super();
            this.propertyChanged = null;
            this.av = null;
            this.bq = 0;
            this.formatLabel = null;
            this.alignLabel = null;
            this.valueChanged = null;
            this.ao = null;
            this.an = null;
            this.am = null;
            this.ar = null;
            this.bn = 0;
            this.bm = 100;
            this.a3 = false;
            this.aj = null;
            this.be = false;
            this.a1 = null;
            this.az = null;
            this.ay = null;
            this.a2 = null;
            this.a0 = null;
            this.bk = null;
            this.h4 = null;
            this._view = null;
            this.h6 = null;
            this.h5 = null;
            this.h3 = null;
            this.bg = new List$1(TextBlock.$, 0);
            this.bj = new List$1(TextBlock.$, 0);
            this.bi = new List$1(Path.$, 0);
            this.bh = new List$1(Path.$, 0);
            this.a5 = false;
            this.bp = NaN;
            this.bo = 1;
            this.bp = NaN;
            this.bo = 1;
            this.view = new XamLinearGaugeView(this);
            this.view.bc();
            this.h6 = Rect.empty;
            this.h5 = Rect.empty;
            this.h3 = Rect.empty;
            this.ao = new LinearGaugeFrame();
            this.an = new LinearGaugeFrame();
            this.am = new LinearGaugeFrame();
            this.ranges = new LinearGraphRangeCollection();
            this.a5 = true;
            this.av = new DoubleAnimator(0, 1, this.c4);
            let a = this.av;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.e3));
            this.ab = XamLinearGauge.$;
            this.a0 = ((() => {
                let $ret = new StackPool$1(Path.$);
                $ret.b = runOn(this.view, this.view.bm);
                $ret.c = runOn(this.view, this.view.bn);
                $ret.d = runOn(this.view, this.view.bo);
                $ret.j = runOn(this.view, this.view.co);
                return $ret;
            })());
            this.a1 = ((() => {
                let $ret = new StackPool$1(Path.$);
                $ret.b = runOn(this.view, this.view.bf);
                $ret.c = runOn(this.view, this.view.bg);
                $ret.d = runOn(this.view, this.view.bh);
                $ret.j = runOn(this.view, this.view.cn);
                return $ret;
            })());
            this.az = ((() => {
                let $ret = new StackPool$1(Path.$);
                $ret.b = runOn(this.view, this.view.bf);
                $ret.c = runOn(this.view, this.view.bg);
                $ret.d = runOn(this.view, this.view.bh);
                $ret.j = runOn(this.view, this.view.cn);
                return $ret;
            })());
            this.ay = ((() => {
                let $ret = new StackPool$1(TextBlock.$);
                $ret.b = runOn(this.view, this.view.a4);
                $ret.c = runOn(this.view, this.view.a5);
                $ret.d = runOn(this.view, this.view.a6);
                $ret.j = runOn(this.view, this.view.b3);
                return $ret;
            })());
            this.a2 = ((() => {
                let $ret = new StackPool$1(TextBlock.$);
                $ret.b = runOn(this.view, this.view.bw);
                $ret.c = runOn(this.view, this.view.bx);
                $ret.d = runOn(this.view, this.view.by);
                $ret.j = runOn(this.view, this.view.b4);
                return $ret;
            })());
        }
        fj(a) {
            this.fp(a);
        }
        fp(a) {
            let b = this.propertyChanged;
            if (b != null) {
                b(this, new PropertyChangedEventArgs(a));
            }
        }
        e3(a, b) {
            this.cz = this.av.o;
        }
        get a4() {
            return this.av.f();
        }
        get cz() {
            return this.bq;
        }
        set cz(a) {
            let b = this.bq;
            this.bq = a;
            this.fi("TransitionProgress", b, this.bq);
        }
        f1() {
            this.bq = 0;
            this.av.w();
            this.av.v();
        }
        get bd() {
            return this.c4 > 0;
        }
        onDetachedFromUI() {
            this.view.bb();
        }
        onAttachedToUI() {
            this.view.a7();
        }
        get bs() {
            return this.bn;
        }
        set bs(a) {
            this.bn = a;
        }
        get br() {
            return this.bm;
        }
        set br(a) {
            this.bm = a;
        }
        bx(a) {
            let b = 0;
            let c = a.x;
            if (this.as == 1) {
                b = a.y;
                c = this.h9.height;
            }
            return this.ar.k(c - b);
        }
        bb(a) {
            if (this.bk == null) {
                return false;
            }
            return PolygonUtil.a(this.bk, a);
        }
        needleContainsPoint(a, b) {
            if (this.bk == null) {
                return false;
            }
            return b ? this.h4.containsPoint(a) : PolygonUtil.a(this.bk, a);
        }
        e7(a, b) {
            let c = this.bx(a);
            c = Math.max(Math.min(c, this.br), this.bs);
            if (c != this.c0) {
                this.c0 = c;
            }
        }
        at() {
            let a = new LinearGaugeVisualData();
            a.viewport = new RectData(this.h9.left, this.h9.top, this.h9.width, this.h9.height);
            a.scaleLabels = new LinearGraphScaleLabelVisualDataList();
            a.scaleTickmarks = new LinearGraphScaleTickmarkVisualDataList();
            a.ranges = new LinearGraphRangeVisualDataList();
            a.needle = ((() => {
                let $ret = new LinearNeedleVisualData();
                $ret.value = this.c0;
                return $ret;
            })());
            this.view.az(a);
            let b = this.view.l();
            if (b != null) {
                let c = null;
                switch (b.c) {
                    case "range":
                        c = a.ranges._inner[b.b];
                        break;
                    case "needle":
                        c = a.needle;
                        break;
                }
                a.toolTip = ((() => {
                    let $ret = new LinearGraphToolTipVisualData();
                    $ret.item = c;
                    $ret.itemBrush = AppearanceHelper.b(b.a.brush);
                    $ret.outline = AppearanceHelper.b(b.a.outline);
                    $ret.thickness = b.a.thickness;
                    return $ret;
                })());
            }
            return a;
        }
        dc() {
            let a = this.at();
            a.scaleByViewport();
            return a.serialize();
        }
        e8() {
            this.view.flush();
        }
        destroy() {
            this.provideContainer(null);
        }
        provideContainer(a) {
            this.view.a9(a);
        }
        onMouseOver(a, b, c) {
            if (this.be) {
                this.f0(a, null);
            }
        }
        onMouseLeave() {
            if (this.be) {
                this.f0({ $type: Point_$type, x: -10000, y: -10000 }, null);
            }
        }
        onMouseMove(a, b) {
            if (this.a3) {
                this.e7(a, b);
            }
        }
        onMouseDown(a, b) {
            if (this.a7 && !this.a3 && this.needleContainsPoint(a, b)) {
                this.a3 = true;
            }
        }
        get a6() {
            return this.a3;
        }
        onMouseUp(a) {
            if (this.a3) {
                this.a3 = false;
            }
        }
        containerResized() {
            this.view.ba();
        }
        f2() {
            this.view.bv();
        }
        f0(a, b) {
            let c = this.bk;
            if (c != null && c.count > 0) {
                let d = PolygonUtil.a(c, a);
                if (d == true) {
                    this.view.bu(a, b, -1, "needle");
                    return;
                }
            }
            for (let e = 0; e < this.bh.count; e++) {
                let f = new PathVisualData(1, "range", this.bh._inner[e]);
                let g = f.getPoints(new GetPointsSettings());
                if (g.count > 0) {
                    let h = PolygonUtil.a(this.bl(g._inner[0]), a);
                    if (h == true) {
                        this.view.bu(a, b, e, "range");
                        return;
                    }
                }
            }
            this.view.a2();
        }
        fu() {
            if (!this.a5) {
                return;
            }
            let a = this.an.c;
            if (this.as == 0) {
                let b = 0;
                for (let c = 0; c < a.c.length; c++) {
                    b = Math.max(b, a.c[c]);
                }
                let d = this.h9.height >= b ? this.h9.height - b : this.h9.height;
                this.h8 = new Rect(0, 0, 0, this.h9.width, d);
            }
            else {
                let e = 0;
                for (let f = 0; f < a.f.length; f++) {
                    e = Math.max(e, a.f[f]);
                }
                let g = this.h9.width >= e ? this.h9.width - e : this.h9.width;
                this.h8 = new Rect(0, e, 0, g, this.h9.height);
            }
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        get h9() {
            return this.h6;
        }
        set h9(a) {
            let b = this.h6;
            this.h6 = a;
            if (!b.equals1(this.h6)) {
                this.fk(b, this.h6);
            }
        }
        get h8() {
            return this.h5;
        }
        set h8(a) {
            this.h5 = a;
        }
        get h7() {
            return this.h3;
        }
        set h7(a) {
            this.h3 = a;
        }
        a9() {
            return !isNaN_(this.bs) && !isNaN_(this.br) && !this.h9.isEmpty && this.view.s();
        }
        e4() {
            if (!this.a9()) {
                return;
            }
            let a = this.cr();
            this.ar = new LinearGraphScaler(this.bs, this.br, a, a + this.cp(), this.a8);
            if (this.a5) {
                if (this.a4) {
                    if (this.av.g) {
                        this.av.t();
                    }
                    let b = this.ao;
                    this.ao = this.am;
                    this.am = b;
                }
                else {
                    let c = this.ao;
                    this.ao = this.an;
                    this.an = c;
                }
            }
            else if (this.a4) {
                this.am.d(this.cz, this.ao, this.an);
                this.fv(this.am);
                this.fy(this.am);
                this.fx(this.am);
            }
            if (this.a5) {
                this.fm();
                this.fu();
                this.fn();
                this.fo();
                this.fl();
            }
            if (this.a5 && this.bd) {
                this.f1();
                this.am.d(this.cz, this.ao, this.an);
                this.fv(this.am);
                this.fy(this.am);
                this.fx(this.am);
                this.fz(this.am);
                this.fw(this.am);
            }
            else {
                if (this.a5) {
                    this.fv(this.an);
                    this.fy(this.an);
                    this.fx(this.an);
                    this.fz(this.an);
                    this.fw(this.an);
                }
            }
            this.a5 = false;
            this.view.as();
        }
        fo() {
            let a = this.an;
            let b = a.c;
            let c = this.ar;
            let d = this.b5;
            let e = this.h8;
            b.u = this.cs;
            b.r = this.cn;
            b.s = this.co;
            b.t = this.cq;
            b.m.clear();
            for (let f = 0; f < this.ranges.count; f++) {
                let g = this.ranges._inner[f];
                if (g.j <= this.bs || g.o > this.br) {
                    continue;
                }
                let h = g.o;
                let i = g.j;
                if (h < this.bs) {
                    h = this.bs;
                }
                if (i > this.br) {
                    i = this.br;
                }
                let j = new LinearGraphRectFrame();
                j.i = g.an != null ? g.an : this.hv(f, this.ah);
                j.j = g.ao != null ? g.ao : this.hv(f, this.ai);
                j.h = g.p;
                j.g = c.i(h);
                j.d = c.i(i);
                j.e = g.l;
                j.b = g.k;
                j.f = g.n;
                j.c = g.m;
                if (isNaN_(j.e)) {
                    j.e = this.ck;
                }
                j.b = g.k;
                if (isNaN_(j.b)) {
                    j.b = this.ck;
                }
                j.f = g.n;
                if (isNaN_(j.f)) {
                    j.f = this.cl;
                }
                j.c = g.m;
                if (isNaN_(j.c)) {
                    j.c = this.cl;
                }
                b.m.add(j);
            }
            b.ab = this.hu;
            b.ad = this.h1;
            b.x = this.cy;
            b.w = this.cx;
            b.v = this.cu;
            b.ac = this.hw;
            b.q = this.b8;
            b.p = this.b7;
            b.o = this.b6;
            let k = this.by;
            if (isNaN_(k)) {
                k = (this.br - this.bs) / 10;
            }
            if (k == 0) {
                k = this.br - this.bs;
            }
            let l = new List$1(Number_$type, 0);
            let m = new List$1(Number_$type, 0);
            if (k > 0) {
                let n = this.bs + this.cv;
                let o = this.br - this.cw;
                let p = 100000;
                let q = Math.abs(o - n) / p;
                if (k >= q) {
                    for (let r = n; r <= o || this.bf(r, o, k); r = r + k) {
                        l.add(c.i(r));
                        for (let s = 0; s < d; s++) {
                            let t = (k / (d + 1)) * (s + 1);
                            if (t + r > o) {
                                continue;
                            }
                            m.add(c.i(t + r));
                        }
                    }
                }
            }
            if (b.j.length != l.count || b.i.length != m.count) {
                b.j = new Array(l.count);
                b.i = new Array(m.count);
            }
            for (let u = 0; u < l.count; u++) {
                b.j[u] = l._inner[u];
            }
            for (let v = 0; v < m.count; v++) {
                b.i[v] = m._inner[v];
            }
        }
        ia() {
            let a = this.by;
            let b = this.b0;
            if (isNaN_(a)) {
                a = (this.br - this.bs) / 10;
            }
            if (isNaN_(b)) {
                b = a;
            }
            if (b == 0) {
                b = this.br - this.bs;
            }
            let c = new List$1(Number_$type, 0);
            if (b > 0) {
                let d = this.b1 + this.bs;
                let e = this.br - this.b2;
                let f = 100000;
                let g = Math.abs(e - d) / f;
                if (b >= g) {
                    for (let h = d; h <= e || this.bf(h, e, a); h += b) {
                        c.add(h);
                    }
                }
            }
            let i = new Array(c.count);
            let j = new Array(c.count);
            for (let k = 0; k < c.count; k++) {
                let l = c._inner[k];
                if (this.formatLabel == null && this.aj == null) {
                    l = (Math.round(l * 100) / 100);
                }
                let m = l.toString();
                if (this.aj != null) {
                    m = this.aj.i(l);
                }
                let n = new FormatLinearGraphLabelEventArgs();
                n.value = l;
                n.label = m;
                if (this.formatLabel != null) {
                    this.formatLabel(this, n);
                }
                m = n.label;
                let o = this.view.cp(((() => {
                    let $ret = new TextBlock();
                    $ret.ak = m;
                    return $ret;
                })()));
                i[k] = o.width;
                j[k] = o.height;
            }
            let p = 0;
            let q = 0;
            let r = 1 - this.cn + this.cs;
            if (this.as == 0) {
                for (let s = 0; s < j.length; s++) {
                    q = Math.max(q, j[s]);
                }
                for (let t = 0; t < i.length; t++) {
                    p += i[t];
                }
                if (i.length > 0) {
                    p += i[0] / 2;
                }
                if (i.length > 1) {
                    p += i[i.length - 1] / 2;
                }
                if (i.length > 0) {
                    p += (i.length - 1) * 5;
                }
                if (r > 0) {
                    p = p / Math.abs(1 - r);
                }
            }
            else {
                for (let u = 0; u < i.length; u++) {
                    p = Math.max(p, i[u]);
                }
                for (let v = 0; v < j.length; v++) {
                    q += j[v];
                }
                if (j.length > 0) {
                    q -= j[0] / 2;
                }
                if (j.length > 1) {
                    q -= j[j.length - 1] / 2;
                }
                if (r > 0) {
                    q = q / Math.abs(1 - r);
                }
                if (j.length > 0) {
                    q += (j.length - 1) * 5;
                }
            }
            return new Size(1, p, q);
        }
        fm() {
            let a = this.an;
            let b = a.c;
            let c = this.ar;
            let d = this.by;
            let e = this.b0;
            let f = this.b5;
            if (isNaN_(d)) {
                d = (this.br - this.bs) / 10;
            }
            if (isNaN_(e)) {
                e = d;
            }
            if (e == 0) {
                e = this.br - this.bs;
            }
            let g = new List$1(Tuple$2.$.specialize(Number_$type, Number_$type), 0);
            if (e > 0) {
                let h = this.b1 + this.bs;
                let i = this.br - this.b2;
                let j = 100000;
                let k = Math.abs(i - h) / j;
                if (e >= k) {
                    for (let l = h; l <= i || this.bf(l, i, e); l = l + e) {
                        g.add(new Tuple$2(Number_$type, Number_$type, l, c.i(l)));
                    }
                }
            }
            if (b.d.length != g.count) {
                b.e = new Array(g.count);
                b.d = new Array(g.count);
                b.f = new Array(g.count);
                b.c = new Array(g.count);
                b.g = new Array(g.count);
                b.h = new Array(g.count);
            }
            b.n = this.bz;
            let m = new FormatLinearGraphLabelEventArgs();
            m.actualMinimumValue = this.bs;
            m.actualMaximumValue = this.br;
            let n = new AlignLinearGraphLabelEventArgs();
            n.actualMinimumValue = this.bs;
            n.actualMaximumValue = this.br;
            for (let o = 0; o < g.count; o++) {
                let p = g._inner[o].c;
                if (this.formatLabel == null) {
                    p = (Math.round(p * 100) / 100);
                }
                let q = (p).toString();
                if (this.aj != null) {
                    q = this.aj.i(p);
                }
                m.value = p;
                n.value = p;
                m.label = q;
                if (this.formatLabel != null) {
                    this.formatLabel(this, m);
                }
                q = m.label;
                n.label = q;
                let r = this.view.cp(((() => {
                    let $ret = new TextBlock();
                    $ret.ak = q;
                    return $ret;
                })()));
                n.width = r.width;
                n.height = r.height;
                if (this.as == 0) {
                    n.offsetX = -1 * (r.width / 2);
                    n.offsetY = -1 * (r.height);
                }
                else {
                    n.offsetX = -1 * r.width;
                    n.offsetY = -1 * (r.height / 2);
                }
                if (this.alignLabel != null) {
                    this.alignLabel(this, n);
                }
                b.f[o] = n.width;
                b.c[o] = n.height;
                b.g[o] = n.offsetX;
                ;
                b.h[o] = n.offsetY;
                b.d[o] = q;
                b.e[o] = g._inner[o].d;
            }
        }
        bf(a, b, c) {
            let d = c / 10000;
            if (isNaN_(d)) {
                d = 1E-05;
            }
            let e = Math.abs(a - b);
            if (e < d) {
                return true;
            }
            return false;
        }
        fl() {
            let a = this.an;
            let b = a.a;
            b.e = this.hs;
            b.f = this.ht;
            b.c = this.bw;
            b.a = this.bu;
            b.b = this.bv;
        }
        fn() {
            let a = this.c0;
            if (isNaN_(a)) {
                return;
            }
            let b = this.an.c;
            let c = this.ar;
            let d = new LinearGraphNeedleParameters();
            d.c = this.ap;
            d.e = this.a8;
            d.d = this.as;
            d.u = this.cf;
            d.q = this.cb;
            d.v = this.cg;
            d.r = this.cc;
            d.t = this.ce;
            d.p = this.ca;
            d.s = this.cd;
            d.w = this.ch;
            d.o = this.b9 * 0.5 / this.cm();
            let e = new LinearGraphNeedleFrame();
            e.r = this.hx;
            e.s = this.hy;
            e.o = this.ci;
            let f = new LinearGraphNeedlePreparer();
            f.b = d;
            f.c(e);
            e.l = -90;
            let g = c.i(a);
            e.p = g;
            b.af = e;
        }
        hv(a, b) {
            if (b != null && b.count > 0) {
                return b.item(a % b.count);
            }
            else {
                return null;
            }
        }
        fz(a) {
            let b = this.h8;
            let c = a.c;
            let d = this.a1;
            let e = c.j;
            let f = c.w;
            let g = c.v;
            let h = c.ad;
            let i = c.x;
            let j = this.az;
            let k = c.i;
            let l = c.p;
            let m = c.o;
            let n = c.ac;
            let o = c.q;
            d.f = true;
            for (let p = 0; p < this.bi.count; p++) {
                d.n(this.bi._inner[p]);
            }
            this.bi.clear();
            let q = this.cm();
            let r = this.c2();
            for (let s = 0; s < e.length; s++) {
                let t, u, v, w;
                if (this.as == 1) {
                    t = b.left + q * f;
                    u = r - e[s];
                    v = b.left + q * g;
                    w = u;
                }
                else {
                    t = b.left + e[s];
                    u = q * (1 - f);
                    v = t;
                    w = q * (1 - g);
                }
                let x = d.a();
                let y = new PathGeometry();
                let z = new PathFigure();
                z._startPoint = { $type: Point_$type, x: t, y: u };
                z._segments.add(((() => {
                    let $ret = new LineSegment(1);
                    $ret.c = { $type: Point_$type, x: v, y: w };
                    return $ret;
                })()));
                y.c.add(z);
                x.ak = y;
                x._stroke = h;
                x.ac = i;
                this.bi.add(x);
            }
            for (let aa = 0; aa < k.length; aa++) {
                let ab, ac, ad, ae;
                if (this.as == 1) {
                    ab = b.left + q * l;
                    ac = r - k[aa];
                    ad = b.left + q * m;
                    ae = ac;
                }
                else {
                    ab = k[aa];
                    ac = q * (1 - l);
                    ad = ab;
                    ae = q * (1 - m);
                }
                let af = d.a();
                let ag = new PathGeometry();
                let ah = new PathFigure();
                ah._startPoint = { $type: Point_$type, x: ab, y: ac };
                ah._segments.add(((() => {
                    let $ret = new LineSegment(1);
                    $ret.c = { $type: Point_$type, x: ad, y: ae };
                    return $ret;
                })()));
                ag.c.add(ah);
                af.ak = ag;
                af._stroke = n;
                af.ac = o;
                this.bi.add(af);
            }
            d.f = false;
        }
        fw(a) {
            let b = this.h8;
            let c = a.c;
            let d = c.e;
            let e = c.d;
            let f = c.g;
            let g = c.h;
            let h = c.f;
            let i = c.c;
            let j = c.n;
            let k = this.ay;
            k.f = true;
            for (let l = 0; l < this.bg.count; l++) {
                k.n(this.bg._inner[l]);
            }
            this.bg.clear();
            let m = c.ab;
            let n = this.c1();
            let o = this.c2();
            for (let p = 0; p < e.length; p++) {
                let q, r;
                if (this.as == 1) {
                    q = b.left + n * j;
                    r = b.top + o - d[p];
                }
                else {
                    q = b.left + d[p];
                    r = b.top + n * (1 - j);
                }
                let s = k.a();
                s.ak = e[p];
                this.view.bt(s, m);
                let t = h[p];
                let u = i[p];
                let v = f[p];
                let w = g[p];
                this.view.bk(s, q + v, r + w);
                this.bg.add(s);
            }
            k.f = false;
        }
        fy(a) {
            let b = a.c;
            let c = this.a0;
            c.f = true;
            for (let d = 0; d < this.bh.count; d++) {
                c.n(this.bh._inner[d]);
            }
            this.bh.clear();
            let e = this.cm();
            let f = this.c2();
            let g = this.h2();
            let h = this.view.cm();
            if (isNaN_(b.s) || isNaN_(b.t) || isNaN_(b.u) || isNaN_(b.r)) {
                h.ak = null;
            }
            else {
                let i = this.cp();
                h.ak = b.ae(g, e, i, this.as);
                h._fill = this.hz;
                h._stroke = this.h0;
                h.ac = this.ct;
            }
            for (let j = 0; j < b.m.count; j++) {
                let k = b.m._inner[j];
                let l = c.a();
                l.ak = k.k(g, e, f, this.as);
                l._fill = k.i;
                l._stroke = k.j;
                l.ac = k.h;
                this.bh.add(l);
            }
            this.view.bs(this.bh);
            c.f = false;
        }
        fv(a) {
            let b = this.h7;
            let c = this.view.ck();
            let d = a.a;
            let e = this.as == 0 ? b.height : b.width;
            let f = this.as == 0 ? b.width : b.height;
            let g = d.g(e, f, this.as);
            c.ak = g;
            c._fill = d.e;
            c._stroke = d.f;
            c.ac = d.c;
        }
        bl(a) {
            let b = new List$1(Point_$type, 0);
            for (let c = 0; c < a.count; c++) {
                b.add({ $type: Point_$type, x: a._inner[c].x, y: a._inner[c].y });
            }
            return b;
        }
        fx(a) {
            this.bk = null;
            let b = this.view.cl();
            let c = this.c0;
            if (isNaN_(c) || c < this.bs || c > this.br) {
                b.ak = null;
                return;
            }
            let d = a.c;
            let e = d.af;
            let f = this.cm();
            let g = this.c2();
            let h = f;
            let i = e.p;
            let j = 0;
            if (this.as == 1) {
                i = this.h8.left;
                j = g - e.p;
            }
            b.ak = e.t(h, i, j);
            b._fill = e.r;
            b._stroke = e.s;
            b.ac = e.o;
            let k = new PathVisualData(1, "needle", b);
            let l = k.getPoints(new GetPointsSettings());
            if (l.count > 0) {
                this.bk = this.bl(l._inner[0]);
                let m = 1.7976931348623157E+308, n = 1.7976931348623157E+308;
                let o = -1.7976931348623157E+308, p = -1.7976931348623157E+308;
                for (let q = 0; q < this.bk.count; q++) {
                    m = this.bk._inner[q].x < m ? this.bk._inner[q].x : m;
                    n = this.bk._inner[q].y < n ? this.bk._inner[q].y : n;
                    o = this.bk._inner[q].x > o ? this.bk._inner[q].x : o;
                    p = this.bk._inner[q].y > p ? this.bk._inner[q].y : p;
                }
                this.h4 = new Rect(2, { $type: Point_$type, x: m, y: n }, { $type: Point_$type, x: o, y: p });
            }
        }
        fk(a, b) {
            this.a5 = true;
            this.view.br();
        }
        fc(a, b) {
            this.a5 = true;
            this.view.br();
        }
        cm() {
            if (this.as == 0) {
                return this.ba ? this.h9.height : this.h8.height;
            }
            return this.ba ? this.h9.width : this.h8.width;
        }
        cp() {
            if (this.as == 0) {
                return this.h9.width * (this.cn - this.cs);
            }
            return this.h9.height * (this.cn - this.cs);
        }
        c1() {
            if (this.as == 0) {
                return this.h9.height;
            }
            return this.h9.width;
        }
        c2() {
            if (this.as == 0) {
                return this.h9.width;
            }
            return this.h9.height;
        }
        cr() {
            let a = this.cs;
            if (this.as == 0) {
                if (this.a8) {
                    a = 1 - this.cn;
                }
                return this.h9.left + this.h9.width * a;
            }
            if (this.a8) {
                a = 1 - this.cn;
            }
            return this.h9.top + this.h9.height * a;
        }
        h2() {
            let a = this.h8.left;
            if (this.ba) {
                a = 0;
            }
            let b = this.cs;
            if (this.as == 0) {
                if (this.a8) {
                    b = 1 - this.cn;
                }
                return { $type: Point_$type, x: a + this.h8.width * b, y: this.h8.top };
            }
            if (!this.a8) {
                b = 1 - this.cn;
            }
            return { $type: Point_$type, x: a, y: this.h8.top + this.h8.height * b };
        }
        fi(a, b, c) {
            switch (a) {
                case XamLinearGauge.$$p[0]:
                case XamLinearGauge.$$p[3]:
                case XamLinearGauge.$$p[44]:
                case XamLinearGauge.$$p[48]:
                case XamLinearGauge.$$p[52]:
                case XamLinearGauge.$$p[19]:
                case XamLinearGauge.$$p[25]:
                case XamLinearGauge.$$p[35]:
                    this.view.a8(a, b, c);
                    break;
                case XamLinearGauge.$$p[39]:
                    this.view.bd(b, c);
                    break;
                case XamLinearGauge.$$p[42]:
                    this.view.be(b, c);
                    break;
                case "PixelScalingRatio":
                    if (isNaN_(DeviceUtils.a(this.cj))) {
                        this.bt = 1;
                    }
                    else {
                        this.bt = DeviceUtils.a(this.cj);
                    }
                    break;
                case "ActualPixelScalingRatio":
                    this.view.bi();
                    break;
            }
            switch (a) {
                case XamLinearGauge.$$p[11]:
                case XamLinearGauge.$$p[12]:
                    if (this.dk != null) {
                        this.aj = new BindingFormatter();
                        this.aj.j = this.dk;
                        this.aj.d = this.ag;
                    }
                    else {
                        this.aj = null;
                    }
                    this.a5 = true;
                    this.view.br();
                    break;
                case XamLinearGauge.$$p[60]:
                    if (this.valueChanged != null) {
                        this.valueChanged(this, new DoubleValueChangedEventArgs(b, c));
                    }
                    this.a5 = true;
                    this.view.br();
                    break;
                case XamLinearGauge.$$p[59]:
                    this.av.r = this.c4;
                    this.view.br();
                    break;
                case "TransitionProgress":
                    if (this.cz >= 1) {
                        this.av.w();
                        let d = this.an;
                        this.an = this.ao;
                        this.ao = d;
                        this.fm();
                        this.fn();
                        this.fo();
                        this.fl();
                        this.fv(this.an);
                        this.fy(this.an);
                        this.fx(this.an);
                        this.fz(this.an);
                        this.fw(this.an);
                    }
                    this.am.d(this.cz, this.ao, this.an);
                    this.fv(this.am);
                    this.fy(this.am);
                    this.fx(this.am);
                    this.fz(this.am);
                    this.fw(this.am);
                    this.view.as();
                    break;
                case XamLinearGauge.$$p[25]:
                case XamLinearGauge.$$p[30]:
                case XamLinearGauge.$$p[24]:
                case XamLinearGauge.$$p[36]:
                case XamLinearGauge.$$p[27]:
                case XamLinearGauge.$$p[32]:
                case XamLinearGauge.$$p[28]:
                case XamLinearGauge.$$p[33]:
                case XamLinearGauge.$$p[26]:
                case XamLinearGauge.$$p[31]:
                case XamLinearGauge.$$p[29]:
                case XamLinearGauge.$$p[34]:
                case XamLinearGauge.$$p[37]:
                case XamLinearGauge.$$p[35]:
                case XamLinearGauge.$$p[0]:
                case XamLinearGauge.$$p[3]:
                case XamLinearGauge.$$p[4]:
                case XamLinearGauge.$$p[1]:
                case XamLinearGauge.$$p[2]:
                case XamLinearGauge.$$p[44]:
                case XamLinearGauge.$$p[48]:
                case XamLinearGauge.$$p[50]:
                case XamLinearGauge.$$p[46]:
                case XamLinearGauge.$$p[47]:
                case XamLinearGauge.$$p[52]:
                case XamLinearGauge.$$p[19]:
                case XamLinearGauge.$$p[39]:
                case XamLinearGauge.$$p[42]:
                case XamLinearGauge.$$p[40]:
                case XamLinearGauge.$$p[41]:
                case XamLinearGauge.$$p[7]:
                case XamLinearGauge.$$p[13]:
                case XamLinearGauge.$$p[10]:
                case XamLinearGauge.$$p[14]:
                case XamLinearGauge.$$p[15]:
                case XamLinearGauge.$$p[54]:
                case XamLinearGauge.$$p[55]:
                case XamLinearGauge.$$p[56]:
                case XamLinearGauge.$$p[53]:
                case XamLinearGauge.$$p[57]:
                case XamLinearGauge.$$p[22]:
                case XamLinearGauge.$$p[21]:
                case XamLinearGauge.$$p[20]:
                case XamLinearGauge.$$p[23]:
                    this.a5 = true;
                    this.view.br();
                    break;
                case XamLinearGauge.$$p[43]:
                    let e = b;
                    let f = c;
                    if (e != null) {
                        let g = e;
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.fs));
                    }
                    if (f != null) {
                        let h = f;
                        h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.fs));
                    }
                    this.a5 = true;
                    this.view.br();
                    break;
                case XamLinearGauge.$$p[38]:
                case XamLinearGauge.$$p[9]:
                case XamLinearGauge.$$p[18]:
                case XamLinearGauge.$$p[16]:
                case XamLinearGauge.$$p[45]:
                case XamLinearGauge.$$p[49]:
                    this.bs = Math.min(this.b4, this.b3);
                    this.br = Math.max(this.b4, this.b3);
                    let i = this.cr();
                    this.ar = new LinearGraphScaler(this.bs, this.br, i, i + this.cp(), this.a8);
                    this.a5 = true;
                    this.view.br();
                    break;
                case XamLinearGauge.$$p[5]:
                case XamLinearGauge.$$p[6]:
                    this.view.b1();
                    this.a5 = true;
                    this.view.br();
                    break;
            }
            this.fj(a);
        }
        fs(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    c.propertyChanged = delegateRemove(c.propertyChanged, runOn(this, this.fr));
                }
            }
            if (b.newItems != null) {
                for (let d of fromEn(b.newItems)) {
                    d.propertyChanged = delegateCombine(d.propertyChanged, runOn(this, this.fr));
                }
            }
            this.a5 = true;
            this.view.br();
        }
        fr(a, b) {
            this.a5 = true;
            this.view.br();
        }
        e9(a, b) {
            this.a5 = true;
            this.view.br();
        }
        refresh() {
            this.a5 = true;
            this.view.br();
        }
        ax() {
            return FontUtil.toFontInfo(this.view.ah, this.dd);
        }
        get cj() {
            return this.bp;
        }
        set cj(a) {
            let b = this.bp;
            this.bp = a;
            this.fi("PixelScalingRatio", b, this.bp);
        }
        get bt() {
            return this.bo;
        }
        set bt(a) {
            let b = this.bo;
            this.bo = a;
            this.fi("ActualPixelScalingRatio", b, this.bo);
        }
    }
    XamLinearGauge.$t = /*@__PURE__*/ markType(XamLinearGauge, 'XamLinearGauge', Control.$, [INotifyPropertyChanged_$type]);
    XamLinearGauge.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, XamLinearGauge, 'fi', ['BackingBrush:hs:f3', [Brush.$, null], 'BackingInnerExtent:bu:f4', [1, 0], 'BackingOuterExtent:bv:f5', [1, 1], 'BackingOutline:ht:f6', [Brush.$, null], 'BackingStrokeThickness:bw:f7', [1, 2], 'FontBrush:hu:f8', [Brush.$, null], 'Font:dd:f9', [2, null], 'Interval:by:ga', [1, NaN], 'IsNeedleDraggingEnabled:a7:gb', [0, false], 'IsScaleInverted:a8:gc', [0, false], 'LabelExtent:bz:gd', [1, 0], 'LabelFormat:dk:ge', [2, null], 'LabelFormatSpecifiers:ag:gf', [Array_$type, null], 'LabelInterval:b0:gg', [1, NaN], 'LabelsPostInitial:b1:gh', [1, 0], 'LabelsPreTerminal:b2:gi', [1, 0], 'MaximumValue:b3:gj', [1, 100], 'MergeViewPorts:ba:gk', [0, false], 'MinimumValue:b4:gl', [1, 0], 'MinorTickBrush:hw:gm', [Brush.$, null], 'MinorTickCount:b5:gn', [1, 4], 'MinorTickEndExtent:b6:go', [1, 0.35], 'MinorTickStartExtent:b7:gp', [1, 0.05], 'MinorTickStrokeThickness:b8:gq', [1, 1], 'NeedleBreadth:b9:gr', [1, 6], 'NeedleBrush:hx:gs', [Brush.$, null], 'NeedleInnerBaseWidth:ca:gt', [1, NaN], 'NeedleInnerExtent:cb:gu', [1, NaN], 'NeedleInnerPointExtent:cc:gv', [1, NaN], 'NeedleInnerPointWidth:cd:gw', [1, NaN], 'NeedleName:d5:gx', [2, null], 'NeedleOuterBaseWidth:ce:gy', [1, NaN], 'NeedleOuterExtent:cf:gz', [1, NaN], 'NeedleOuterPointExtent:cg:g0', [1, NaN], 'NeedleOuterPointWidth:ch:g1', [1, NaN], 'NeedleOutline:hy:g2', [Brush.$, null], 'NeedleShape:ap:g3', [LinearGraphNeedleShape_$type, /*@__PURE__*/ enumGetBox(LinearGraphNeedleShape_$type, 3)], 'NeedleStrokeThickness:ci:g4', [1, 1], 'Orientation:as:g5', [LinearScaleOrientation_$type, /*@__PURE__*/ enumGetBox(LinearScaleOrientation_$type, 0)], 'RangeBrushes:ah:g6', [BrushCollection.$, null], 'RangeInnerExtent:ck:g7', [1, 0.05], 'RangeOuterExtent:cl:g8', [1, 0.65], 'RangeOutlines:ai:g9', [BrushCollection.$, null], 'Ranges::ha', [LinearGraphRangeCollection.$, null], 'ScaleBrush:hz:hb', [Brush.$, null], 'ScaleEndExtent:cn:hc', [1, 0.95], 'ScaleInnerExtent:co:hd', [1, 0.05], 'ScaleOuterExtent:cq:he', [1, 0.65], 'ScaleOutline:h0:hf', [Brush.$, null], 'ScaleStartExtent:cs:hg', [1, 0.05], 'ScaleStrokeThickness:ct:hh', [1, 1], 'ShowToolTipTimeout:c3:hi', [1, 500], 'TickBrush:h1:hj', [Brush.$, null], 'TickEndExtent:cu:hk', [1, 0.65], 'TicksPostInitial:cv:hl', [1, 0], 'TicksPreTerminal:cw:hm', [1, 0], 'TickStartExtent:cx:hn', [1, 0.05], 'TickStrokeThickness:cy:ho', [1, 2], 'ToolTip::hp', [4, null], 'TransitionDuration:c4:hq', [1, 0], 'Value:c0:hr', [1, NaN]]);
    return XamLinearGauge;
})();
/**
 * @hidden
 */
export let XamLinearGaugeView = /*@__PURE__*/ (() => {
    class XamLinearGaugeView extends Base {
        constructor(a) {
            super();
            this.ap = 0;
            this.ao = 0;
            this.m = null;
            this.i = null;
            this.aj = null;
            this.p = null;
            this.ah = null;
            this.aa = null;
            this.z = null;
            this.y = null;
            this.ab = null;
            this.ci = null;
            this.cj = null;
            this.ch = null;
            this.ca = null;
            this.cb = null;
            this.b7 = null;
            this.b8 = null;
            this.cc = null;
            this.cd = null;
            this.ce = null;
            this.b9 = null;
            this.c = null;
            this.d = null;
            this.e = null;
            this.f = null;
            this.q = false;
            this.v = null;
            this.a = ["needle", "backing", "scale", "tick", "minortick", "label"];
            this.u = false;
            this.t = false;
            this.ai = null;
            this.k = null;
            this.ak = 0;
            this.am = 0;
            this.aq = null;
            this.an = -1;
            this.cf = null;
            this.al = 0;
            this.x = null;
            this.b6 = ((() => {
                let $ret = new Brush();
                $ret.fill = "black";
                return $ret;
            })());
            this.r = false;
            this.n = null;
            this.b5 = null;
            this.ac = 0;
            this.ad = 1;
            this.m = a;
            this.v = new Dictionary$2(String_$type, Dictionary$2.$.specialize(String_$type, Brush.$), 0);
            this.ci = new Path();
            this.cj = new Path();
            this.ch = new Path();
            this.aa = new List$1(Path.$, 0);
            this.z = new List$1(Path.$, 0);
            this.y = new List$1(TextBlock.$, 0);
            this.ab = new List$1(TextBlock.$, 0);
        }
        a3() {
            let a = this.m.cj;
            let b = this.m.bt;
            if (!isNaN_(a) && a != 0) {
                return;
            }
            if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
                this.m.bt = window.devicePixelRatio;
            }
        }
        bc() {
            this.k = new LinearGraphTooltipDataContext();
            this.al = this.m.c3;
            this.a3();
        }
        s() {
            return true;
        }
        cl() {
            return this.ci;
        }
        cm() {
            return this.cj;
        }
        ck() {
            return this.ch;
        }
        a1() {
            this.q = true;
            let a = ["#778899", "#EBEDEF", "#e0e0e0", "#617583", "rgba(100,107,114,.74)", "rgba(100,107,114,.74)"];
            let b = ["#778899", "#B2B9C0", "#e0e0e0", null, null, null];
            let c = ((() => {
                let $ret = new List$1(Array_$type, 0);
                $ret.add(a);
                $ret.add(b);
                return $ret;
            })());
            this.v.clear();
            let d = this.a.length;
            for (let e = 0; e < d; e++) {
                let f = this.a[e];
                let g = "ui-lineargauge-" + f;
                let h = "ui-lineargauge-" + f + "-fill";
                let i = "ui-lineargauge-" + f + "-outline";
                let j;
                if (!((() => { let k = XamLinearGaugeView.w.tryGetValue(h, j); j = k.p1; return k.ret; })())) {
                    j = BrushUtil.j(h, g, "background-color", this.ah, a[e]);
                    XamLinearGaugeView.w.addItem(h, j);
                }
                let k;
                if (!((() => { let l = XamLinearGaugeView.w.tryGetValue(i, k); k = l.p1; return l.ret; })())) {
                    k = BrushUtil.j(i, g, "border-top-color", this.ah, b[e]);
                    XamLinearGaugeView.w.addItem(i, k);
                }
                let l = new Dictionary$2(String_$type, Brush.$, 0);
                l.item("fill", j);
                l.item("outline", k);
                this.v.item(this.a[e], l);
            }
            this.b0();
            if (XamLinearGaugeView.g == null || XamLinearGaugeView.h == null) {
                let m = BrushUtil.f("ui-lineargauge-range-fill-palette-", "ui-lineargauge-range-outline-palette-", "ui-lineargauge-range-palette-", this.ah, XamLinearGaugeView.g, XamLinearGaugeView.h, ["#216E99", "#216E99", "#44acd6", "#44acd6", "#cecece", "#cecece"]);
                XamLinearGaugeView.g = m.p4;
                XamLinearGaugeView.h = m.p5;
            }
            this.c = XamLinearGaugeView.g;
            this.d = XamLinearGaugeView.h;
            if (this.e == null) {
                this.m.ah = this.c;
            }
            if (this.f == null) {
                this.m.ai = this.d;
            }
            this.q = false;
        }
        b0() {
            this.q = true;
            let a = this.a.length;
            for (let b = 0; b < a; b++) {
                let c = this.a[b];
                this.bz(c, this.v.item(c));
            }
            this.q = false;
        }
        bz(a, b) {
            let c = b.item("fill");
            let d = b.item("outline");
            switch (a) {
                case "needle":
                    if (this.ca == null) {
                        this.m.hx = c;
                    }
                    if (this.cb == null) {
                        this.m.hy = d;
                    }
                    break;
                case "scale":
                    if (this.cc == null) {
                        this.m.hz = c;
                    }
                    if (this.cd == null) {
                        this.m.h0 = d;
                    }
                    break;
                case "backing":
                    if (this.b7 == null) {
                        this.m.hs = c;
                    }
                    if (this.b8 == null) {
                        this.m.ht = d;
                    }
                    break;
                case "tick":
                    if (this.ce == null) {
                        this.m.h1 = c;
                    }
                    break;
                case "minortick":
                    if (this.b9 == null) {
                        this.m.hw = c;
                    }
                    break;
                case "label":
                    this.b6 = c;
                    break;
            }
        }
        a8(a, b, c) {
            let d = b;
            let e = c;
            if (!this.q) {
                switch (a) {
                    case XamLinearGauge.$$p[25]:
                        this.ca = e;
                        break;
                    case XamLinearGauge.$$p[35]:
                        this.cb = e;
                        break;
                    case XamLinearGauge.$$p[0]:
                        this.b7 = e;
                        break;
                    case XamLinearGauge.$$p[3]:
                        this.b8 = e;
                        break;
                    case XamLinearGauge.$$p[44]:
                        this.cc = e;
                        break;
                    case XamLinearGauge.$$p[48]:
                        this.cd = e;
                        break;
                    case XamLinearGauge.$$p[52]:
                        this.ce = e;
                        break;
                    case XamLinearGauge.$$p[19]:
                        this.b9 = e;
                        break;
                }
                if (e == null) {
                    this.b0();
                }
            }
        }
        bd(a, b) {
            if (!this.q) {
                this.e = b;
                if (this.e == null) {
                    this.m.ah = this.c;
                }
            }
        }
        be(a, b) {
            if (!this.q) {
                this.f = b;
                if (this.f == null) {
                    this.m.ai = this.d;
                }
            }
        }
        b(a, b) {
            this.ah.startCSSQuery();
            for (let c = 0; c < b.length; c++) {
                b[c] = this.ah.getCssDefaultPropertyValue(a, b[c]);
            }
            this.ah.endCSSQuery();
            return b;
        }
        bv() {
            this.a1();
            this.b1();
            this.br();
        }
        cg(a) {
            let b = CanvasGestureDOMEventProxy.cy(this.ah.rootWrapper);
            return { $type: Point_$type, x: a.x - b.left, y: a.y - b.top };
        }
        bu(a, b, c, d) {
            this.cf = a;
            this.an = c;
            this.aq = d;
            this.bq();
            if (this.ah != null) {
                this.am = this.ah.setTimeout(runOn(this, this.b2), this.al);
            }
            else {
                this.am = window.setTimeout(runOn(this, this.b2), this.al);
            }
            this.t = true;
        }
        a2() {
            if (this.t) {
                if (this.ah != null) {
                    this.ah.clearTimeout(this.am);
                }
                else {
                    window.clearTimeout(this.am);
                }
                this.t = false;
            }
            if (this.u) {
                let a = this.m.toolTip;
                if (this.ah != null) {
                    this.ah.clearTimeout(this.ak);
                }
                else {
                    window.clearTimeout(this.ak);
                }
                a.hide();
                this.u = false;
                this.k = null;
            }
            this.al = this.m.c3;
        }
        bq() {
            if (this.t) {
                if (this.ah != null) {
                    this.ah.clearTimeout(this.am);
                }
                else {
                    window.clearTimeout(this.am);
                }
            }
            if (this.u) {
                let a = this.m.toolTip;
                if (this.ah != null) {
                    this.ah.clearTimeout(this.ak);
                }
                else {
                    window.clearTimeout(this.ak);
                }
                a.hide();
                this.u = false;
                this.al = intDivide(this.m.c3, 2);
            }
        }
        b2() {
            if (this.t) {
                if (this.ah != null) {
                    this.ah.clearTimeout(this.am);
                }
                else {
                    window.clearTimeout(this.am);
                }
                this.t = false;
            }
            let a = this.an;
            let b = this.aq;
            let c = this.cf;
            if (this.ah != null) {
                this.ak = this.ah.setTimeout(runOn(this, this.a2), 10 * this.m.c3);
            }
            else {
                this.ak = window.setTimeout(runOn(this, this.a2), 10 * this.m.c3);
            }
            let d = this.m.ranges._inner[a];
            if (this.ai != this.m.toolTip) {
                if (this.ai != null) {
                    this.ai.remove();
                }
                this.ai = this.m.toolTip;
                this.ai.setStyleProperty("z-index", "10000");
                this.ai.setStyleProperty("position", "absolute");
                this.ah.append(this.ai);
            }
            this.k = this.j(b, a);
            let context_ = this.k;
            let tooltip_ = this.ai;
            let tooltipType_ = b;
            if (tooltip_.updateToolTip) {
                tooltip_.updateToolTip(context_, tooltipType_);
            }
            ;
            let e = this.ai.findByClass(".ui-tooltip-container");
            if (e != null && e.length > 0) {
                e[0].setAttribute("style", null);
            }
            let f = "ui-simple-default-tooltip-content";
            let g = this.ai.findByClass("." + f);
            if (g != null && g.length > 0) {
                let h = ["border-top-color", "border-top-width", "border-top-style", "border-top-left-radius", "background-color", "padding-top", "font-weight"];
                let i = ["border-color", "border-width", "border-style", "border-radius", "background-color", "padding", "font-weight"];
                let j = ((() => {
                    let $ret = new List$1(String_$type, 0);
                    $ret.add(this.k.brush.color.colorString);
                    $ret.add("2px");
                    $ret.add("solid");
                    $ret.add("4px");
                    $ret.add("rgba(230, 230, 230, 0.74)");
                    $ret.add("4px");
                    $ret.add("bold");
                    return $ret;
                })());
                let k = new Dictionary$2(String_$type, String_$type, 0);
                let l = new Array(h.length);
                arrayCopy1(h, 0, l, 0, h.length);
                this.b(f, l);
                for (let m = 0; m < l.length; m++) {
                    this.ai.setStyleProperty(i[m], (l[m] == null) ? j._inner[m] : l[m]);
                }
            }
            this.ai.setStyleProperty("top", (c.y + 15).toString() + "px").setStyleProperty("left", (c.x + 15).toString() + "px");
            this.ai.show();
            this.u = true;
        }
        j(a, b) {
            let c = new LinearGraphTooltipDataContext();
            switch (a) {
                case "range":
                    let d = this.m.ranges._inner[b];
                    c.item = d;
                    c.itemName = d.u;
                    c.label = d.u + ": " + d.o.toString() + "-" + d.j.toString();
                    let e = d.an;
                    let f = d.ao;
                    c.brush = e != null ? e : this.m.hv(b, this.c);
                    c.outline = f != null ? f : this.m.hv(b, this.d);
                    c.thickness = d.p;
                    break;
                case "needle":
                    c.item = this.m.c0;
                    c.itemName = this.m.d5;
                    c.label = this.m.d5 != null ? this.m.d5 + ": " + this.m.c0.toString() : this.m.c0.toString();
                    c.brush = this.m.hx;
                    c.outline = this.m.hy;
                    c.thickness = this.m.ci;
                    break;
            }
            return c;
        }
        a9(a) {
            if (a == null) {
                this.aj = null;
                this.ah = null;
                this.ai = null;
                this.p = null;
                this.at();
                return;
            }
            let b = a;
            this.ah = b;
            this.m.av.u(this.ah);
            this.ah.rootWrapper.addClass("ui-lineargauge-container");
            this.ad = (isNaN_(this.m.cj) ? this.m.bt : this.m.cj);
            let c = this.ad;
            let d = Math.round(b.rootWrapper.width());
            let e = Math.round(b.rootWrapper.height());
            let f = d * c;
            let g = e * c;
            this.ah.rootWrapper.setStyleProperty("position", "relative");
            let h = this.ah.createElement("canvas");
            h.setStyleProperty("position", "absolute");
            this.ah.append(h);
            this.ap = f;
            this.ao = g;
            h.setAttribute("width", f.toString());
            h.setAttribute("height", g.toString());
            h.setStyleProperty("width", d.toString() + "px");
            h.setStyleProperty("height", e.toString() + "px");
            this.m.h9 = new Rect(0, 0, 0, d, e);
            this.m.h7 = new Rect(0, 0, 0, d, e);
            this.aj = h;
            let i = this.ah.get2DCanvasContext(this.aj);
            this.p = new RenderingContext(new CanvasViewRenderer(), i);
            this.a1();
            this.b1();
            this.p.ac(this.n);
            this.at();
            if (TypeRegistrar.isRegistered("CanvasGestureDOMEventProxy")) {
                this.i = typeCast(EventProxy.$, TypeRegistrar.create("CanvasGestureDOMEventProxy", this.ah.rootWrapper, this.ah, false));
            }
            if (this.i != null) {
                let j = this.i;
                j.onMouseOver = delegateCombine(j.onMouseOver, runOn(this, this.ay));
                let k = this.i;
                k.onMouseLeave = delegateCombine(k.onMouseLeave, runOn(this, this.ax));
                let l = this.i;
                l.onContactStarted = delegateCombine(l.onContactStarted, runOn(this, this.aw));
                let m = this.i;
                m.onContactMoved = delegateCombine(m.onContactMoved, runOn(this, this.av));
                let n = this.i;
                n.onContactCompleted = delegateCombine(n.onContactCompleted, runOn(this, this.au));
            }
            this.bp();
        }
        au(a, b) {
            if (this.m != null) {
                this.m.onMouseUp(a);
            }
        }
        av(a, b) {
            if (this.m != null) {
                this.m.onMouseMove(a, b);
            }
        }
        aw(a, b) {
            if (this.m != null) {
                this.m.onMouseDown(a, b);
            }
        }
        ay(a, b, c) {
            if (this.m != null) {
                this.m.onMouseOver(a, b, c);
            }
        }
        ax(a) {
            if (this.m != null) {
                this.m.onMouseLeave();
            }
        }
        at() {
            if (this.i != null) {
                let a = this.i;
                a.onMouseOver = delegateRemove(a.onMouseOver, runOn(this, this.ay));
                let b = this.i;
                b.onMouseLeave = delegateRemove(b.onMouseLeave, runOn(this, this.ax));
                let c = this.i;
                c.onContactStarted = delegateRemove(c.onContactStarted, runOn(this, this.aw));
                let d = this.i;
                d.onContactMoved = delegateRemove(d.onContactMoved, runOn(this, this.av));
                let e = this.i;
                e.onContactCompleted = delegateRemove(e.onContactCompleted, runOn(this, this.au));
                this.i.aq();
            }
        }
        ba() {
            this.a3();
            let a = Math.round(this.ah.rootWrapper.width());
            let b = Math.round(this.ah.rootWrapper.height());
            this.m.h9 = new Rect(0, 0, 0, a, b);
            this.m.h7 = new Rect(0, 0, 0, a, b);
            if (this.i != null) {
                this.i.bf = this.m.h9;
            }
        }
        as() {
            this.bp();
        }
        bs(a) {
            this.x = a;
        }
        bp() {
            let a = this.m.h9.width;
            let b = this.m.h9.height;
            let c = a * this.ad;
            let d = b * this.ad;
            if (this.ap != a || this.ao != b) {
                this.aj.setAttribute("width", c.toString());
                this.aj.setAttribute("height", d.toString());
                this.aj.setStyleProperty("width", a.toString() + "px");
                this.aj.setStyleProperty("height", b.toString() + "px");
                this.ap = truncate(Math.round(c));
                this.ao = truncate(Math.round(d));
            }
            if (this.p.d && this.ad != 1) {
                this.p.z();
                this.p.aa(this.ad, this.ad);
            }
            this.p.k(this.m.h9.left, this.m.h9.top, this.m.h9.width, this.m.h9.height);
            this.p.s(this.ch);
            this.p.s(this.cj);
            if (this.x != null) {
                for (let e = 0; e < this.x.count; e++) {
                    this.p.s(this.x._inner[e]);
                }
            }
            for (let f = 0; f < this.y.count; f++) {
                this.p.ac(this.n);
                this.p.w(this.y._inner[f]);
            }
            for (let g = 0; g < this.z.count; g++) {
                this.p.s(this.z._inner[g]);
            }
            this.p.s(this.ci);
            if (this.p.d && this.ad != 1) {
                this.p.y();
            }
        }
        b1() {
            if (this.m.dd != null) {
                this.n = this.m.ax();
            }
            else {
                this.n = FontUtil.getFont(this.ah);
            }
            this.ac = this.ae(this.n);
            if (this.m.hu == null) {
                let a = this.ah.rootWrapper.getStyleProperty("color");
                if (stringIsNullOrEmpty(a) == false) {
                    this.b5 = new Brush();
                    this.b5._fill = a;
                    this.m.hu = this.b5;
                }
            }
            if (this.p != null) {
                this.p.ac(this.n);
            }
        }
        af(a) {
            let b = typeCast(TextBlock.$, a);
            if (b != null && b.ak != null) {
                return this.p.e(b) + 0;
            }
            return 0;
        }
        cp(a) {
            if (isNaN_(this.ac)) {
                this.ac = this.ae(null);
            }
            let b = this.af(a);
            let c = this.ac;
            return new Size(1, b, c);
        }
        bt(a, b) {
            if (b != null) {
                a.am = b;
            }
            else {
                a.am = this.b6;
            }
        }
        bk(a, b, c) {
            a.n = b;
            a.o = c;
        }
        bj(a, b) {
        }
        bl(a, b) {
        }
        ae(a) {
            return FontUtil.getCurrentFontHeight(this.ah, a);
        }
        br() {
            if (!this.r) {
                this.r = true;
                window.setTimeout(runOn(this, this.ar), 0);
            }
        }
        ar() {
            if (this.r) {
                this.r = false;
                this.m.e4();
            }
        }
        flush() {
            if (this.r) {
                this.ar();
            }
        }
        o(a, b) {
            return FontUtil.getFontInfo(this.ah, a, b);
        }
        az(a) {
            a.scalePath = new PathVisualData(1, "Scale", this.cj);
            a.needlePath = new PathVisualData(1, "Needle", this.ci);
            a.backingPath = new PathVisualData(1, "Backing", this.ch);
            let b = this.n;
            for (let c of fromEnum(this.y)) {
                if (c._visibility == 0) {
                    let d = this.o(c, b);
                    let e = new LinearGraphScaleLabelVisualData();
                    e.labelValue = c.ak;
                    e.labelPosition = PointData.b({ $type: Point_$type, x: c.n, y: c.o });
                    e.labelSize = SizeData.b(this.cp(c));
                    e.appearance = AppearanceHelper.c(c, d);
                    a.scaleLabels.add(e);
                }
            }
            for (let f of fromEnum(this.z)) {
                if (f._visibility == 0) {
                    let g = new LinearGraphScaleTickmarkVisualData();
                    g.tickPath = new PathVisualData(1, "tickmarks", f);
                    a.scaleTickmarks.add(g);
                }
            }
            for (let h of fromEnum(this.x)) {
                if (h._visibility == 0) {
                    let i = new LinearGraphRangeVisualData();
                    let j = new PathVisualData(1, "range", h);
                    i.rangePath = j;
                    a.ranges.add(i);
                }
            }
        }
        a7() {
            this.a3();
            if (this.i != null) {
                this.i.ap(this.ah.rootWrapper, "");
            }
        }
        bb() {
            if (this.i != null) {
                this.i.bb(this.ah.rootWrapper, "");
            }
        }
        bm(a) {
            a._visibility = 0;
        }
        bn(a) {
            a._visibility = 1;
        }
        bo(a) {
            this.aa.remove(a);
        }
        co() {
            let a = new Path();
            this.aa.add(a);
            return a;
        }
        bw(a) {
            a._visibility = 0;
        }
        bx(a) {
            a._visibility = 1;
        }
        by(a) {
            this.ab.remove(a);
        }
        b4() {
            let a = new TextBlock();
            this.ab.add(a);
            return a;
        }
        bf(a) {
            a._visibility = 0;
        }
        bg(a) {
            a._visibility = 1;
        }
        bh(a) {
            this.z.remove(a);
        }
        cn() {
            let a = new Path();
            this.z.add(a);
            return a;
        }
        a4(a) {
            a._visibility = 0;
        }
        a5(a) {
            a._visibility = 1;
        }
        a6(a) {
            this.y.remove(a);
        }
        b3() {
            let a = new TextBlock();
            this.y.add(a);
            return a;
        }
        l() {
            if (this.k == null) {
                return null;
            }
            return ((() => {
                let $ret = new ToolTipInfo();
                $ret.b = this.an;
                $ret.d = this.cf;
                $ret.c = this.aq;
                $ret.a = this.k;
                return $ret;
            })());
        }
        bi() {
            this.ad = this.m.bt;
        }
    }
    XamLinearGaugeView.$t = /*@__PURE__*/ markType(XamLinearGaugeView, 'XamLinearGaugeView');
    XamLinearGaugeView.w = /*@__PURE__*/ new Dictionary$2(String_$type, Brush.$, 0);
    XamLinearGaugeView.g = null;
    XamLinearGaugeView.h = null;
    return XamLinearGaugeView;
})();
//# sourceMappingURL=XamLinearGauge_combined.js.map
