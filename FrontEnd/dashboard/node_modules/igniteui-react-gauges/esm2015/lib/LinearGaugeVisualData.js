/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { LinearGraphVisualData } from "./LinearGraphVisualData";
import { StringBuilder } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let LinearGaugeVisualData = /*@__PURE__*/ (() => {
    class LinearGaugeVisualData extends LinearGraphVisualData {
        constructor() {
            super(...arguments);
            this._needlePath = null;
            this._needle = null;
        }
        get needlePath() {
            return this._needlePath;
        }
        set needlePath(a) {
            this._needlePath = a;
        }
        get needle() {
            return this._needle;
        }
        set needle(a) {
            this._needle = a;
        }
        scaleByViewport() {
            super.scaleByViewport();
            if (this.needlePath != null) {
                this.needlePath.scaleByViewport(this.viewport);
            }
        }
        serialize() {
            let a = super.serialize();
            let b = new StringBuilder(0);
            let c = a.length == 0;
            if (this.needlePath != null) {
                if (c) {
                    c = false;
                }
                else {
                    b.l(", ");
                }
                b.l("needlePath: ");
                b.u(this.needlePath.serialize());
            }
            if (this.needle != null) {
                if (c) {
                    c = false;
                }
                else {
                    b.l(", ");
                }
                b.l("needle: ");
                b.u(this.needle.serialize());
            }
            if (c) {
                return a;
            }
            b.l("}");
            return a.substr(0, a.length - 1) + b.toString();
        }
    }
    LinearGaugeVisualData.$t = /*@__PURE__*/ markType(LinearGaugeVisualData, 'LinearGaugeVisualData', LinearGraphVisualData.$);
    return LinearGaugeVisualData;
})();
//# sourceMappingURL=LinearGaugeVisualData.js.map
