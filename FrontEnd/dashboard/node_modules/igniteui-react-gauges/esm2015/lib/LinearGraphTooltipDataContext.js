/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DependencyObject } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Base, PropertyChangedEventArgs, String_$type, typeCast, markType, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let LinearGraphTooltipDataContext = /*@__PURE__*/ (() => {
    class LinearGraphTooltipDataContext extends DependencyObject {
        constructor() {
            super(...arguments);
            this.propertyChanged = null;
        }
        get item() {
            return this.c(LinearGraphTooltipDataContext.itemProperty);
        }
        set item(a) {
            this.h(LinearGraphTooltipDataContext.itemProperty, a);
        }
        get itemName() {
            return this.c(LinearGraphTooltipDataContext.itemNameProperty);
        }
        set itemName(a) {
            this.h(LinearGraphTooltipDataContext.itemNameProperty, a);
        }
        get brush() {
            return this.c(LinearGraphTooltipDataContext.itemBrushProperty);
        }
        set brush(a) {
            this.h(LinearGraphTooltipDataContext.itemBrushProperty, a);
        }
        get label() {
            return this.c(LinearGraphTooltipDataContext.labelProperty);
        }
        set label(a) {
            this.h(LinearGraphTooltipDataContext.labelProperty, a);
        }
        p(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
    }
    LinearGraphTooltipDataContext.$t = /*@__PURE__*/ markType(LinearGraphTooltipDataContext, 'LinearGraphTooltipDataContext', DependencyObject.$, [INotifyPropertyChanged_$type]);
    LinearGraphTooltipDataContext.labelProperty = /*@__PURE__*/ DependencyProperty.i("Label", String_$type, LinearGraphTooltipDataContext.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => (typeCast(LinearGraphTooltipDataContext.$, a)).p("Label", b.oldValue, b.newValue)));
    LinearGraphTooltipDataContext.itemProperty = /*@__PURE__*/ DependencyProperty.i("Item", Base.$, LinearGraphTooltipDataContext.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => (typeCast(LinearGraphTooltipDataContext.$, a)).p("Item", b.oldValue, b.newValue)));
    LinearGraphTooltipDataContext.itemNameProperty = /*@__PURE__*/ DependencyProperty.i("ItemName", Base.$, LinearGraphTooltipDataContext.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => (typeCast(LinearGraphTooltipDataContext.$, a)).p("ItemName", b.oldValue, b.newValue)));
    LinearGraphTooltipDataContext.itemBrushProperty = /*@__PURE__*/ DependencyProperty.i("ItemBrush", Brush.$, LinearGraphTooltipDataContext.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => (typeCast(LinearGraphTooltipDataContext.$, a)).p("ItemBrush", b.oldValue, b.newValue)));
    LinearGraphTooltipDataContext.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, LinearGraphTooltipDataContext, 'p', ['Outline', [Brush.$, null], 'Thickness', [1, 0]]);
    return LinearGraphTooltipDataContext;
})();
//# sourceMappingURL=LinearGraphTooltipDataContext.js.map
