import * as React from 'react';
import { IgPoint } from "igniteui-react-core";
import { XamRadialGauge } from './XamRadialGauge';
import { SweepDirection } from "igniteui-react-core";
import { RadialGaugeNeedleShape } from './RadialGaugeNeedleShape';
import { RadialGaugePivotShape } from './RadialGaugePivotShape';
import { RadialGaugeScaleOversweepShape } from './RadialGaugeScaleOversweepShape';
import { RadialGaugeBackingShape } from './RadialGaugeBackingShape';
import { RadialGaugeDuplicateLabelOmissionStrategy } from './RadialGaugeDuplicateLabelOmissionStrategy';
import { IgrFormatRadialGaugeLabelEventArgs } from './igr-format-radial-gauge-label-event-args';
import { IgrAlignRadialGaugeLabelEventArgs } from './igr-align-radial-gauge-label-event-args';
import { IgrRadialGaugeRange } from './igr-radial-gauge-range';
import { IgrRadialGaugeRangeCollection } from './igr-radial-gauge-range-collection';
import { IgrDoubleValueChangedEventArgs } from "igniteui-react-core";
export declare class IgrRadialGauge extends React.Component<IIgrRadialGaugeProps> {
    private _height;
    private _width;
    height: string;
    width: string;
    private _elRef;
    private _container;
    private _contentChildrenManager;
    private _updateContentChildren;
    contentRanges: IgrRadialGaugeRange[];
    /**
    * The ranges actually present in the chart. Do not directly modify this array.
    * This array's contents can be modified by causing Angular to reproject the child content.
    * Or adding and removing ranges from the manual ranges collection on the ranges property.
    */
    actualRanges: IgrRadialGaugeRange[];
    private _ranges;
    private _rangesAdapter;
    /**
     * A collection or manually added axes for the chart.
    */
    readonly ranges: IgrRadialGaugeRangeCollection;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (div: HTMLDivElement) => void;
        children: any[];
    }, HTMLDivElement>;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    private _renderer;
    private _getMainRef;
    constructor(props: IIgrRadialGaugeProps);
    destroy(): void;
    private _wrapper;
    protected createImplementation(): XamRadialGauge;
    private _gauge;
    initializeContent(): void;
    componentWillUnmount(): void;
    protected initializeProperties(): void;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: XamRadialGauge; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrRadialGauge;
    /**
 * Gets or sets a collection of brushes to be used as the palette for gauge ranges.
*/
    rangeBrushes: string[];
    /**
     * Gets or sets a collection of brushes to be used as the palette for gauge outlines.
    */
    rangeOutlines: string[];
    /**
     * Gets or sets the minimum value of the scale.
    */
    minimumValue: number;
    /**
     * Gets the resolved minimum value of the scale.
    */
    actualMinimumValue: number;
    /**
     * Gets or sets the maximum value of the scale.
    */
    maximumValue: number;
    /**
     * Gets the resolved maximum value of the scale.
    */
    actualMaximumValue: number;
    /**
     * Gets or sets the interval to use for the scale.
    */
    interval: number;
    /**
     * Gets or sets the x position of the center of the gauge with the value ranging from 0 to 1.
    */
    centerX: number;
    /**
     * Gets or sets the y position of the center of the gauge with the value ranging from 0 to 1.
    */
    centerY: number;
    /**
     * Gets or sets the value at which to point the needle of the gauge.
    */
    value: number;
    /**
     * Gets or sets the start angle for the scale in degrees.
    */
    scaleStartAngle: number;
    /**
     * Gets or sets the end angle for the scale in degrees.
    */
    scaleEndAngle: number;
    /**
     * Gets or sets the direction in which the scale sweeps around the center from the start angle to end angle.
    */
    scaleSweepDirection: SweepDirection;
    /**
     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.
    */
    transitionDuration: number;
    /**
     * Gets or sets the easing function used to morph the current series.
    */
    transitionEasingFunction: (time: number) => number;
    /**
     * Gets or sets the brush to use when rendering the fill of the needle.
    */
    needleBrush: string;
    /**
     * Gets or sets the brush to use when rendering the outline of the needle.
    */
    needleOutline: string;
    /**
     * Gets or sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleStartExtent: number;
    /**
     * Gets or sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleEndExtent: number;
    /**
     * Gets or sets the shape to use when rendering the needle from a number of options.
    */
    needleShape: RadialGaugeNeedleShape;
    /**
     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleStartWidthRatio: number;
    /**
     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleEndWidthRatio: number;
    /**
     * Gets or sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleBaseFeatureWidthRatio: number;
    /**
     * Gets or sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleBaseFeatureExtent: number;
    /**
     * Gets or sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needlePointFeatureWidthRatio: number;
    /**
     * Gets or sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needlePointFeatureExtent: number;
    /**
     * Gets or sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needlePivotWidthRatio: number;
    /**
     * Gets or sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
    */
    needlePivotInnerWidthRatio: number;
    /**
     * Gets or sets the shape to use for the needle cap.
    */
    needlePivotShape: RadialGaugePivotShape;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    scaleStartExtent: number;
    /**
     * Gets or sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
    */
    needlePivotBrush: string;
    /**
     * Gets or sets the brush to use for the outlines of the needle cap.
    */
    needlePivotOutline: string;
    /**
     * Gets or sets the stroke thickness of the needle outline.
    */
    needleStrokeThickness: number;
    /**
     * Gets or sets the stroke thickness to use for the outline of the needle cap.
    */
    needlePivotStrokeThickness: number;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    scaleEndExtent: number;
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    labelExtent: number;
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
    */
    labelInterval: number;
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    tickStartExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    tickEndExtent: number;
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
    */
    tickStrokeThickness: number;
    /**
     * Gets or sets the brush to use for the major tickmarks.
    */
    tickBrush: string;
    /**
     * Gets or sets the brush to use for the label font.
    */
    fontBrush: string;
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    minorTickStartExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    minorTickEndExtent: number;
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
    */
    minorTickStrokeThickness: number;
    /**
     * Gets or sets the brush to use for the minor tickmarks.
    */
    minorTickBrush: string;
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
    */
    minorTickCount: number;
    /**
     * Gets or sets the brush to use to fill the background of the scale.
    */
    scaleBrush: string;
    /**
     * Gets or sets the brush to use to fill the backing of the gauge.
    */
    backingBrush: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
    */
    backingOutline: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
    */
    backingStrokeThickness: number;
    /**
     * Gets or sets the outer extent of the gauge backing.
    */
    backingOuterExtent: number;
    /**
     * Gets or sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
    */
    backingOversweep: number;
    /**
     * Gets or sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
    */
    scaleOversweep: number;
    /**
     * Gets or sets the oversweep shape to use for the excess fill area for the scale.
    */
    scaleOversweepShape: RadialGaugeScaleOversweepShape;
    /**
     * Gets or sets the corner rounding radius to use for the fitted scale backings.
    */
    backingCornerRadius: number;
    /**
     * Gets or sets the inner extent of the gauge backing.
    */
    backingInnerExtent: number;
    /**
     * Gets or sets the type of shape to use for the backing of the gauge.
    */
    backingShape: RadialGaugeBackingShape;
    /**
     * Gets or sets the multiplying factor to apply to the normal radius of the gauge.
     * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
     * This introduces a multiplicative factor to that value.
    */
    radiusMultiplier: number;
    /**
     * Gets or sets the strategy to use for omitting labels if the first and last label have the same value.
    */
    duplicateLabelOmissionStrategy: RadialGaugeDuplicateLabelOmissionStrategy;
    /**
     * Gets or sets whether needle dragging is enabled or not.
    */
    isNeedleDraggingEnabled: boolean;
    /**
     * Gets or sets whether the needle is constrained within the minimum and maximum value range during dragging.
    */
    isNeedleDraggingConstrained: boolean;
    /**
     * Gets or sets the font.
    */
    font: string;
    /**
     * Gets or sets the label composite format used when creating label values.
    */
    labelFormat: string;
    /**
     * Gets or sets the format specifiers to use with the LabelFormat string.
    */
    labelFormatSpecifiers: any[];
    /**
     * Gets a value indicating whether the radial gauge is currently animating.
    */
    readonly animating: boolean;
    /**
     * Gets the transition progress of the animation when the control is animating.
    */
    transitionProgress: number;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    pixelScalingRatio: number;
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    actualPixelScalingRatio: number;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
 * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.

* @param value  * The value to scale.
*/
    scaleValue(value: number): number;
    /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
    
    * @param angle  * The angle in radians to unscale to a value.
    */
    unscaleValue(angle: number): number;
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
    
    * @param point  * The point for which to retrieve the associated value.
    */
    getValueForPoint(point: IgPoint): number;
    getPointForValue(value: number, extent: number): IgPoint;
    styleUpdated(): void;
    needleContainsPoint(point: IgPoint, isFinger: boolean): boolean;
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    provideContainer(container: any): void;
    containerResized(): void;
    /**
     * Use to force the radial gauge to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the radial gauge needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the radial gauge.
    
    */
    flush(): void;
    /**
     * Returns visuals as a serialized string.
    
    */
    exportSerializedVisualData(): string;
    private _formatLabel;
    private _formatLabel_wrapped;
    /**
     * Event which is raised when a label of the gauge is formatted.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to gauge widget.
     * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
     * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
     * Use ui.startAngle to obtain the starting angle of gauge scale.
     * Use ui.endAngle to obtain the ending angle of gauge scale.
     * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
     * Use ui.value to obtain the value on the gauge scale associated with the label.
     * Use ui.label to obtain the string value of the label.
    */
    formatLabel: (s: IgrRadialGauge, e: IgrFormatRadialGaugeLabelEventArgs) => void;
    private _alignLabel;
    private _alignLabel_wrapped;
    /**
     * Event which is raised when a label of the gauge is aligned along the scale.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to gauge widget.
     * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
     * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
     * Use ui.startAngle to obtain the starting angle of gauge scale.
     * Use ui.endAngle to obtain the ending angle of gauge scale.
     * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
     * Use ui.value to obtain the value on the gauge scale associated with the label.
     * Use ui.label to obtain the string value of the label.
     * Use ui.width to obtain the width of the label.
     * Use ui.height to obtain the height of the label.
     * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
     * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
    */
    alignLabel: (s: IgrRadialGauge, e: IgrAlignRadialGaugeLabelEventArgs) => void;
    private _valueChanged;
    private _valueChanged_wrapped;
    /**
     * Occurs when the Value property changes.
    */
    valueChanged: (s: IgrRadialGauge, e: IgrDoubleValueChangedEventArgs) => void;
    private _actualMinimumValueChange;
    private _actualMinimumValueChange_wrapped;
    actualMinimumValueChange: (s: IgrRadialGauge, e: number) => void;
    private _actualMaximumValueChange;
    private _actualMaximumValueChange_wrapped;
    actualMaximumValueChange: (s: IgrRadialGauge, e: number) => void;
}
export interface IIgrRadialGaugeProps {
    width?: string;
    height?: string;
    /**
 * Gets or sets a collection of brushes to be used as the palette for gauge ranges.
*/
    rangeBrushes?: string[] | string;
    /**
     * Gets or sets a collection of brushes to be used as the palette for gauge outlines.
    */
    rangeOutlines?: string[] | string;
    /**
     * Gets or sets the minimum value of the scale.
    */
    minimumValue?: number | string;
    /**
     * Gets the resolved minimum value of the scale.
    */
    actualMinimumValue?: number | string;
    /**
     * Gets or sets the maximum value of the scale.
    */
    maximumValue?: number | string;
    /**
     * Gets the resolved maximum value of the scale.
    */
    actualMaximumValue?: number | string;
    /**
     * Gets or sets the interval to use for the scale.
    */
    interval?: number | string;
    /**
     * Gets or sets the x position of the center of the gauge with the value ranging from 0 to 1.
    */
    centerX?: number | string;
    /**
     * Gets or sets the y position of the center of the gauge with the value ranging from 0 to 1.
    */
    centerY?: number | string;
    /**
     * Gets or sets the value at which to point the needle of the gauge.
    */
    value?: number | string;
    /**
     * Gets or sets the start angle for the scale in degrees.
    */
    scaleStartAngle?: number | string;
    /**
     * Gets or sets the end angle for the scale in degrees.
    */
    scaleEndAngle?: number | string;
    /**
     * Gets or sets the direction in which the scale sweeps around the center from the start angle to end angle.
    */
    scaleSweepDirection?: SweepDirection | string;
    /**
     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.
    */
    transitionDuration?: number | string;
    /**
     * Gets or sets the easing function used to morph the current series.
    */
    transitionEasingFunction?: (time: number) => number;
    /**
     * Gets or sets the brush to use when rendering the fill of the needle.
    */
    needleBrush?: string;
    /**
     * Gets or sets the brush to use when rendering the outline of the needle.
    */
    needleOutline?: string;
    /**
     * Gets or sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleStartExtent?: number | string;
    /**
     * Gets or sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleEndExtent?: number | string;
    /**
     * Gets or sets the shape to use when rendering the needle from a number of options.
    */
    needleShape?: RadialGaugeNeedleShape | string;
    /**
     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleStartWidthRatio?: number | string;
    /**
     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleEndWidthRatio?: number | string;
    /**
     * Gets or sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleBaseFeatureWidthRatio?: number | string;
    /**
     * Gets or sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property, namely: NeedleWithBulb, RectangleWithBulb, TrapezoidWithBulb, and TriangleWithBulb.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needleBaseFeatureExtent?: number | string;
    /**
     * Gets or sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needlePointFeatureWidthRatio?: number | string;
    /**
     * Gets or sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needlePointFeatureExtent?: number | string;
    /**
     * Gets or sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    needlePivotWidthRatio?: number | string;
    /**
     * Gets or sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
    */
    needlePivotInnerWidthRatio?: number | string;
    /**
     * Gets or sets the shape to use for the needle cap.
    */
    needlePivotShape?: RadialGaugePivotShape | string;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    scaleStartExtent?: number | string;
    /**
     * Gets or sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
    */
    needlePivotBrush?: string;
    /**
     * Gets or sets the brush to use for the outlines of the needle cap.
    */
    needlePivotOutline?: string;
    /**
     * Gets or sets the stroke thickness of the needle outline.
    */
    needleStrokeThickness?: number | string;
    /**
     * Gets or sets the stroke thickness to use for the outline of the needle cap.
    */
    needlePivotStrokeThickness?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    scaleEndExtent?: number | string;
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    labelExtent?: number | string;
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
    */
    labelInterval?: number | string;
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    tickStartExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    tickEndExtent?: number | string;
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
    */
    tickStrokeThickness?: number | string;
    /**
     * Gets or sets the brush to use for the major tickmarks.
    */
    tickBrush?: string;
    /**
     * Gets or sets the brush to use for the label font.
    */
    fontBrush?: string;
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    minorTickStartExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
    */
    minorTickEndExtent?: number | string;
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
    */
    minorTickStrokeThickness?: number | string;
    /**
     * Gets or sets the brush to use for the minor tickmarks.
    */
    minorTickBrush?: string;
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
    */
    minorTickCount?: number | string;
    /**
     * Gets or sets the brush to use to fill the background of the scale.
    */
    scaleBrush?: string;
    /**
     * Gets or sets the brush to use to fill the backing of the gauge.
    */
    backingBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
    */
    backingOutline?: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
    */
    backingStrokeThickness?: number | string;
    /**
     * Gets or sets the outer extent of the gauge backing.
    */
    backingOuterExtent?: number | string;
    /**
     * Gets or sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
    */
    backingOversweep?: number | string;
    /**
     * Gets or sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
    */
    scaleOversweep?: number | string;
    /**
     * Gets or sets the oversweep shape to use for the excess fill area for the scale.
    */
    scaleOversweepShape?: RadialGaugeScaleOversweepShape | string;
    /**
     * Gets or sets the corner rounding radius to use for the fitted scale backings.
    */
    backingCornerRadius?: number | string;
    /**
     * Gets or sets the inner extent of the gauge backing.
    */
    backingInnerExtent?: number | string;
    /**
     * Gets or sets the type of shape to use for the backing of the gauge.
    */
    backingShape?: RadialGaugeBackingShape | string;
    /**
     * Gets or sets the multiplying factor to apply to the normal radius of the gauge.
     * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
     * This introduces a multiplicative factor to that value.
    */
    radiusMultiplier?: number | string;
    /**
     * Gets or sets the strategy to use for omitting labels if the first and last label have the same value.
    */
    duplicateLabelOmissionStrategy?: RadialGaugeDuplicateLabelOmissionStrategy | string;
    /**
     * Gets or sets whether needle dragging is enabled or not.
    */
    isNeedleDraggingEnabled?: boolean | string;
    /**
     * Gets or sets whether the needle is constrained within the minimum and maximum value range during dragging.
    */
    isNeedleDraggingConstrained?: boolean | string;
    /**
     * Gets or sets the font.
    */
    font?: string;
    /**
     * Gets or sets the label composite format used when creating label values.
    */
    labelFormat?: string;
    /**
     * Gets or sets the format specifiers to use with the LabelFormat string.
    */
    labelFormatSpecifiers?: any[];
    /**
     * Gets the transition progress of the animation when the control is animating.
    */
    transitionProgress?: number | string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    pixelScalingRatio?: number | string;
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    actualPixelScalingRatio?: number | string;
    /**
 * Event which is raised when a label of the gauge is formatted.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to gauge widget.
 * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
 * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
 * Use ui.startAngle to obtain the starting angle of gauge scale.
 * Use ui.endAngle to obtain the ending angle of gauge scale.
 * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
 * Use ui.value to obtain the value on the gauge scale associated with the label.
 * Use ui.label to obtain the string value of the label.
*/
    formatLabel?: (s: IgrRadialGauge, e: IgrFormatRadialGaugeLabelEventArgs) => void;
    /**
     * Event which is raised when a label of the gauge is aligned along the scale.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to gauge widget.
     * Use ui.actualMinimumValue to obtain the minimum value of gauge scale.
     * Use ui.actualMaximumValue to obtain the maximum value of gauge scale.
     * Use ui.startAngle to obtain the starting angle of gauge scale.
     * Use ui.endAngle to obtain the ending angle of gauge scale.
     * Use ui.angle to obtain the angle on the gauge scale at which the label will be located.
     * Use ui.value to obtain the value on the gauge scale associated with the label.
     * Use ui.label to obtain the string value of the label.
     * Use ui.width to obtain the width of the label.
     * Use ui.height to obtain the height of the label.
     * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
     * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
    */
    alignLabel?: (s: IgrRadialGauge, e: IgrAlignRadialGaugeLabelEventArgs) => void;
    /**
     * Occurs when the Value property changes.
    */
    valueChanged?: (s: IgrRadialGauge, e: IgrDoubleValueChangedEventArgs) => void;
}
