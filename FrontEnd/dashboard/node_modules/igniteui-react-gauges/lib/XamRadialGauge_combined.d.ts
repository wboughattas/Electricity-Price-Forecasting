import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged, Base, PropertyChangedEventArgs, Type, Point } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { SweepDirection } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { RadialGaugeNeedleShape } from "./RadialGaugeNeedleShape";
import { RadialGaugePivotShape } from "./RadialGaugePivotShape";
import { RadialGaugeScaleOversweepShape } from "./RadialGaugeScaleOversweepShape";
import { RadialGaugeBackingShape } from "./RadialGaugeBackingShape";
import { RadialGaugeRangeCollection } from "./RadialGaugeRangeCollection";
import { RadialGaugeDuplicateLabelOmissionStrategy } from "./RadialGaugeDuplicateLabelOmissionStrategy";
import { BindingFormatter } from "igniteui-react-core";
import { RadialGaugeScaler } from "./RadialGaugeScaler";
import { Rect } from "igniteui-react-core";
import { RadialGaugeFrame } from "./RadialGaugeFrame";
import { StackPool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { FormatRadialGaugeLabelEventArgs } from "./FormatRadialGaugeLabelEventArgs";
import { AlignRadialGaugeLabelEventArgs } from "./AlignRadialGaugeLabelEventArgs";
import { DoubleValueChangedEventArgs } from "igniteui-react-core";
import { GaugeVisualData } from "./GaugeVisualData";
import { FontInfo } from "igniteui-react-core";
import { DomRenderer } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class XamRadialGauge extends Control implements INotifyPropertyChanged {
    static $t: Type;
    private fz;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected f4(a: string): void;
    constructor();
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    dd(a: number): number;
    dl(a: number): number;
    b5(a: Point): number;
    ik(a: number, b: number): Point;
    private h9;
    private _view;
    protected view: XamRadialGaugeView;
    private fn;
    ay: DoubleAnimator;
    ah: BrushCollection;
    ai: BrushCollection;
    cc: number;
    private bn;
    bs: number;
    ca: number;
    private bm;
    br: number;
    b6: number;
    b3: number;
    b4: number;
    dm: number;
    da: number;
    c5: number;
    ii: SweepDirection;
    dn: number;
    a0: (time: number) => number;
    ib: Brush;
    ic: Brush;
    cv: number;
    cn: number;
    ar: RadialGaugeNeedleShape;
    cw: number;
    static readonly hl: DependencyProperty;
    co: number;
    cm: number;
    cl: number;
    cu: number;
    ct: number;
    cs: number;
    cp: number;
    as: RadialGaugePivotShape;
    db: number;
    id: Brush;
    ie: Brush;
    cx: number;
    static readonly cy: number;
    cq: number;
    static readonly cr: number;
    c6: number;
    b7: number;
    b9: number;
    dg: number;
    de: number;
    static readonly dj: number;
    di: number;
    ih: Brush;
    h8: Brush;
    ch: number;
    cf: number;
    static readonly ck: number;
    cj: number;
    ia: Brush;
    ce: number;
    ig: Brush;
    h6: Brush;
    h7: Brush;
    b1: number;
    static readonly b2: number;
    by: number;
    b0: number;
    c8: number;
    au: RadialGaugeScaleOversweepShape;
    bu: number;
    bw: number;
    am: RadialGaugeBackingShape;
    ranges: RadialGaugeRangeCollection;
    c0: number;
    an: RadialGaugeDuplicateLabelOmissionStrategy;
    a8: boolean;
    ba: boolean;
    a9: boolean;
    d2: string;
    formatLabel: (sender: any, args: FormatRadialGaugeLabelEventArgs) => void;
    d9: string;
    ag: any[];
    aj: BindingFormatter;
    alignLabel: (sender: any, args: AlignRadialGaugeLabelEventArgs) => void;
    valueChanged: (sender: any, e: DoubleValueChangedEventArgs) => void;
    protected a7: boolean;
    protected av: RadialGaugeScaler;
    refresh(): void;
    private fy;
    gd(): void;
    private f7;
    private f6;
    private io;
    private il;
    im: Rect;
    private f0;
    protected bb(): boolean;
    fo(): void;
    private gc;
    private readonly be;
    private f9;
    private bj;
    private bk;
    bc(a: Point): boolean;
    needleContainsPoint(a: Point, b: boolean): boolean;
    private ga;
    private ij;
    private c2;
    private f2;
    protected aq: RadialGaugeFrame;
    protected ap: RadialGaugeFrame;
    protected ao: RadialGaugeFrame;
    private bl;
    private bi;
    private bh;
    private bg;
    private gb;
    private bf;
    private c3;
    private c1;
    private c4;
    private f3;
    private f1;
    readonly a6: boolean;
    private bq;
    dk: number;
    a5: StackPool$1<Path>;
    a3: StackPool$1<Path>;
    a2: StackPool$1<TextBlock>;
    a4: StackPool$1<Path>;
    protected fr(a: Point, b: boolean): void;
    destroy(): void;
    provideContainer(a: any): void;
    onMouseMove(a: Point, b: boolean): void;
    onMouseDown(a: Point, b?: boolean): void;
    onMouseUp(a: Point): void;
    containerResized(): void;
    fs(): void;
    aw(): GaugeVisualData;
    d1(): string;
    a1(): FontInfo;
    private bp;
    cz: number;
    private bo;
    bt: number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class XamRadialGaugeView extends Base {
    static $t: Type;
    constructor(a: XamRadialGauge);
    protected h: XamRadialGauge;
    an(a: TextBlock): void;
    ao(a: TextBlock): void;
    ap(a: TextBlock): void;
    be(): TextBlock;
    ay(a: Path): void;
    az(a: Path): void;
    a0(a: Path): void;
    b0(): Path;
    a3(a: Path): void;
    a4(a: Path): void;
    a5(a: Path): void;
    b1(): Path;
    private s;
    private r;
    private q;
    private br;
    private bt;
    private bq;
    private bs;
    private bu;
    n(): boolean;
    bw(): Path;
    by(): Path;
    w(a: any): number;
    b2(a: TextBlock): Size;
    private o;
    private a;
    private al;
    aq(): void;
    au(): void;
    private c;
    private d;
    private bc;
    private bb;
    b(a: string, b: string[]): string[];
    static y(a: string, b: number): number;
    private l;
    av(): void;
    am(): void;
    private m;
    a7(): void;
    ad(): void;
    flush(): void;
    a2(a: TextBlock, b: number, c: number): void;
    private g;
    private aa;
    private k;
    z: DomRenderer;
    private i;
    private bf;
    as(a: any): void;
    private ag;
    private ah;
    private ai;
    private af;
    a9(a: TextBlock, b: Brush): void;
    ba(): void;
    bd(): void;
    ae(): void;
    private bg;
    private a6;
    private t;
    v(a: FontInfo): number;
    private p;
    a8(a: List$1<Path>): void;
    bv(): Path;
    bz(): Path;
    bx(): Path;
    private ac;
    private ab;
    at(): void;
    private j;
    aj(a: GaugeVisualData): void;
    private bk;
    private bl;
    private bm;
    private bn;
    private bh;
    private bi;
    private bo;
    private bp;
    private bj;
    ar(a: string, b: any, c: any): void;
    private e;
    private f;
    private u;
    aw(a: BrushCollection, b: BrushCollection): void;
    ax(a: BrushCollection, b: BrushCollection): void;
    a1(): void;
}
