import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged, Base, PropertyChangedEventArgs, Type, Point } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { LinearGaugeFrame } from "./LinearGaugeFrame";
import { LinearGraphScaler } from "./LinearGraphScaler";
import { LinearScaleOrientation } from "./LinearScaleOrientation";
import { LinearGraphRangeCollection } from "./LinearGraphRangeCollection";
import { BrushCollection } from "igniteui-react-core";
import { LinearGraphNeedleShape } from "./LinearGraphNeedleShape";
import { Brush } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { StackPool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { FormatLinearGraphLabelEventArgs } from "./FormatLinearGraphLabelEventArgs";
import { AlignLinearGraphLabelEventArgs } from "./AlignLinearGraphLabelEventArgs";
import { DoubleValueChangedEventArgs } from "igniteui-react-core";
import { LinearGaugeVisualData } from "./LinearGaugeVisualData";
import { ToolTipInfo } from "./ToolTipInfo";
import { LinearGraphTooltipDataContext } from "./LinearGraphTooltipDataContext";
import { Size } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { DomRenderer } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class XamLinearGauge extends Control implements INotifyPropertyChanged {
    static $t: Type;
    private fj;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected fp(a: string): void;
    constructor();
    av: DoubleAnimator;
    private e3;
    readonly a4: boolean;
    private bq;
    cz: number;
    private f1;
    private readonly bd;
    formatLabel: (sender: any, args: FormatLinearGraphLabelEventArgs) => void;
    alignLabel: (sender: any, args: AlignLinearGraphLabelEventArgs) => void;
    valueChanged: (sender: any, e: DoubleValueChangedEventArgs) => void;
    protected ao: LinearGaugeFrame;
    protected an: LinearGaugeFrame;
    protected am: LinearGaugeFrame;
    protected ar: LinearGraphScaler;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    as: LinearScaleOrientation;
    ranges: LinearGraphRangeCollection;
    ah: BrushCollection;
    ai: BrushCollection;
    b4: number;
    private bn;
    bs: number;
    b3: number;
    private bm;
    br: number;
    c0: number;
    ap: LinearGraphNeedleShape;
    d5: string;
    ck: number;
    co: number;
    cl: number;
    cq: number;
    cb: number;
    cf: number;
    ca: number;
    ce: number;
    cd: number;
    ch: number;
    cc: number;
    cg: number;
    by: number;
    cv: number;
    cw: number;
    b0: number;
    bz: number;
    b1: number;
    b2: number;
    b5: number;
    cx: number;
    cu: number;
    cy: number;
    h1: Brush;
    hu: Brush;
    b9: number;
    hx: Brush;
    hy: Brush;
    ci: number;
    b7: number;
    b6: number;
    b8: number;
    hw: Brush;
    a8: boolean;
    hs: Brush;
    ht: Brush;
    bw: number;
    bu: number;
    bv: number;
    cs: number;
    cn: number;
    hz: Brush;
    h0: Brush;
    ct: number;
    ba: boolean;
    private a3;
    a7: boolean;
    dk: string;
    ag: any[];
    aj: BindingFormatter;
    c4: number;
    c3: number;
    toolTip: any;
    be: boolean;
    dd: string;
    a1: StackPool$1<Path>;
    az: StackPool$1<Path>;
    ay: StackPool$1<TextBlock>;
    a2: StackPool$1<TextBlock>;
    a0: StackPool$1<Path>;
    bx(a: Point): number;
    private bk;
    private h4;
    bb(a: Point): boolean;
    needleContainsPoint(a: Point, b: boolean): boolean;
    protected e7(a: Point, b: boolean): void;
    at(): LinearGaugeVisualData;
    dc(): string;
    e8(): void;
    destroy(): void;
    provideContainer(a: any): void;
    onMouseOver(a: Point, b: boolean, c: boolean): void;
    onMouseLeave(): void;
    onMouseMove(a: Point, b: boolean): void;
    onMouseDown(a: Point, b: boolean): void;
    readonly a6: boolean;
    onMouseUp(a: Point): void;
    containerResized(): void;
    f2(): void;
    private f0;
    private fu;
    private _view;
    protected view: XamLinearGaugeView;
    private h6;
    h9: Rect;
    private h5;
    h8: Rect;
    private h3;
    h7: Rect;
    protected a9(): boolean;
    e4(): void;
    private bg;
    private bj;
    private bi;
    private bh;
    private fo;
    private ia;
    private fm;
    private bf;
    private fl;
    private fn;
    hv(a: number, b: BrushCollection): Brush;
    private fz;
    private fw;
    private fy;
    private fv;
    private bl;
    private fx;
    private fk;
    private fc;
    private cm;
    private cp;
    private c1;
    private c2;
    private cr;
    private h2;
    private fi;
    private fs;
    private fr;
    private e9;
    protected a5: boolean;
    refresh(): void;
    ax(): FontInfo;
    private bp;
    cj: number;
    private bo;
    bt: number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class XamLinearGaugeView extends Base {
    static $t: Type;
    private ap;
    private ao;
    constructor(a: XamLinearGauge);
    a3(): void;
    protected m: XamLinearGauge;
    protected i: EventProxy;
    private aj;
    private p;
    ah: DomRenderer;
    private aa;
    private z;
    private y;
    private ab;
    bc(): void;
    private ci;
    private cj;
    private ch;
    s(): boolean;
    cl(): Path;
    cm(): Path;
    ck(): Path;
    private ca;
    private cb;
    private b7;
    private b8;
    private cc;
    private cd;
    private ce;
    private b9;
    private c;
    private d;
    private e;
    private f;
    private q;
    private v;
    private a;
    private static w;
    private static g;
    private static h;
    private a1;
    private b0;
    private bz;
    a8(a: string, b: any, c: any): void;
    bd(a: BrushCollection, b: BrushCollection): void;
    be(a: BrushCollection, b: BrushCollection): void;
    b(a: string, b: string[]): string[];
    bv(): void;
    protected u: boolean;
    protected t: boolean;
    private ai;
    protected k: LinearGraphTooltipDataContext;
    private ak;
    private am;
    cg(a: Point): Point;
    private aq;
    private an;
    private cf;
    private al;
    bu(a: Point, b: any, c: number, d: string): void;
    a2(): void;
    private bq;
    private b2;
    private j;
    a9(a: any): void;
    private au;
    private av;
    private aw;
    private ay;
    private ax;
    private at;
    ba(): void;
    as(): void;
    private x;
    bs(a: List$1<Path>): void;
    private bp;
    b1(): void;
    af(a: any): number;
    cp(a: TextBlock): Size;
    private b6;
    bt(a: TextBlock, b: Brush): void;
    bk(a: TextBlock, b: number, c: number): void;
    bj(a: number, b: number): void;
    bl(a: number, b: number): void;
    ae(a: FontInfo): number;
    private r;
    private n;
    private b5;
    private ac;
    private ad;
    br(): void;
    ar(): void;
    flush(): void;
    private o;
    az(a: LinearGaugeVisualData): void;
    a7(): void;
    bb(): void;
    bm(a: Path): void;
    bn(a: Path): void;
    bo(a: Path): void;
    co(): Path;
    bw(a: TextBlock): void;
    bx(a: TextBlock): void;
    by(a: TextBlock): void;
    b4(): TextBlock;
    bf(a: Path): void;
    bg(a: Path): void;
    bh(a: Path): void;
    cn(): Path;
    a4(a: TextBlock): void;
    a5(a: TextBlock): void;
    a6(a: TextBlock): void;
    b3(): TextBlock;
    l(): ToolTipInfo;
    bi(): void;
}
