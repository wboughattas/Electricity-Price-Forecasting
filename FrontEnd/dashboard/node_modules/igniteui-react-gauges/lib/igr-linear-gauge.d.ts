import * as React from 'react';
import { IgPoint } from "igniteui-react-core";
import { XamLinearGauge } from './XamLinearGauge';
import { LinearScaleOrientation } from './LinearScaleOrientation';
import { LinearGraphNeedleShape } from './LinearGraphNeedleShape';
import { IgrFormatLinearGraphLabelEventArgs } from './igr-format-linear-graph-label-event-args';
import { IgrAlignLinearGraphLabelEventArgs } from './igr-align-linear-graph-label-event-args';
import { IgrLinearGraphRange } from './igr-linear-graph-range';
import { IgrLinearGraphRangeCollection } from './igr-linear-graph-range-collection';
import { IChartTooltipProps } from "igniteui-react-core";
import { IgrDoubleValueChangedEventArgs } from "igniteui-react-core";
/**
 * A linear gauge for displaying a single value on a defined scale.
*/
export declare class IgrLinearGauge extends React.Component<IIgrLinearGaugeProps> {
    private _height;
    private _width;
    height: string;
    width: string;
    private _elRef;
    private _container;
    private _contentChildrenManager;
    private _updateContentChildren;
    contentRanges: IgrLinearGraphRange[];
    /**
    * The ranges actually present in the chart. Do not directly modify this array.
    * This array's contents can be modified by causing Angular to reproject the child content.
    * Or adding and removing ranges from the manual ranges collection on the ranges property.
    */
    actualRanges: IgrLinearGraphRange[];
    private _ranges;
    private _rangesAdapter;
    /**
     * A collection or manually added axes for the chart.
    */
    readonly ranges: IgrLinearGraphRangeCollection;
    protected _tooltipRef(t: any): void;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (div: HTMLDivElement) => void;
        children: any[];
    }, HTMLDivElement>;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    private _renderer;
    private _getMainRef;
    constructor(props: IIgrLinearGaugeProps);
    private _initialized;
    destroy(): void;
    private _wrapper;
    protected createImplementation(): XamLinearGauge;
    private _gauge;
    initializeContent(): void;
    componentWillUnmount(): void;
    private _tooltipTemplate;
    private _tooltipContent;
    tooltipTemplate: React.SFC<IChartTooltipProps> | React.Component<IChartTooltipProps>;
    private createWrapper;
    private _defaultTooltips;
    private _ensureDefaultTooltip;
    private _onDefaultTooltipsReady;
    private _updateTooltipState;
    private _activeTooltips;
    private _activeTooltipElements;
    private _currentTooltips;
    private _uniqueTooltipId;
    private createTooltip;
    private _ensureTooltipCreated;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: XamLinearGauge; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrLinearGauge;
    /**
 * Gets a value indicating whether the bullet graph is currently animating.
*/
    readonly animating: boolean;
    /**
     * Gets the transition progress of the animation when the control is animating.
    */
    transitionProgress: number;
    /**
     * Gets or sets the orientation of the scale.
    */
    orientation: LinearScaleOrientation;
    /**
     * Gets or sets a collection of brushes to be used as the palette for linear gauge ranges.
    */
    rangeBrushes: string[];
    /**
     * Gets or sets a collection of brushes to be used as the palette for linear gauge outlines.
    */
    rangeOutlines: string[];
    /**
     * Gets or sets the minimum value of the scale.
    */
    minimumValue: number;
    /**
     * Gets the resolved minimum value of the scale.
    */
    actualMinimumValue: number;
    /**
     * Gets or sets the maximum value of the scale.
    */
    maximumValue: number;
    /**
     * Gets the resolved maximum value of the scale.
    */
    actualMaximumValue: number;
    /**
     * Gets or sets the value at which the needle is positioned.
    */
    value: number;
    /**
     * Gets or sets the shape to use when rendering the needle from a number of options.
    */
    needleShape: LinearGraphNeedleShape;
    /**
     * Gets or sets the name used for needle.
    */
    needleName: string;
    /**
     * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    rangeInnerExtent: number;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleInnerExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    rangeOuterExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleOuterExtent: number;
    /**
     * Gets or sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    needleInnerExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    needleOuterExtent: number;
    /**
     * Gets or sets the width of the needle's inner base.
    */
    needleInnerBaseWidth: number;
    /**
     * Gets or sets the width of the needle's outer base.
    */
    needleOuterBaseWidth: number;
    /**
     * Gets or sets the width of the needle's inner point.
    */
    needleInnerPointWidth: number;
    /**
     * Gets or sets the width of the needle's outer point.
    */
    needleOuterPointWidth: number;
    /**
     * Gets or sets the extent of the needle's inner point.
    */
    needleInnerPointExtent: number;
    /**
     * Gets or sets the extent of the needle's outer point.
    */
    needleOuterPointExtent: number;
    /**
     * Gets or sets the interval to use for the scale.
    */
    interval: number;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
    */
    ticksPostInitial: number;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
    */
    ticksPreTerminal: number;
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
    */
    labelInterval: number;
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the linear gauge.
    */
    labelExtent: number;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
    */
    labelsPostInitial: number;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
    */
    labelsPreTerminal: number;
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
    */
    minorTickCount: number;
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    tickStartExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    tickEndExtent: number;
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
    */
    tickStrokeThickness: number;
    /**
     * Gets or sets the brush to use for the major tickmarks.
    */
    tickBrush: string;
    /**
     * Gets or sets the brush to use for the label font.
    */
    fontBrush: string;
    /**
     * Gets or sets the needle breadth.
    */
    needleBreadth: number;
    /**
     * Gets or sets the brush to use for needle element.
    */
    needleBrush: string;
    /**
     * Gets or sets the brush to use for the outline of needle element.
    */
    needleOutline: string;
    /**
     * Gets or sets the stroke thickness to use when rendering single actual value element.
    */
    needleStrokeThickness: number;
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    minorTickStartExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    minorTickEndExtent: number;
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
    */
    minorTickStrokeThickness: number;
    /**
     * Gets or sets the brush to use for the minor tickmarks.
    */
    minorTickBrush: string;
    /**
     * Gets or sets a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
    */
    isScaleInverted: boolean;
    /**
     * Gets or sets the brush to use to fill the backing of the linear gauge.
    */
    backingBrush: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
    */
    backingOutline: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
    */
    backingStrokeThickness: number;
    /**
     * Gets or sets the inner extent of the linear gauge backing.
    */
    backingInnerExtent: number;
    /**
     * Gets or sets the outer extent of the linear gauge backing.
    */
    backingOuterExtent: number;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleStartExtent: number;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleEndExtent: number;
    /**
     * Gets or sets the brush to use to fill the scale of the linear gauge.
    */
    scaleBrush: string;
    /**
     * Gets or sets the brush to use for the outline of the scale.
    */
    scaleOutline: string;
    /**
     * Gets or sets the stroke thickness of the scale outline.
    */
    scaleStrokeThickness: number;
    /**
     * Gets or sets whether needle dragging is enabled or not.
    */
    isNeedleDraggingEnabled: boolean;
    /**
     * Gets or sets the label composite format used when creating label values.
    */
    labelFormat: string;
    /**
     * Gets or sets the format specifiers to use with the LabelFormat string.
    */
    labelFormatSpecifiers: any[];
    /**
     * Gets or sets the number of milliseconds over which changes to the linear gauge should be animated.
    */
    transitionDuration: number;
    /**
     * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
    */
    showToolTipTimeout: number;
    /**
     * Gets or sets a value indicating whether tooltips are enabled.
    */
    showToolTip: boolean;
    /**
     * Gets or sets the font.
    */
    font: string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    pixelScalingRatio: number;
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    actualPixelScalingRatio: number;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
 * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.

* @param point  * The point for which to retrieve the associated value.
*/
    getValueForPoint(point: IgPoint): number;
    needleContainsPoint(point: IgPoint, isFinger: boolean): boolean;
    /**
     * Returns visuals as a serialized string.
    
    */
    exportSerializedVisualData(): string;
    /**
     * Use to force the linear gauge to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the linear gauge needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the linear gauge.
    
    */
    flush(): void;
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    provideContainer(container: any): void;
    containerResized(): void;
    styleUpdated(): void;
    private _formatLabel;
    private _formatLabel_wrapped;
    /**
     * Event which is raised when a label of the the gauge is formatted.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the gauge widget.
     * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
     * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
     * Use ui.value to obtain the value on the the gauge scale associated with the label.
     * Use ui.label to obtain the string value of the label.
    */
    formatLabel: (s: IgrLinearGauge, e: IgrFormatLinearGraphLabelEventArgs) => void;
    private _alignLabel;
    private _alignLabel_wrapped;
    /**
     * Event which is raised when a label of the linear gauge is aligned along the scale.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the gauge widget.
     * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
     * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
     * Use ui.value to obtain the value on the gauge scale associated with the label.
     * Use ui.label to obtain the string value of the label.
     * Use ui.width to obtain the width of the label.
     * Use ui.height to obtain the height of the label.
     * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
     * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
    */
    alignLabel: (s: IgrLinearGauge, e: IgrAlignLinearGraphLabelEventArgs) => void;
    private _valueChanged;
    private _valueChanged_wrapped;
    /**
     * Occurs when the Value property changes.
    */
    valueChanged: (s: IgrLinearGauge, e: IgrDoubleValueChangedEventArgs) => void;
    private _actualMinimumValueChange;
    private _actualMinimumValueChange_wrapped;
    actualMinimumValueChange: (s: IgrLinearGauge, e: number) => void;
    private _actualMaximumValueChange;
    private _actualMaximumValueChange_wrapped;
    actualMaximumValueChange: (s: IgrLinearGauge, e: number) => void;
}
export interface IIgrLinearGaugeProps {
    width?: string;
    height?: string;
    /**
 * Gets the transition progress of the animation when the control is animating.
*/
    transitionProgress?: number | string;
    /**
     * Gets or sets the orientation of the scale.
    */
    orientation?: LinearScaleOrientation | string;
    /**
     * Gets or sets a collection of brushes to be used as the palette for linear gauge ranges.
    */
    rangeBrushes?: string[] | string;
    /**
     * Gets or sets a collection of brushes to be used as the palette for linear gauge outlines.
    */
    rangeOutlines?: string[] | string;
    /**
     * Gets or sets the minimum value of the scale.
    */
    minimumValue?: number | string;
    /**
     * Gets the resolved minimum value of the scale.
    */
    actualMinimumValue?: number | string;
    /**
     * Gets or sets the maximum value of the scale.
    */
    maximumValue?: number | string;
    /**
     * Gets the resolved maximum value of the scale.
    */
    actualMaximumValue?: number | string;
    /**
     * Gets or sets the value at which the needle is positioned.
    */
    value?: number | string;
    /**
     * Gets or sets the shape to use when rendering the needle from a number of options.
    */
    needleShape?: LinearGraphNeedleShape | string;
    /**
     * Gets or sets the name used for needle.
    */
    needleName?: string;
    /**
     * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    rangeInnerExtent?: number | string;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleInnerExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    rangeOuterExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleOuterExtent?: number | string;
    /**
     * Gets or sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    needleInnerExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    needleOuterExtent?: number | string;
    /**
     * Gets or sets the width of the needle's inner base.
    */
    needleInnerBaseWidth?: number | string;
    /**
     * Gets or sets the width of the needle's outer base.
    */
    needleOuterBaseWidth?: number | string;
    /**
     * Gets or sets the width of the needle's inner point.
    */
    needleInnerPointWidth?: number | string;
    /**
     * Gets or sets the width of the needle's outer point.
    */
    needleOuterPointWidth?: number | string;
    /**
     * Gets or sets the extent of the needle's inner point.
    */
    needleInnerPointExtent?: number | string;
    /**
     * Gets or sets the extent of the needle's outer point.
    */
    needleOuterPointExtent?: number | string;
    /**
     * Gets or sets the interval to use for the scale.
    */
    interval?: number | string;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
    */
    ticksPostInitial?: number | string;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
    */
    ticksPreTerminal?: number | string;
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
    */
    labelInterval?: number | string;
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the linear gauge.
    */
    labelExtent?: number | string;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
    */
    labelsPostInitial?: number | string;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
    */
    labelsPreTerminal?: number | string;
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
    */
    minorTickCount?: number | string;
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    tickStartExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    tickEndExtent?: number | string;
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
    */
    tickStrokeThickness?: number | string;
    /**
     * Gets or sets the brush to use for the major tickmarks.
    */
    tickBrush?: string;
    /**
     * Gets or sets the brush to use for the label font.
    */
    fontBrush?: string;
    /**
     * Gets or sets the needle breadth.
    */
    needleBreadth?: number | string;
    /**
     * Gets or sets the brush to use for needle element.
    */
    needleBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of needle element.
    */
    needleOutline?: string;
    /**
     * Gets or sets the stroke thickness to use when rendering single actual value element.
    */
    needleStrokeThickness?: number | string;
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    minorTickStartExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    minorTickEndExtent?: number | string;
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
    */
    minorTickStrokeThickness?: number | string;
    /**
     * Gets or sets the brush to use for the minor tickmarks.
    */
    minorTickBrush?: string;
    /**
     * Gets or sets a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
    */
    isScaleInverted?: boolean | string;
    /**
     * Gets or sets the brush to use to fill the backing of the linear gauge.
    */
    backingBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
    */
    backingOutline?: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
    */
    backingStrokeThickness?: number | string;
    /**
     * Gets or sets the inner extent of the linear gauge backing.
    */
    backingInnerExtent?: number | string;
    /**
     * Gets or sets the outer extent of the linear gauge backing.
    */
    backingOuterExtent?: number | string;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleStartExtent?: number | string;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
    */
    scaleEndExtent?: number | string;
    /**
     * Gets or sets the brush to use to fill the scale of the linear gauge.
    */
    scaleBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the scale.
    */
    scaleOutline?: string;
    /**
     * Gets or sets the stroke thickness of the scale outline.
    */
    scaleStrokeThickness?: number | string;
    /**
     * Gets or sets whether needle dragging is enabled or not.
    */
    isNeedleDraggingEnabled?: boolean | string;
    /**
     * Gets or sets the label composite format used when creating label values.
    */
    labelFormat?: string;
    /**
     * Gets or sets the format specifiers to use with the LabelFormat string.
    */
    labelFormatSpecifiers?: any[];
    /**
     * Gets or sets the number of milliseconds over which changes to the linear gauge should be animated.
    */
    transitionDuration?: number | string;
    /**
     * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
    */
    showToolTipTimeout?: number | string;
    /**
     * Gets or sets a value indicating whether tooltips are enabled.
    */
    showToolTip?: boolean | string;
    /**
     * Gets or sets the font.
    */
    font?: string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    pixelScalingRatio?: number | string;
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    actualPixelScalingRatio?: number | string;
    /**
 * Event which is raised when a label of the the gauge is formatted.
 * Function takes first argument evt and second argument ui.
 * Use ui.owner to obtain reference to the gauge widget.
 * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
 * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
 * Use ui.value to obtain the value on the the gauge scale associated with the label.
 * Use ui.label to obtain the string value of the label.
*/
    formatLabel?: (s: IgrLinearGauge, e: IgrFormatLinearGraphLabelEventArgs) => void;
    /**
     * Event which is raised when a label of the linear gauge is aligned along the scale.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the gauge widget.
     * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
     * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
     * Use ui.value to obtain the value on the gauge scale associated with the label.
     * Use ui.label to obtain the string value of the label.
     * Use ui.width to obtain the width of the label.
     * Use ui.height to obtain the height of the label.
     * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
     * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
    */
    alignLabel?: (s: IgrLinearGauge, e: IgrAlignLinearGraphLabelEventArgs) => void;
    /**
     * Occurs when the Value property changes.
    */
    valueChanged?: (s: IgrLinearGauge, e: IgrDoubleValueChangedEventArgs) => void;
}
